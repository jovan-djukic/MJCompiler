package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.logging.log4j.Logger;
import rs.ac.bg.etf.pp1.utilities.MyLoggerFactory;

parser code {:
	
	private Logger logger = MyLoggerFactory.getLogger(getClass());

	public Logger getLogger() {
		return logger;	
	}    

	
   	//redefined error functions  
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      report_error(message, info);
      done_parsing();
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("Syntax erorr: ", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatal error, cannot continue parsing, symbol: ", cur_token);
    }

    public void report_error(String message, Object info) {
        if (info instanceof Symbol) {
			Symbol currentSymbol = (Symbol) info;
			message += "at line: " + (currentSymbol.left + 1) + ", at column: " + (currentSymbol.right + 1);
		}
		logger.info(message + ", current symbol: " + info.toString());
    }

:}


scan with {:
	Symbol symbol = this.getScanner().next_token();
	if (symbol != null && symbol.value != null) 
		logger.debug(symbol.toString() + " " + symbol.value.toString());
	return symbol;
:}

action code {:
	//functions defined for counts
	private int globalVariableCount = 0;

	public int getGlobalVariableCount() {
		return globalVariableCount;
	}

	private int currentVariableCount = 0;

	public void incrementCurrentVariableCount() {
		currentVariableCount++;
	}

	public void invalidateCurrentVariableCount() {
		currentVariableCount = 0;
	}
	
	public void incrementGlobalVariableCount() {
		globalVariableCount += currentVariableCount;
		currentVariableCount = 0;
	}

	private int mainVariableCount = 0;

	public int getMainVariableCount() {
		return mainVariableCount;
	}

	public void incrementMainVariableCount() {
		mainVariableCount += currentVariableCount;
		currentVariableCount = 0;
	}

	private static String main = "main";
	
	public boolean isMain(String identifier) {
		return main.equals(identifier);
	}

	private int constantCount = 0;

	public int getConstantCount() {
		return constantCount;
	}

	public void incrementConstantCount() {
		constantCount++;
	}

	private int globalArrayCount = 0;
	private int currentArrayCount = 0;

	public int getGlobalArrayCount() {
		return globalArrayCount;
	}

	public void incrementGlobalArrayCount() {
		globalArrayCount += currentArrayCount;
		currentArrayCount = 0;	
	}

	public void incrementCurrentArrayCount() {
		currentArrayCount++;
	}

	public void invalidateCurrentArrayCount() {
		currentArrayCount = 0;	
	}

	private int staticMethodCount = 0;
	private int nonStaticMethodCount = 0;
	private int currentStaticMethodCount = 0;
	private int currentNonStaticMethodCount = 0;

	public int getStaticMethodCount() { 
		return staticMethodCount;
	}

	public int getNonStaticMethodCount() { 
		return nonStaticMethodCount;
	}

	public int getGlobalMethodCount() {
		return currentNonStaticMethodCount;
	}

	public void incrementCurrentStaticMethodCount() {
		currentStaticMethodCount++;
	}

	public void incrementCurrentNonStaticMethodCount() {
		currentNonStaticMethodCount++;
	}

	public void incrementStaticMethodCount() {
		staticMethodCount += currentStaticMethodCount;
		currentStaticMethodCount = 0;
	}

	public void incrementNonStaticMethodCount() {
		nonStaticMethodCount += currentNonStaticMethodCount;
		currentNonStaticMethodCount = 0;
	}

	private int codeBlockCount = 0;

	public int getCodeBlockCount() {
		return codeBlockCount;
	}

	public void incrementCodeBlockCount() {
		codeBlockCount++;
	}

	private int mainMethodCallCount = 0;
	private int currentMethodCallCount = 0;

	public int getMainMethodCalls() {
		return mainMethodCallCount;
	}

	public void incrementCurrentMethodCallCount() {
		currentMethodCallCount++;
	}

	public void invalidateCurrentMethodCallCount() {
		currentMethodCallCount = 0;
	}

	public void incrementMainMethodCallCount() {
		mainMethodCallCount += currentMethodCallCount;
		currentMethodCallCount = 0;
	}

	private int formalArgumentsCount = 0;

	public int getFormalArgumentsCount() {
		return formalArgumentsCount;
	}

	public void incrementFormalArgumentsCount() {
		formalArgumentsCount++;
	}

	private int classDefinitionCount = 0;

	public int getClassDefinitionCount() {
		return classDefinitionCount;
	}

	public void incrementClassDefinitionCount() {
		classDefinitionCount++;
	}

	private int classVariableCount = 0;

	public int getClassVariableCount() {
		return classVariableCount;
	}

	public void incrementClassVariableCount() {
		classVariableCount += currentVariableCount;
		currentVariableCount = 0;
	}

	void printSyntaxErrorDescription(String message) {
		parser.getLogger().info("Description: " + message);
	}

:}

terminal PROGRAM, LEFT_BRACE, RIGHT_BRACE, CONST, SEMICOLON, EQUALS, COMA, LEFT_BRACKET, RIGHT_BRACKET;
terminal CLASS, LEFT_PARENTHESIS, RIGHT_PARENTHESIS, STATIC, VOID, IF, ELSE, BREAK, CONTINUE, RETURN, FOR, INCREMENT;
terminal DECREMENT, OR, AND, NEW, DOT, EQUAL, NOT_EQUAL, GREATER_THAN, GREATER_OR_EQUAL_THAN, LESS_THAN;
terminal LESS_OR_EQUAL_THAN, PLUS, MINUS, PLUS_EQUALS, MINUS_EQUALS, TIMES, SOLIDUS, PERCENT, TIMES_EQUALS;
terminal SOLIDUS_EQUALS, PERCENT_EQUALS, READ, PRINT, EXTENDS;

terminal String IDENTIFIER, CHARACTER_CONSTANT;

terminal Integer NUMERICAL_CONSTANT;

terminal Boolean BOOLEAN_CONSTANT;

nonterminal Program, NonMethodDeclarationList, MethodDeclarationList;

nonterminal NonMethodDeclaration, ConstantDeclaration, GlobalVariableDeclaration, GlobalVariableList, ClassDeclaration;

nonterminal Type, ConstantList, Constant, Value, Variable, Brackets;

nonterminal ParentClassDeclaration, ClassVariableDeclarationList, ClassVariableDeclaration, ClassVariableList, ClassMethodList;

nonterminal MethodDeclaration, StaticModifier, ReturnType, FormalParameterList, MethodVariableDeclarationList, MethodVariableDeclaration, MethodVariableList,
			FormalParameter, ComaSeparetedFormalParameterList;

nonterminal StatementList, Statement, MatchedStatement, UnmatchedStatement, ReturnValue, PrintParameters;

nonterminal IfHeader, ForHeader;

nonterminal ForInitialStatement, ForCondition, ForPostStatement;

nonterminal DesignatorStatement, RestOfTheDesignatorStatement, ActualParameters, ExpressionList, ComaSeparatedExpressionList;

nonterminal Condition, OrSeparatedConditionTerms, ConditionTerm, AndSeparatedConditionFacts, ConditionFact, RestOfTheConditionFact, RelationalOperator;

nonterminal Expression, ExpressionPrefix, AdditionOperatorSeparatedTermList, Term, MultiplicationOperatorSeparatedFactorList, Factor;

nonterminal OptionalParameters, ArraySize, ArrayIndexer;

nonterminal Designator, AccessList, AccessListElement, AssignOperation, AssignOperator;

nonterminal AdditionOperator, AdditionOperatorLeft, AdditionOperatorRight;

nonterminal MultiplicationOperator, MultiplicationOperatorLeft, MultiplicationOperatorRight;

Program ::= PROGRAM IDENTIFIER 
			NonMethodDeclarationList 
			LEFT_BRACE 	
				MethodDeclarationList 
			RIGHT_BRACE;
			
NonMethodDeclarationList ::= NonMethodDeclaration NonMethodDeclarationList
							 |
							 /* epsilon */
							 ;

NonMethodDeclaration ::= 	ConstantDeclaration
						 	|
						 	GlobalVariableDeclaration
							{:
								incrementGlobalVariableCount();
								incrementGlobalArrayCount();
						 	:}
						 	|
						 	ClassDeclaration
						 	;
			
ConstantDeclaration ::= CONST Type ConstantList SEMICOLON;

ConstantList ::= ConstantList COMA Constant
				 |
				 Constant
				 ;	

Constant ::=	IDENTIFIER EQUALS Value
				{:
					incrementConstantCount();
				:};

Value ::= NUMERICAL_CONSTANT
		  |
		  CHARACTER_CONSTANT
		  |
		  BOOLEAN_CONSTANT
		  ;

GlobalVariableDeclaration ::=	Type GlobalVariableList SEMICOLON
								|
								error SEMICOLON {: printSyntaxErrorDescription("Invalid global variable list declaration"); :}
								|
								error COMA GlobalVariableList SEMICOLON {: printSyntaxErrorDescription("Invalid global variable declaration"); :}
								;
								
GlobalVariableList ::=	GlobalVariableList COMA Variable
				 		|
				 		Variable
				 		|
				 		GlobalVariableList COMA error {: printSyntaxErrorDescription("Invalid global variable declaration"); :}
				 		|
				 		error {: printSyntaxErrorDescription("Invalid global variable declaration"); :}
				 		;
				 
Variable ::=	IDENTIFIER Brackets
				{: 
			 		incrementCurrentVariableCount();
			 	:}
			 	;

Brackets ::=	LEFT_BRACKET RIGHT_BRACKET
			 	{:
					incrementCurrentArrayCount();
				:}
			 	|
			 	/* epsilon */
			 	;
			 
ClassDeclaration ::=	CLASS IDENTIFIER ParentClassDeclaration LEFT_BRACE
							ClassVariableDeclarationList
							{:
								incrementClassVariableCount();
							:}
							ClassMethodList
						 RIGHT_BRACE
						 {:
						 	incrementStaticMethodCount();
						 	incrementNonStaticMethodCount();
						 	incrementClassDefinitionCount();
						 :};
					 
ParentClassDeclaration ::= EXTENDS Type
						   |
						   /* epsilon */
						   |
						   error //{: getLogger().debug("LEFT_BRACE ParentClassDeclaration recovery"); :}
						   ;
					 
ClassVariableDeclarationList ::=	ClassVariableDeclaration ClassVariableDeclarationList
					  				|
					  				/* epsilon */
					  				|
									error //{: getLogger().debug("LEFT_BRACE ClassVariableList recovery"); :}
					  				;

ClassVariableDeclaration ::=	Type ClassVariableList SEMICOLON 
								|
								error SEMICOLON //{: parser.getLogger().debug("SEMICOLON ClassVariableList recovery"); :}
								;

ClassVariableList ::= 	Variable COMA ClassVariableList
						|
						Variable
						;

ClassMethodList ::= LEFT_BRACE
						MethodDeclarationList
					RIGHT_BRACE
					|
					/* epsilon */
					;

MethodDeclarationList ::= MethodDeclaration MethodDeclarationList
						  |
						  /* epsilon */
						  ;
						  
MethodDeclaration ::=	StaticModifier ReturnType IDENTIFIER:identifier LEFT_PARENTHESIS FormalParameterList RIGHT_PARENTHESIS
							MethodVariableDeclarationList
					  	LEFT_BRACE
					  		StatementList
					  	RIGHT_BRACE
					  	{:
							if (isMain(identifier)) {
								incrementMainVariableCount();
								incrementMainMethodCallCount();
							} else {
								invalidateCurrentVariableCount();
								invalidateCurrentArrayCount();
								invalidateCurrentMethodCallCount();
							}
							incrementCodeBlockCount();
						:};
					  
StaticModifier ::= 	STATIC
					{:
						incrementCurrentStaticMethodCount();
					:} 
				   	|
				   	/* epsilon */
				   	{:
				   		incrementCurrentNonStaticMethodCount();
				   	:}
				   	;
				   	
ReturnType ::= Type
			   |
			   VOID
			   ;

FormalParameterList ::= FormalParameter ComaSeparetedFormalParameterList
						|
						error //{: parser.getLogger().debug("Whole formal parameter error"); :}
						|
						/* epsilon */
						;

ComaSeparetedFormalParameterList ::= COMA FormalParameter ComaSeparetedFormalParameterList
									 |
									 COMA error ComaSeparetedFormalParameterList //{: parser.getLogger().debug("Partial formal parameter error"); :}
									 |
									 /* epsilon */
									 ;						
						
FormalParameter ::= Type IDENTIFIER Brackets
					{:
						incrementFormalArgumentsCount();
					:}
					;

MethodVariableDeclarationList ::= MethodVariableDeclaration MethodVariableDeclarationList
								  |
								  error
								  |
								  /* epsilon */
								  ;

MethodVariableDeclaration ::=	Type MethodVariableList SEMICOLON
								|
								Type error SEMICOLON
								;

MethodVariableList ::=	Variable COMA MethodVariableList
						|
						Variable
						;

Type ::= IDENTIFIER;

StatementList ::= Statement StatementList
				  |
				  /* epsilon */
				  ;

Statement ::= MatchedStatement
			  |
			  UnmatchedStatement
			  ;

IfHeader ::=	IF LEFT_PARENTHESIS Condition RIGHT_PARENTHESIS
				|
				IF LEFT_PARENTHESIS error RIGHT_PARENTHESIS //{: parser.getLogger().debug("If condition error recovery"); :}
				;
			  
ForHeader ::=	FOR LEFT_PARENTHESIS ForInitialStatement SEMICOLON ForCondition SEMICOLON ForPostStatement RIGHT_PARENTHESIS
				|
				FOR LEFT_PARENTHESIS error RIGHT_PARENTHESIS //{: parser.getLogger().debug("Whole ForInnerStatement recovery");:}
				;

UnmatchedStatement ::= IfHeader 
							Statement
					   |
					   IfHeader
					   		MatchedStatement
					   ELSE
					   		UnmatchedStatement
					   | /* umatched for */
					   ForHeader
					 		UnmatchedStatement
					   ;
					 
MatchedStatement ::= 	IfHeader 
							MatchedStatement
						ELSE
							MatchedStatement
						| /* matched for */
						ForHeader
							MatchedStatement
						|
						DesignatorStatement SEMICOLON
						|
						BREAK SEMICOLON
						|
						CONTINUE SEMICOLON
					 	|
					 	RETURN ReturnValue SEMICOLON
					 	|
					 	READ LEFT_PARENTHESIS Designator RIGHT_PARENTHESIS SEMICOLON
					 	|
					 	PRINT LEFT_PARENTHESIS PrintParameters RIGHT_PARENTHESIS SEMICOLON
					 	|
					 	LEFT_BRACE
					 		StatementList
					 	RIGHT_BRACE
					 	{:
					 		incrementCodeBlockCount();
					 	:}			
					 	;

ReturnValue ::= Expression
				|
				/* epsilon */
				;
				
PrintParameters ::= Expression
					|
					Expression COMA NUMERICAL_CONSTANT
					;

ForInitialStatement ::= DesignatorStatement
						|
						error //{: parser.getLogger().debug("ForInitialStatement recovery"); :}
						|
						/* epsilon */
						;
						 
ForCondition ::=	Condition
				 	|
				 	error //{: parser.getLogger().debug("ForCondition recovery"); :}
				 	|
				 	/* epsilon */
		  		 	;
		  		 
ForPostStatement ::= DesignatorStatement
					 |
					 error //{: parser.getLogger().debug("ForPostStatement recovery"); :}
					 |
					 /* epsilon */
					 ;

DesignatorStatement ::=	Designator RestOfTheDesignatorStatement;

RestOfTheDesignatorStatement ::= 	AssignOperation
									|
									LEFT_PARENTHESIS ActualParameters RIGHT_PARENTHESIS
								 	{:
								 		incrementCurrentMethodCallCount();
								 	:}
								 	|
								 	INCREMENT
								 	|
								 	DECREMENT
								 	;

AssignOperation ::= 	AssignOperator Expression
						|
						error //{: parser.getLogger().debug("Assign operation recovery"); :}
						;
								 
ActualParameters ::= ExpressionList
					 |
					 /* epsilon */
					 ;

ExpressionList ::=	Expression ComaSeparatedExpressionList
					|
					error //{: parser.getLogger().debug("Whole ActualParameters recovery"); :}
					;

ComaSeparatedExpressionList ::= COMA Expression ComaSeparatedExpressionList
								|
								COMA error //{: parser.getLogger().debug("Partial ActualParameters recovery"); :}
								|
								/* epsilon */
				 				;
				 				
Condition ::= ConditionTerm OrSeparatedConditionTerms;

OrSeparatedConditionTerms ::= OR ConditionTerm OrSeparatedConditionTerms
							  |
							  /* epsilon */
							  ;		 				
				 				
ConditionTerm ::= ConditionFact AndSeparatedConditionFacts;

AndSeparatedConditionFacts ::= AND ConditionFact AndSeparatedConditionFacts
							   |
							   /* epsilon */
							   ;

ConditionFact ::= Expression RestOfTheConditionFact;

RestOfTheConditionFact ::= RelationalOperator Expression
						   |
						   /* epsilon */
						   ;
						   
Expression ::= ExpressionPrefix Term AdditionOperatorSeparatedTermList;

ExpressionPrefix ::= MINUS
					 |
					 /* epsilon */
					 ;

AdditionOperatorSeparatedTermList ::= AdditionOperator Term
									  |
									  /* epsilon */
									  ;

Term ::= Factor MultiplicationOperatorSeparatedFactorList;

MultiplicationOperatorSeparatedFactorList ::= MultiplicationOperator Factor
											  |
											  /* epsilon */
											  ;

Factor ::= Designator OptionalParameters
		   |
		   NUMERICAL_CONSTANT
		   |
		   CHARACTER_CONSTANT
		   |
		   BOOLEAN_CONSTANT
		   |
		   NEW Type ArraySize
		   |
		   LEFT_PARENTHESIS Expression RIGHT_PARENTHESIS
		   ;
		   
OptionalParameters ::= 	LEFT_PARENTHESIS ActualParameters RIGHT_PARENTHESIS
					   	{:
					   		incrementCurrentMethodCallCount();
					   	:}
					   	|
					   	/* epsilon */
					   	;		   
		   						  
ArraySize ::= ArrayIndexer
			  |
			  /* epsilon */
			  ;
	   
ArrayIndexer ::=	LEFT_BRACKET Expression RIGHT_BRACKET
					|
					LEFT_BRACKET error RIGHT_BRACKET //{: parser.getLogger().debug("ArrayIndexer error recovery"); :}
					;
					
					
Designator ::= IDENTIFIER AccessList;

AccessList ::= AccessListElement AccessList
			   |
			   /* epsilon */
			   ;
			   
AccessListElement ::= DOT IDENTIFIER
					  |
					  ArrayIndexer
					  ;

AssignOperator ::= 	EQUALS
					|
					AdditionOperatorRight
					|
					MultiplicationOperatorRight
					;

RelationalOperator ::= EQUAL
					   |
					   NOT_EQUAL
					   |
					   GREATER_THAN
					   |
					   GREATER_OR_EQUAL_THAN
					   |
					   LESS_THAN
					   |
					   LESS_OR_EQUAL_THAN
					   ;
					   
AdditionOperator ::= AdditionOperatorLeft
					 |
					 AdditionOperatorRight
					 ;					   
					 
AdditionOperatorLeft ::= PLUS
						 |
						 MINUS
						 ;					  
					   
AdditionOperatorRight ::= PLUS_EQUALS
						  |
						  MINUS_EQUALS
						  ;
						   
MultiplicationOperator ::= MultiplicationOperatorLeft
						   |
						   MultiplicationOperatorRight
						   ;
						
MultiplicationOperatorLeft ::= TIMES
							   |
							   SOLIDUS
							   |													   
							   PERCENT
							   ;
								
MultiplicationOperatorRight ::= TIMES_EQUALS
							    |
							    SOLIDUS_EQUALS
							    |
							    PERCENT_EQUALS
							    ;
						   
				 				
				 				
				 				
				 				
				 				
				 				