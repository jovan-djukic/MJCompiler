package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.logging.log4j.Logger;
import rs.ac.bg.etf.pp1.utilities.MyLoggerFactory;
import java.util.*;
import rs.etf.pp1.symboltable.concepts.*;
import rs.ac.bg.etf.utilities.*;


parser code {:
	
	private Logger logger = MyLoggerFactory.getLogger(getClass());

	public Logger getLogger() {
		return logger;	
	}    

	
   	//redefined error functions  
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      report_error(message, info);
      done_parsing();
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("Syntax erorr: ", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatal error, cannot continue parsing, symbol: ", cur_token);
    }

    public void report_error(String message, Object info) {
        if (info != null && info instanceof Symbol) {
			Symbol currentSymbol = (Symbol) info;
			message += "at line: " + (currentSymbol.left + 1) + ", at column: " + (currentSymbol.right + 1);
			logger.info(message + ", current symbol: " + info.toString());
		} else {
			logger.info(message);
		}
		errorFound = true;
    }

    private boolean errorFound = false;

    public void report_semantic_error(String message, int lineNumber) {
    	report_error("Semantic error on line: " + lineNumber + ", " + message, null);
    	errorFound = true;
    }

:}


scan with {:
	Symbol symbol = this.getScanner().next_token();
	if (symbol != null && symbol.value != null) 
		logger.debug(symbol.toString() + " " + symbol.value.toString());
	return symbol;
:}

init with {:
	SymbolTable.init(); // Universe scope
:}

action code {:
	//functions defined for counts
	private int globalVariableCount = 0;

	public int getGlobalVariableCount() {
		return globalVariableCount;
	}

	private int currentMethodVariableCount = 0;

	public void incrementCurrentMethodVariableCount() {
		currentMethodVariableCount++;
	}

	public void invalidateCurrentMethodVariableCount() {
		currentMethodVariableCount = 0;
	}
	
	public void incrementGlobalVariableCount() {
		globalVariableCount++;
	}

	private int mainVariableCount = 0;

	public int getMainVariableCount() {
		return mainVariableCount;
	}

	public void incrementMainVariableCount() {
		mainVariableCount += currentMethodVariableCount;
		currentMethodVariableCount = 0;
	}

	private static String main = "main";
	
	public boolean isMain(String identifier) {
		return main.equals(identifier);
	}

	private int constantCount = 0;

	public int getConstantCount() {
		return constantCount;
	}

	public void incrementConstantCount() {
		constantCount++;
	}

	private int globalArrayCount = 0;
	private int currentArrayCount = 0;

	public int getGlobalArrayCount() {
		return globalArrayCount;
	}

	public void incrementGlobalArrayCount() {
		globalArrayCount += currentArrayCount;
		currentArrayCount = 0;	
	}

	public void incrementCurrentArrayCount() {
		currentArrayCount++;
	}

	public void invalidateCurrentArrayCount() {
		currentArrayCount = 0;	
	}

	private int staticMethodCount = 0;
	private int nonStaticMethodCount = 0;
	private int currentNonStaticMethodCount = 0;

	public int getStaticMethodCount() { 
		return staticMethodCount;
	}

	public int getNonStaticMethodCount() { 
		return nonStaticMethodCount;
	}

	public int getGlobalMethodCount() {
		return currentNonStaticMethodCount;
	}

	public void incrementCurrentNonStaticMethodCount() {
		currentNonStaticMethodCount++;
	}

	public void incrementStaticMethodCount() {
		staticMethodCount++;
	}

	public void incrementNonStaticMethodCount() {
		nonStaticMethodCount += currentNonStaticMethodCount;
		currentNonStaticMethodCount = 0;
	}

	private int codeBlockCount = 0;
	private int currentMethodCallCount = 0;

	public int getCodeBlockCount() {
		return codeBlockCount;
	}

	public void incrementCodeBlockCount() {
		codeBlockCount++;
	}

	private int mainMethodCallCount = 0;

	public int getMainMethodCalls() {
		return mainMethodCallCount;
	}

	public void incrementCurrentMethodCallCount() {
		currentMethodCallCount++;
	}

	public void invalidateCurrentMethodCallCount() {
		currentMethodCallCount = 0;
	}

	public void incrementMainMethodCallCount() {
		mainMethodCallCount += currentMethodCallCount;
		currentMethodCallCount = 0;
	}

	private int formalArgumentsCount = 0;

	public int getFormalArgumentsCount() {
		return formalArgumentsCount;
	}

	public void incrementFormalArgumentsCount() {
		formalArgumentsCount++;
	}

	private int classDefinitionCount = 0;

	public int getClassDefinitionCount() {
		return classDefinitionCount;
	}

	public void incrementClassDefinitionCount() {
		classDefinitionCount++;
	}

	private int classVariableCount = 0;

	public int getClassVariableCount() {
		return classVariableCount;
	}

	public void incrementClassVariableCount() {
		classVariableCount ++;
	}

	void printSyntaxErrorDescription(String message) {
		parser.getLogger().info("Description: " + message);
	}

	//Semantic analysis 
	private globalVariablePosition = 0;
:}

terminal PROGRAM, LEFT_BRACE, RIGHT_BRACE, CONST, SEMICOLON, EQUALS, COMA, LEFT_BRACKET, RIGHT_BRACKET;
terminal CLASS, LEFT_PARENTHESIS, RIGHT_PARENTHESIS, STATIC, VOID, IF, ELSE, BREAK, CONTINUE, RETURN, FOR, INCREMENT;
terminal DECREMENT, OR, AND, NEW, DOT, EQUAL, NOT_EQUAL, GREATER_THAN, GREATER_OR_EQUAL_THAN, LESS_THAN;
terminal LESS_OR_EQUAL_THAN, PLUS, MINUS, PLUS_EQUALS, MINUS_EQUALS, TIMES, SOLIDUS, PERCENT, TIMES_EQUALS;
terminal SOLIDUS_EQUALS, PERCENT_EQUALS, READ, PRINT, EXTENDS;

terminal String IDENTIFIER, CHARACTER_CONSTANT;

terminal Integer NUMERICAL_CONSTANT;

terminal Boolean BOOLEAN_CONSTANT;

nonterminal Program, NonMethodDeclarationList, MethodDeclarationList;

nonterminal NonMethodDeclaration, ConstantDeclaration, GlobalVariableDeclaration, ClassDeclaration;

nonterminal ParentClassDeclaration, ClassVariableDeclarationList, ClassVariableDeclaration, ClassVariableList, ClassMethodList;

nonterminal MethodDeclaration, StaticModifier, ReturnType, FormalParameterList, MethodVariableDeclarationList, MethodVariableDeclaration, MethodVariableList,
			FormalParameter;

nonterminal StatementList, Statement, MatchedStatement, UnmatchedStatement, ReturnValue, PrintParameters;

nonterminal IfHeader, ForHeader;

nonterminal ForInitialStatement, ForCondition, ForPostStatement;

nonterminal DesignatorStatement, RestOfTheDesignatorStatement, MethodCall, ActualParameters, ExpressionList;

nonterminal Condition, ConditionTerm, ConditionFact, RestOfTheConditionFact, RelationalOperator;

nonterminal Expression, ExpressionPrefix, TermList, Term, FactorList, Factor;

nonterminal OptionalParameters, ArraySize, ArrayIndexer;

nonterminal Designator, AccessList, AccessListElement, AssignOperation, AssignOperator;

nonterminal AdditionOperator, AdditionOperatorLeft, AdditionOperatorRight;

nonterminal MultiplicationOperator, MultiplicationOperatorLeft, MultiplicationOperatorRight;

//Semantic analysis non terminals
nonterminal Obj ProgramName;

nonterminal Struct Type;

//constants
nonterminal Value Value;
nonterminal Constant Constant;
nonterminal List<Constant> ConstantList;

//varaibles
nonterminal Variable Variable;
nonterminal Boolean Brackets;
nonterminal List<Variable> GlobalVariableList;

Program ::= PROGRAM ProgramName:programObject 
			NonMethodDeclarationList 
			LEFT_BRACE 	
				MethodDeclarationList 
			RIGHT_BRACE 
			{:
				SymbolTable.chainLocalSymbols(programObject);
				SymbolTable.closeScope();
			:};

ProgramName ::= IDENTIFIER:name 
				{:
					RESULT  = SymbolTable.insert(Obj.Prog, name, SymbolTable.noType);
					SymbolTable.openScope();
				:}
				;

NonMethodDeclarationList ::= NonMethodDeclarationList NonMethodDeclaration
							 |
							 /* epsilon */
							 ;

NonMethodDeclaration ::= 	ConstantDeclaration
						 	|
						 	GlobalVariableDeclaration {: incrementGlobalArrayCount(); :}
						 	|
						 	ClassDeclaration
						 	;
			
ConstantDeclaration ::=	CONST Type:typeNode ConstantList:constants SEMICOLON
						{:
							for(Constant constant : constants) {
								if (!typeNode.equals(constant.getValue().getType())) {
									parser.report_semantic_error("Value " + constant.getValue() + " is not of type " + SymbolTable.getBasicTypeName(typeNode.getKind()), typeNodeleft);
								} else if (SymbolTable.find(constant.getName()) != SymbolTable.noObj) {
											parser.report_semantic_error("Redefinition of name " + constant.getName(), typeNodeleft);		
								} else {
									SymbolTable.insert(Obj.Con, constant.getName(), typeNode);
								}
							}
						:}
						;

ConstantList ::=	ConstantList:constants COMA Constant:constant 
					{: 
						incrementConstantCount(); 

						//Semantic analysis
						constants.add(constant);
						RESULT = constants;
					:}
				 	|
				 	Constant:constant 
				 	{: 
				 		incrementConstantCount();

				 		//Semantic analysis
				 		List<Constant> constants = new ArrayList<Constant>();
				 		constants.add(constant);
				 		RESULT = constants;
				 	:}
				 	;	

Constant ::=	IDENTIFIER:name EQUALS Value:value
				{:
					RESULT = new Constant(name, value);
				:};

Value ::=	NUMERICAL_CONSTANT:value
		  	{:
		  		RESULT = new Value(SymbolTable.intType, value.intValue());
		  	:}
		  	|
		  	CHARACTER_CONSTANT:value
		  	{:
		  		RESULT = new Value(SymbolTable.charType, (int)value.charAt(0));
		  	:}
		  	|
		  	BOOLEAN_CONSTANT:value
		  	{:
		  		RESULT = new Value(SymbolTable.boolType, value.booleanValue() ? 1 : 0);
		  	:}
		  	;

GlobalVariableDeclaration ::=	Type:typeNode GlobalVariableList:globalVariables SEMICOLON
								{:
									//Semantic analysis
									for(Variable variable : globalVariables) {
										if(SymbolTable.find(variable.getName()) != SymbolTable.noObj) {
											parser.report_semantic_error("Redefinition of name " + variable.getName(), typeNodeleft);
										} else {
											if (variable.isArray()) {
												SymbolTable.insert(Obj.Var, variable.getName(), new Struct(Struct.Array, typeNode), globalVariablePosition, SymbolTable.getCurrentLevel());
											} else {
												SymbolTable.insert(Obj.Var, variable.getName(), typeNode, globalVariablePosition, SymbolTable.getCurrentLevel());
											}
											globalVariablePosition++;
										}
									}
								:}
								|
								error SEMICOLON {: printSyntaxErrorDescription("Incorrect global variable list declaration"); :}
								|
								error COMA GlobalVariableList SEMICOLON {: printSyntaxErrorDescription("Incorrect global variable declaration"); :}
								;
								
GlobalVariableList ::=	GlobalVariableList:globalVariables COMA Variable:variable
						{: 
							incrementGlobalVariableCount(); 

							//Semantic analysis
							globalVariables.add(variable);
							RESULT = globalVariables;
						:}
				 		|
				 		Variable:variable
				 		{: 
				 			incrementGlobalVariableCount(); 

				 			//Semantic analysis
				 			RESULT = new ArrayList<Variable>();
				 			RESULT.add(variable);
				 		:}
				 		|
				 		GlobalVariableList COMA error {: printSyntaxErrorDescription("Incorrect global variable declaration"); :}
				 		|
				 		error {: printSyntaxErrorDescription("Incorrect global variable declaration"); :}
				 		;
				 
Variable ::=	IDENTIFIER:name Brackets:isArray
				{:
					RESULT = new Variable(name, isArray);
				:};

Brackets ::=	LEFT_BRACKET RIGHT_BRACKET
			 	{:
					incrementCurrentArrayCount();
					RESULT = true;
				:}
			 	|
			 	/* epsilon */
			 	{:
			 		RESULT = false;
			 	:}
			 	;
			 
ClassDeclaration ::=	CLASS IDENTIFIER ParentClassDeclaration LEFT_BRACE
							ClassVariableDeclarationList
							ClassMethodList
						 RIGHT_BRACE
						 {:
						 	incrementNonStaticMethodCount();
						 	incrementClassDefinitionCount();
						 :};
					 
ParentClassDeclaration ::= EXTENDS Type
						   |
						   /* epsilon */
						   |
						   error {: printSyntaxErrorDescription("Incorrect declaration of parent class"); :}
						   ;
					 
ClassVariableDeclarationList ::=	ClassVariableDeclarationList ClassVariableDeclaration
					  				|
					  				/* epsilon */
					  				;

ClassVariableDeclaration ::=	Type ClassVariableList SEMICOLON 
								|
								error SEMICOLON {: printSyntaxErrorDescription("Incorrect class variable declaration"); :}
								|
								error {: printSyntaxErrorDescription("Incorrect class variable declaration"); :}
				  				;

ClassVariableList ::= 	ClassVariableList COMA Variable {: incrementClassVariableCount(); :}
						|
						Variable {: incrementClassVariableCount(); :}
						;

ClassMethodList ::= LEFT_BRACE
						MethodDeclarationList
					RIGHT_BRACE
					|
					/* epsilon */
					;

MethodDeclarationList ::= MethodDeclarationList MethodDeclaration
						  |
						  /* epsilon */
						  ;
						  
MethodDeclaration ::=	StaticModifier ReturnType IDENTIFIER:identifier LEFT_PARENTHESIS FormalParameterList RIGHT_PARENTHESIS
							MethodVariableDeclarationList
					  	LEFT_BRACE
					  		StatementList
					  	RIGHT_BRACE
					  	{:
							if (isMain(identifier)) {
								incrementMainVariableCount();
								incrementMainMethodCallCount();
							} else {
								invalidateCurrentMethodVariableCount();
								invalidateCurrentArrayCount();
								invalidateCurrentMethodCallCount();
							}
							incrementCodeBlockCount();
						:};
					  
StaticModifier ::= 	STATIC
					{:
						incrementStaticMethodCount();
					:} 
				   	|
				   	/* epsilon */
				   	{:
				   		incrementCurrentNonStaticMethodCount();
				   	:}
				   	;
				   	
ReturnType ::= Type
			   |
			   VOID
			   ;

FormalParameterList ::= FormalParameterList COMA FormalParameter
						|
						FormalParameter
						|
						/* epsilon */
						|
						FormalParameterList COMA error {: printSyntaxErrorDescription("Incorrect formal parameter declaration"); :}
						|
						error {: printSyntaxErrorDescription("Incorrect formal parameter declaration"); :}
						;	
						
FormalParameter ::= Type IDENTIFIER Brackets
					{:
						incrementFormalArgumentsCount();
					:}
					;

MethodVariableDeclarationList ::= MethodVariableDeclarationList MethodVariableDeclaration
								  |
								  error {: printSyntaxErrorDescription("Incorrect local variable declaration"); :}
								  |
								  /* epsilon */
								  ;

MethodVariableDeclaration ::=	Type MethodVariableList SEMICOLON
								|
								Type error SEMICOLON {: printSyntaxErrorDescription("Incorrect local variable declaration"); :}
								;

MethodVariableList ::=	MethodVariableList COMA Variable {: incrementCurrentMethodVariableCount(); :}
						|
						Variable {: incrementCurrentMethodVariableCount(); :}
						;

Type ::=	IDENTIFIER:name
			{:
				Obj typeNode = SymbolTable.find(name);
				if (SymbolTable.noObj.equals(typeNode)) {
					parser.report_semantic_error("no type named: " + name, nameleft);
					RESULT = SymbolTable.noType;
				} else if (Obj.Type != typeNode.getKind()) {
					parser.report_semantic_error("Name: " + name + " is not a type", nameleft);
					RESULT = SymbolTable.noType;
				} else {
					RESULT = typeNode.getType();
				}
			:}
			;

StatementList ::= StatementList Statement
				  |
				  /* epsilon */
				  ;

Statement ::= MatchedStatement
			  |
			  UnmatchedStatement
			  ;

IfHeader ::=	IF LEFT_PARENTHESIS Condition RIGHT_PARENTHESIS
				|
				IF LEFT_PARENTHESIS error RIGHT_PARENTHESIS {: printSyntaxErrorDescription("Incorrect condition declaration"); :}
				|
				IF LEFT_PARENTHESIS RIGHT_PARENTHESIS {: printSyntaxErrorDescription("Incorrect condition declaration"); :}
				;
			  
ForHeader ::=	FOR LEFT_PARENTHESIS ForInitialStatement SEMICOLON ForCondition SEMICOLON ForPostStatement RIGHT_PARENTHESIS
				|
				FOR LEFT_PARENTHESIS error RIGHT_PARENTHESIS {: printSyntaxErrorDescription("Incorrect for loop inner statements"); :}
				;

UnmatchedStatement ::= IfHeader 
							Statement
					   |
					   IfHeader
					   		MatchedStatement
					   ELSE
					   		UnmatchedStatement
					   | /* umatched for */
					   ForHeader
					 		UnmatchedStatement
					   ;
					 
MatchedStatement ::= 	IfHeader 
							MatchedStatement
						ELSE
							MatchedStatement
						| /* matched for */
						ForHeader
							MatchedStatement
						|
						DesignatorStatement SEMICOLON
						|
						BREAK SEMICOLON
						|
						CONTINUE SEMICOLON
					 	|
					 	RETURN ReturnValue SEMICOLON
					 	|
					 	READ LEFT_PARENTHESIS Designator RIGHT_PARENTHESIS SEMICOLON
					 	|
					 	PRINT LEFT_PARENTHESIS PrintParameters RIGHT_PARENTHESIS SEMICOLON
					 	|
					 	LEFT_BRACE
					 		StatementList
					 	RIGHT_BRACE
					 	{:
					 		incrementCodeBlockCount();
					 	:}			
					 	;

ReturnValue ::= Expression
				|
				/* epsilon */
				;
				
PrintParameters ::= Expression
					|
					Expression COMA NUMERICAL_CONSTANT
					;

ForInitialStatement ::= DesignatorStatement
						|
						error {: printSyntaxErrorDescription("Incorrect initial for loop statement"); :}
						|
						/* epsilon */
						;
						 
ForCondition ::=	Condition
				 	|
				 	error {: printSyntaxErrorDescription("Incorrect for condition statement"); :}
				 	|
				 	/* epsilon */
		  		 	;
		  		 
ForPostStatement ::= DesignatorStatement
					 |
					 error {: printSyntaxErrorDescription("Incorrect post for loop statement"); :}
					 |
					 /* epsilon */
					 ;

DesignatorStatement ::=	Designator RestOfTheDesignatorStatement;

RestOfTheDesignatorStatement ::= 	AssignOperation
									|
									MethodCall
								 	|
								 	INCREMENT
								 	|
								 	DECREMENT
								 	;

MethodCall ::=	LEFT_PARENTHESIS ActualParameters RIGHT_PARENTHESIS
			 	{:
			 		incrementCurrentMethodCallCount();
			 	:}
			 	;

AssignOperation ::= 	AssignOperator Expression
						|
						error {: printSyntaxErrorDescription("Incorrect asign operation syntax"); :}
						;
								 
ActualParameters ::= ExpressionList
					 |
					 /* epsilon */
					 |
					 error {: printSyntaxErrorDescription("Incorrect actual parameter list syntax"); :}
					 ;

ExpressionList ::=	ExpressionList COMA Expression
					|
					Expression
					;
				 				
Condition ::= Condition OR ConditionTerm
			  |
			  ConditionTerm
			  ;	
				 				
ConditionTerm ::=	ConditionTerm AND ConditionFact
				 	|
				 	ConditionFact
				 	;

ConditionFact ::= Expression RestOfTheConditionFact;

RestOfTheConditionFact ::= RelationalOperator Expression
						   |
						   /* epsilon */
						   ;
						   
Expression ::= ExpressionPrefix TermList;

ExpressionPrefix ::= MINUS
					 |
					 /* epsilon */
					 ;

TermList ::= TermList AdditionOperator Term
			 |
			 Term
			 ;

Term ::=	FactorList;

FactorList ::=	FactorList MultiplicationOperator Factor
				|
				Factor
				;

Factor ::= Designator OptionalParameters
		   |
		   NUMERICAL_CONSTANT
		   |
		   CHARACTER_CONSTANT
		   |
		   BOOLEAN_CONSTANT
		   |
		   NEW Type ArraySize
		   |
		   LEFT_PARENTHESIS Expression RIGHT_PARENTHESIS
		   ;
		   
OptionalParameters ::= 	MethodCall
					   	|
					   	/* epsilon */
					   	;		   
		   						  
ArraySize ::= ArrayIndexer
			  |
			  /* epsilon */
			  ;
	   
ArrayIndexer ::=	LEFT_BRACKET Expression RIGHT_BRACKET
					|
					LEFT_BRACKET error RIGHT_BRACKET {: printSyntaxErrorDescription("Incorrect expression for array index"); :}
					;
					
					
Designator ::= IDENTIFIER AccessList;

AccessList ::= AccessList AccessListElement
			   |
			   /* epsilon */
			   ;
			   
AccessListElement ::= DOT IDENTIFIER
					  |
					  ArrayIndexer
					  ;

AssignOperator ::= 	EQUALS
					|
					AdditionOperatorRight
					|
					MultiplicationOperatorRight
					;

RelationalOperator ::= EQUAL
					   |
					   NOT_EQUAL
					   |
					   GREATER_THAN
					   |
					   GREATER_OR_EQUAL_THAN
					   |
					   LESS_THAN
					   |
					   LESS_OR_EQUAL_THAN
					   ;
					   
AdditionOperator ::= AdditionOperatorLeft
					 |
					 AdditionOperatorRight
					 ;					   
					 
AdditionOperatorLeft ::= PLUS
						 |
						 MINUS
						 ;					  
					   
AdditionOperatorRight ::= PLUS_EQUALS
						  |
						  MINUS_EQUALS
						  ;
						   
MultiplicationOperator ::= MultiplicationOperatorLeft
						   |
						   MultiplicationOperatorRight
						   ;
						
MultiplicationOperatorLeft ::= TIMES
							   |
							   SOLIDUS
							   |													   
							   PERCENT
							   ;
								
MultiplicationOperatorRight ::= TIMES_EQUALS
							    |
							    SOLIDUS_EQUALS
							    |
							    PERCENT_EQUALS
							    ;
						   
				 				
				 				
				 				
				 				
				 				
				 				