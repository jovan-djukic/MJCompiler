package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.logging.log4j.Logger;
import rs.ac.bg.etf.pp1.utilities.MyLoggerFactory;
import java.util.*;
import rs.etf.pp1.symboltable.concepts.*;
import rs.etf.pp1.symboltable.structure.*;
import rs.ac.bg.etf.utilities.*;


parser code {:
	
	private Logger logger = MyLoggerFactory.getLogger(getClass());

	public Logger getLogger() {
		return logger;	
	}    

	
   	//redefined error functions  
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      report_error(message, info);
      done_parsing();
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("Syntax erorr: ", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatal error, cannot continue parsing, symbol: ", cur_token);
    }

    public void report_error(String message, Object info) {
        if (info != null && info instanceof Symbol) {
			Symbol currentSymbol = (Symbol) info;
			message += "at line: " + (currentSymbol.left + 1) + ", at column: " + (currentSymbol.right + 1);
			logger.info(message + ", current symbol: " + info.toString());
		} else {
			logger.info(message);
		}
		errorFound = true;
    }

    private boolean errorFound = false;

    public void report_semantic_error(String message, int lineNumber) {
    	report_error("Semantic error on line: " + lineNumber + ", " + message, null);
    	errorFound = true;
    }

    public void report_internal_error(String message, int lineNumber) {
    	report_error("Internal error on line: " + lineNumber + ", " + message, null);
    	errorFound = true;	
    }
:}


scan with {:
	Symbol symbol = this.getScanner().next_token();
	if (symbol != null && symbol.value != null) 
		logger.debug(symbol.toString() + " " + symbol.value.toString());
	return symbol;
:}

init with {:
	SymbolTable.init(); // Universe scope
:}

action code {:
	//functions defined for counts
	private int globalVariableCount = 0;

	public int getGlobalVariableCount() {
		return globalVariableCount;
	}

	private int currentMethodVariableCount = 0;

	public void incrementCurrentMethodVariableCount() {
		currentMethodVariableCount++;
	}

	public void invalidateCurrentMethodVariableCount() {
		currentMethodVariableCount = 0;
	}
	
	public void incrementGlobalVariableCount() {
		globalVariableCount++;
	}

	private int mainVariableCount = 0;

	public int getMainVariableCount() {
		return mainVariableCount;
	}

	public void incrementMainVariableCount() {
		mainVariableCount += currentMethodVariableCount;
		currentMethodVariableCount = 0;
	}

	private static String MAIN = "main";
	
	public boolean isMain(String identifier) {
		return MAIN.equals(identifier);
	}

	private int constantCount = 0;

	public int getConstantCount() {
		return constantCount;
	}

	public void incrementConstantCount() {
		constantCount++;
	}

	private int globalArrayCount = 0;
	private int currentArrayCount = 0;

	public int getGlobalArrayCount() {
		return globalArrayCount;
	}

	public void incrementGlobalArrayCount() {
		globalArrayCount += currentArrayCount;
		currentArrayCount = 0;	
	}

	public void incrementCurrentArrayCount() {
		currentArrayCount++;
	}

	public void invalidateCurrentArrayCount() {
		currentArrayCount = 0;	
	}

	private int staticMethodCount = 0;
	private int nonStaticMethodCount = 0;
	private int currentNonStaticMethodCount = 0;

	public int getStaticMethodCount() { 
		return staticMethodCount;
	}

	public int getNonStaticMethodCount() { 
		return nonStaticMethodCount;
	}

	public int getGlobalMethodCount() {
		return currentNonStaticMethodCount;
	}

	public void incrementCurrentNonStaticMethodCount() {
		currentNonStaticMethodCount++;
	}

	public void incrementStaticMethodCount() {
		staticMethodCount++;
	}

	public void incrementNonStaticMethodCount() {
		nonStaticMethodCount += currentNonStaticMethodCount;
		currentNonStaticMethodCount = 0;
	}

	private int codeBlockCount = 0;
	private int currentMethodCallCount = 0;

	public int getCodeBlockCount() {
		return codeBlockCount;
	}

	public void incrementCodeBlockCount() {
		codeBlockCount++;
	}

	private int mainMethodCallCount = 0;

	public int getMainMethodCalls() {
		return mainMethodCallCount;
	}

	public void incrementCurrentMethodCallCount() {
		currentMethodCallCount++;
	}

	public void invalidateCurrentMethodCallCount() {
		currentMethodCallCount = 0;
	}

	public void incrementMainMethodCallCount() {
		mainMethodCallCount += currentMethodCallCount;
		currentMethodCallCount = 0;
	}

	private int formalArgumentsCount = 0;

	public int getFormalArgumentsCount() {
		return formalArgumentsCount;
	}

	public void incrementFormalArgumentsCount() {
		formalArgumentsCount++;
	}

	private int classDefinitionCount = 0;

	public int getClassDefinitionCount() {
		return classDefinitionCount;
	}

	public void incrementClassDefinitionCount() {
		classDefinitionCount++;
	}

	private int classVariableCount = 0;

	public int getClassVariableCount() {
		return classVariableCount;
	}

	public void incrementClassVariableCount() {
		classVariableCount ++;
	}

	void printSyntaxErrorDescription(String message) {
		parser.getLogger().info("Description: " + message);
	}

	//Semantic analysis

	private static final String THIS = "this";
	private static final String BRACKETS = "[]";
	private static final String EQUAL = "==";
	private static final String NOT_EQUAL = "!=";
	private static final String EQUALS = "=";
	private static final String GREATER_THAN = ">";
	private static final String GREATER_OR_EQUAL_THAN = ">=";
	private static final String LESS_THAN = "<";
	private static final String LESS_OR_EQUAL_THAN = "<=";
	private static final String PLUS = "+";
	private static final String MINUS = "-";
	private static final String PLUS_EQUALS = "+=";
	private static final String MINUS_EQUALS = "-=";
	private static final String TIMES = "*";
	private static final String SOLIDUS = "/";
	private static final String PERCENT = "%";
	private static final String TIMES_EQUALS = "*=";
	private static final String SOLIDUS_EQUALS = "/=";
	private static final String PERCENT_EQUALS = "%=";

	private int variablePosition = 0;
	
	private int formalParameterCount = 0;
	private Obj currentMethod = null;

	private Obj currentClass = null;
	private int classVariablePosition = 0;

	private Stack<List<Obj>> actualParametersStack = new Stack<>();
	private Stack<List<Integer>>  forLoopBreakStack = new Stack<>(), forLoopContinueStack = new Stack<>();

	private boolean returnFound = false;
:}


terminal PROGRAM, LEFT_BRACE, RIGHT_BRACE, CONST, SEMICOLON, EQUALS, COMA, LEFT_BRACKET, RIGHT_BRACKET;
terminal CLASS, LEFT_PARENTHESIS, STATIC, VOID, IF, ELSE, BREAK, CONTINUE, RETURN, FOR, INCREMENT;
terminal DECREMENT, OR, AND, NEW, DOT, EQUAL, NOT_EQUAL, GREATER_THAN, GREATER_OR_EQUAL_THAN, LESS_THAN;
terminal LESS_OR_EQUAL_THAN, PLUS, MINUS, PLUS_EQUALS, MINUS_EQUALS, TIMES, SOLIDUS, PERCENT, TIMES_EQUALS;
terminal SOLIDUS_EQUALS, PERCENT_EQUALS, READ, PRINT, EXTENDS;

terminal String IDENTIFIER, CHARACTER_CONSTANT, RIGHT_PARENTHESIS;

terminal Integer NUMERICAL_CONSTANT;

terminal Boolean BOOLEAN_CONSTANT;

nonterminal Program, NonMethodDeclarationList, MethodDeclarationList;

nonterminal NonMethodDeclaration, ConstantDeclaration, GlobalVariableDeclaration, ClassDeclaration;

nonterminal ClassVariableDeclarationList, ClassVariableDeclaration, ClassMethodList;

nonterminal MethodDeclaration, FormalParameterList, MethodVariableDeclarationList, MethodVariableDeclaration,
			FormalParameter;

nonterminal StatementList, Statement, MatchedStatement, UnmatchedStatement, PrintParameters;

nonterminal IfHeader, ForHeader;

nonterminal ForInitialStatement, ForCondition, ForPostStatement;

nonterminal DesignatorStatement, ActualParameters;

nonterminal ArrayIndexer;

//Semantic analysis non terminals
//Basic non terminals
nonterminal Obj ProgramName, Type;

//constants
nonterminal Value Value;
nonterminal Constant Constant;
nonterminal List<Constant> ConstantList;

//varaibles
nonterminal Variable Variable;
nonterminal Boolean Brackets;

//global varaibles
nonterminal List<Variable> GlobalVariableList, ClassVariableList;

//method variables
nonterminal MethodTypeAndName;
nonterminal Obj ReturnType;
nonterminal List<Variable> MethodVariableList;

//class declaration
nonterminal ClassHeader;
nonterminal Boolean StaticModifier;
nonterminal Obj ParentClassDeclaration;

//Use of declaratiosn
nonterminal Obj Designator;

//For left associated and right associated operators, this super rule to sub rule passing
nonterminal Obj LeftAssociatedTermList, RightAssociatedTermList, LeftAssociatedFactorList, RightAssociatedFactorList; 

//Addition operators for better error reporting
nonterminal String AdditionOperatorLeft, AdditionOperatorRight;
nonterminal String MultiplicationOperatorLeft, MultiplicationOperatorRight;
nonterminal String RelationalOperator;
nonterminal String AssignOperator;

//Factor
nonterminal Obj Factor, Expression;
nonterminal Boolean ArraySize, ExpressionPrefix;

//Actual parameters
nonterminal List<Obj> MethodCall, OptionalParameters;

//Assign operation
nonterminal Obj AssignOperation;

//Return statement
nonterminal Obj ReturnValue;

//condition
nonterminal Obj Condition, ConditionTerm, ConditionFact;

Program ::= PROGRAM ProgramName:programObject 
			NonMethodDeclarationList 
			LEFT_BRACE 	
				MethodDeclarationList 
			RIGHT_BRACE 
			{:
				if (SymbolTable.currentScope.findSymbol(MAIN) == null) {
					parser.report_semantic_error("No main symbol found", programObjectleft);
				} 
				SymbolTable.chainLocalSymbols(programObject);
				SymbolTable.closeScope();
			:};

ProgramName ::= IDENTIFIER:name 
				{:
					RESULT  = SymbolTable.insert(Obj.Prog, name, SymbolTable.noType);
					SymbolTable.openScope();
				:}
				;

NonMethodDeclarationList ::= NonMethodDeclarationList NonMethodDeclaration
							 |
							 /* epsilon */
							 ;

NonMethodDeclaration ::= 	ConstantDeclaration
						 	|
						 	GlobalVariableDeclaration {: incrementGlobalArrayCount(); :}
						 	|
						 	ClassDeclaration
						 	;
			
ConstantDeclaration ::=	CONST Type:typeObject ConstantList:constants SEMICOLON
						{:
							//Semantic analysis
							if (typeObject == null) {
								parser.report_internal_error("NULL type object in production ConstantDeclaration ::= CONST Type ConstantList SEMICOLON", typeObjectleft);
							} else if (constants == null) {
								parser.report_internal_error("NULL constant list in production ConstantDeclaration ::= CONST Type ConstantList SEMICOLON", typeObjectleft);
							} else if (!typeObject.equals(SymbolTable.noObj)) {
								for(Constant constant : constants) {
									if (!typeObject.getType().assignableTo(constant.getValue().getType())) {
										parser.report_semantic_error("Value " + constant.getValue() + " is not of type " + typeObject.getName(), typeObjectleft);
									} else if (SymbolTable.find(constant.getName()) != SymbolTable.noObj) {
										parser.report_semantic_error("Redefinition of name " + constant.getName(), typeObjectleft);		
									} else {
										Obj newObject = SymbolTable.insert(Obj.Con, constant.getName(), typeObject.getType());
										if (newObject != null && newObject != SymbolTable.noObj) {
											newObject.setAdr(constant.getValue().getValue());
										} else {
											parser.report_internal_error("Could not insert symbol: " + constant.getName() + " into symbol table", typeObjectleft);
										}
									}
								}
							}
						:}
						;

ConstantList ::=	ConstantList:constants COMA Constant:constant 
					{: 
						incrementConstantCount(); 

						//Semantic analysis
						if (constants == null) {
							parser.report_internal_error("NULL constant list in production ConstantList ::= ConstantList COMA constant", constantleft);
							RESULT = null;
						} else if (constant == null) {
							parser.report_internal_error("NULL constant in production ConstantList ::= ConstantList COMA constant", constantleft);
							RESULT = constants;
						} else {
							constants.add(constant);
							RESULT = constants;
						}
					:}
				 	|
				 	Constant:constant 
				 	{: 
				 		incrementConstantCount();

				 		//Semantic analysis
				 		List<Constant> constants = new ArrayList<Constant>();
				 		if (constant == null) {
 							parser.report_internal_error("NULL constant int prod ConstantList ::= Constant", constantleft);
				 		} else {
				 			constants.add(constant);
				 		}
				 		RESULT = constants;
				 	:}
				 	;	

Constant ::=	IDENTIFIER:name EQUALS Value:value
				{:
					RESULT = new Constant(name, value);
				:};

Value ::=	NUMERICAL_CONSTANT:value
		  	{:
		  		RESULT = new Value(SymbolTable.intType, value.intValue());
		  	:}
		  	|
		  	CHARACTER_CONSTANT:value
		  	{:
		  		RESULT = new Value(SymbolTable.charType, (int)value.charAt(0));
		  	:}
		  	|
		  	BOOLEAN_CONSTANT:value
		  	{:
		  		RESULT = new Value(SymbolTable.boolType, value.booleanValue() ? 1 : 0);
		  	:}
		  	;

GlobalVariableDeclaration ::=	Type:typeObject GlobalVariableList:globalVariables SEMICOLON
								{:
									//Semantic analysis
									if (typeObject == null) {
										parser.report_internal_error("NULL type object in production GlobalVariableDeclaration ::= Type GlobalVariableList SEMICOLON", typeObjectleft);
									} else if (globalVariables == null) {
										parser.report_internal_error("NULL global variable list in production GlobalVariableDeclaration ::= Type GlobalVariableList SEMICOLON", typeObjectleft);										
									} else if (!typeObject.equals(SymbolTable.noObj)) {
										for(Variable variable : globalVariables) {
											if(SymbolTable.find(variable.getName()) != SymbolTable.noObj) {
												parser.report_semantic_error("Redefinition of name " + variable.getName(), typeObjectleft);
											} else {
												Obj newObject = null;
												if (variable.isArray()) {
													newObject = SymbolTable.insert(Obj.Var, variable.getName(), new MyStruct(MyStruct.Array, typeObject.getType()));
												} else {
													newObject = SymbolTable.insert(Obj.Var, variable.getName(), typeObject.getType());
												}
												if (newObject != null && newObject != SymbolTable.noObj) {
													newObject.setAdr(variablePosition);
													newObject.setLevel(SymbolTable.getCurrentLevel());
													variablePosition++;
												} else {
													parser.report_internal_error("Could not insert symbol: " + variable.getName() + " into symbol table", typeObjectleft);
												}
											}
										}
									}
								:}
								|
								error SEMICOLON {: printSyntaxErrorDescription("Incorrect global variable list declaration"); :}
								|
								error COMA GlobalVariableList SEMICOLON {: printSyntaxErrorDescription("Incorrect global variable declaration"); :}
								;
								
GlobalVariableList ::=	GlobalVariableList:globalVariables COMA Variable:variable
						{: 
							incrementGlobalVariableCount(); 

							//Semantic analysis
							if (globalVariables == null) {
								parser.report_internal_error("NULL global varaible list in production GlobalVariableList ::= GlobalVariableList COMA variable", variableleft);
								RESULT = null;
							} else if (variable == null) {
								parser.report_internal_error("NULL global variable in production GlobalVariableList ::= GlobalVariableList COMA variable", variableleft);
								RESULT = globalVariables;
							} else {
								globalVariables.add(variable);
								RESULT = globalVariables;
							}
						:}
				 		|
				 		Variable:variable
				 		{: 
				 			incrementGlobalVariableCount(); 

				 			//Semantic analysis
				 			RESULT = new ArrayList<Variable>();
							if (variable == null) {
								parser.report_internal_error("NULL varaible in production GlobalVariableList ::= Variable", variableleft);
 							} else {
 								RESULT.add(variable);
 							}
				 		:}
				 		|
				 		GlobalVariableList:globalVariables COMA error 
				 		{: 
				 			printSyntaxErrorDescription("Incorrect global variable declaration"); 

				 			if (globalVariables == null) {
				 				parser.report_internal_error("NULL global variable list in production GlobalVariableList ::= GlobalVariableList COMA error", globalVariablesleft);
				 				RESULT = null;
				 			} else {
				 				RESULT = globalVariables;
				 			}
				 		:}
				 		|
				 		error 
				 		{: 
				 			printSyntaxErrorDescription("Incorrect global variable declaration"); 

				 			RESULT = new ArrayList<Variable>();
				 		:}
				 		;
				 
Variable ::=	IDENTIFIER:name Brackets:isArray
				{:
					RESULT = new Variable(name, isArray);
				:};

Brackets ::=	LEFT_BRACKET RIGHT_BRACKET
			 	{:
					incrementCurrentArrayCount();
					RESULT = true;
				:}
			 	|
			 	/* epsilon */
			 	{:
			 		RESULT = false;
			 	:}
			 	;
			 
ClassDeclaration ::=	ClassHeader
						LEFT_BRACE
							ClassVariableDeclarationList
							ClassMethodList
						 RIGHT_BRACE
						 {:
						 	incrementNonStaticMethodCount();
						 	incrementClassDefinitionCount();

						 	//Semantic analysis
						 	if (currentClass != null) {
						 		SymbolTable.chainLocalSymbols(currentClass.getType());
						 		SymbolTable.closeScope();
						 	}

						 	classVariablePosition = 0;
						 	currentClass = null;
						 :};
				
ClassHeader ::= CLASS IDENTIFIER:name ParentClassDeclaration:typeObject
				{:
					if (typeObject == null) {
						parser.report_internal_error("NULL type object in production ClassHeader ::= CLASS IDENTIFIER ParentClassDeclaration", typeObjectleft);
					} else if (SymbolTable.find(name) != SymbolTable.noObj) {
						parser.report_semantic_error("Redefinition of name " + name, nameleft);
					} else {
						if (!typeObject.equals(SymbolTable.noObj)) {
							currentClass = SymbolTable.insert(Obj.Type, name, new MyStruct(MyStruct.Class, typeObject.getType()));
						} else {
							currentClass = SymbolTable.insert(Obj.Type, name, new MyStruct(MyStruct.Class));
						}

						if (currentClass == null || currentClass.equals(SymbolTable.noObj)) {
							parser.report_internal_error("Could not insert name " + name + " into symbol table", nameleft);
						} else {
							SymbolTable.openScope();
							classVariablePosition = 0;
						}
					}
				:};

ParentClassDeclaration ::=	EXTENDS Type:typeObject
						   	{:
						   		//Semantic analysis
						   		if (typeObject == null) {
						   			parser.report_internal_error("NULL type object in production ParentClassDeclaration ::= EXTENDS Type", typeObjectleft);
						   			RESULT = SymbolTable.noObj;
						   		} if (!typeObject.equals(SymbolTable.noObj)) {
						   			if (typeObject.getType().getKind() != Struct.Class) {
						   				parser.report_semantic_error("Name " + typeObject.getName() + " is not a class type", typeObjectleft);
						   				RESULT = SymbolTable.noObj;
						   			} else {
						   				RESULT = typeObject;
						   			}
						   		}
						   	:}
						   	|
						   	/* epsilon */
						   	{:
						   		RESULT = SymbolTable.noObj;
						   	:}
						   	|
						   	error 
						   	{: 
						   		printSyntaxErrorDescription("Incorrect declaration of parent class"); 

						   		RESULT = SymbolTable.noObj;
						   	:}
						   	;
					 
ClassVariableDeclarationList ::=	ClassVariableDeclarationList ClassVariableDeclaration
					  				|
					  				/* epsilon */
					  				;

ClassVariableDeclaration ::=	Type:typeObject ClassVariableList:variables SEMICOLON 
								{:
									//Semantic analysis
									if (typeObject == null) {
										parser.report_internal_error("NULL type object in production ClassVariableDeclaration ::= Type ClassVariableList SEMICOLON", typeObjectleft);
									} else if (variables == null) {
										parser.report_internal_error("NULL varaible list in production ClassVariableDeclaration ::= Type ClassVariableList SEMICOLON", typeObjectleft);
									} else if (!typeObject.equals(SymbolTable.noObj)) { 
										for(Variable variable : variables) {
											if(SymbolTable.currentScope.findSymbol(variable.getName()) != null) {
												parser.report_semantic_error("Redefinition of name " + variable.getName(), typeObjectleft);
											} else {
												Obj newObject = null;
												if (variable.isArray()) {
													newObject = SymbolTable.insert(Obj.Fld, variable.getName(), new MyStruct(MyStruct.Array, typeObject.getType()));
												} else {
													newObject = SymbolTable.insert(Obj.Fld, variable.getName(), typeObject.getType());
												}
												if (newObject != null && newObject != SymbolTable.noObj) {
													newObject.setAdr(classVariablePosition);
													newObject.setLevel(SymbolTable.getCurrentLevel());
													classVariablePosition++;
												} else {
													parser.report_internal_error("Could not insert symbol: " + variable.getName() + " into symbol table", typeObjectleft);
												}
											}
										}
									}
								:}
								|
								error SEMICOLON {: printSyntaxErrorDescription("Incorrect class variable declaration"); :}
								|
								error {: printSyntaxErrorDescription("Incorrect class variable declaration"); :}
				  				;

ClassVariableList ::= 	ClassVariableList:variables COMA Variable:variable 
						{: 
							incrementClassVariableCount(); 

							//Semantic analysis
							if (variables == null) {
								parser.report_internal_error("NULL variable list in production ClassVariableList ::= ClassVariableList COMA Variable", variableleft);
								RESULT = null;
							} else if (variable == null) {
								parser.report_internal_error("NULL variable in production ClassVariableList ::= ClassVariableList COMA Variable", variableleft);
								RESULT = variables;
							} else {
								variables.add(variable);
								RESULT = variables;
							}
						:}
						|
						Variable:variable 
						{: 
							incrementClassVariableCount(); 

							//Semantic analysis
							RESULT = new ArrayList<Variable>();
							if (variable == null) {
								parser.report_internal_error("NULL variable in production ClassVariableList ::= Variable", variableleft);
							} else {
								RESULT.add(variable);
							}
						:}
						;

ClassMethodList ::= LEFT_BRACE
						MethodDeclarationList
					RIGHT_BRACE
					|
					/* epsilon */
					;

MethodDeclarationList ::= MethodDeclarationList MethodDeclaration
						  |
						  /* epsilon */
						  ;
						  
MethodDeclaration ::=	MethodTypeAndName LEFT_PARENTHESIS FormalParameterList RIGHT_PARENTHESIS:token
							MethodVariableDeclarationList
					  	LEFT_BRACE
					  		StatementList
					  	RIGHT_BRACE
					  	{:
							if (currentMethod != null && isMain(currentMethod.getName())) {
								incrementMainVariableCount();
								incrementMainMethodCallCount();
							} else {
								invalidateCurrentMethodVariableCount();
								invalidateCurrentArrayCount();
								invalidateCurrentMethodCallCount();
							}
							incrementCodeBlockCount();

							//Semantic analysis
							if (currentMethod != null) {
								SymbolTable.chainLocalSymbols(currentMethod);

								currentMethod.setLevel(formalParameterCount);
								
								if (!currentMethod.getType().equals(SymbolTable.voidType) && !returnFound) {
									parser.report_semantic_error("No return statement found for method or function " + currentMethod.getName(), tokenleft);
								}
							}

							SymbolTable.closeScope();
							currentMethod = null;
							variablePosition = 0;
							formalParameterCount = 0;
							returnFound = false;
						:}
						;
					  
MethodTypeAndName ::=	StaticModifier:isStatic ReturnType:typeObject IDENTIFIER:identifier
						{:
							//Semantic analysis
							if (typeObject == null) {
								parser.report_internal_error("NULL type object in production MethodTypeAndName ::= StaticModifier ReturnType IDENTIFIER", typeObjectleft);
							} else if (!typeObject.equals(SymbolTable.noObj)) {
								currentMethod = null;
								if (SymbolTable.find(identifier) != SymbolTable.noObj) {
									parser.report_semantic_error("Redefinition of symbol " + identifier, identifierleft);
								} else {
									if (currentClass == null && isStatic.booleanValue() == false) {
										currentMethod = SymbolTable.insert(MyObj.Global, identifier, typeObject.getType());
									} else {
										if (isStatic != null && isStatic.booleanValue()) {
											Obj object = SymbolTable.getMember(currentClass.getType().getElemType(), identifier); 
											if (object != null && object.getKind() == MyObj.Static) {
												parser.report_semantic_error("Cannot redefine static method " + identifier + " from parent class " + SymbolTable.getTypeName(currentClass.getType().getElemType()), typeObjectleft);
											} else {
												currentMethod = SymbolTable.insert(MyObj.Static, identifier, typeObject.getType());
											}
										} else {
											currentMethod = SymbolTable.insert(Obj.Meth, identifier, typeObject.getType());
										}
									}
								}
									
								if (currentMethod == SymbolTable.noObj) {
									currentMethod = null;
									parser.report_semantic_error("Could not insert symbol " + identifier + "into symbol talbe", identifierleft);
								} else {
									variablePosition = 0;
									formalParameterCount = 0;
									returnFound = false;

									SymbolTable.openScope();

									//If non-static method add this formal parameter
									if (currentClass != null && !isStatic.booleanValue()) {
										Obj newObject = SymbolTable.insert(MyObj.Var, THIS, currentClass.getType());

										if (newObject == SymbolTable.noObj) {
											parser.report_internal_error("Could not insert symbol " + THIS + " into symbol table", identifierleft);
										} else {
											newObject.setLevel(SymbolTable.getCurrentLevel());
											newObject.setFpPos(variablePosition);
											newObject.setAdr(variablePosition);
											variablePosition++;
											formalParameterCount++;
										}
									}
								}
							}
						:}
						;

StaticModifier ::= 	STATIC:attribute
					{:
						incrementStaticMethodCount();

						//Semantic analysis
						if (currentClass == null) {
							parser.report_semantic_error("Static method outside class", attributeleft);
							RESULT = false;
						} else {
							RESULT = true;
						}
						
					:} 
				   	|
				   	/* epsilon */
				   	{:
				   		incrementCurrentNonStaticMethodCount();
				   		
				   		//Semantic analysis
						RESULT = false;
				   	:}
				   	;
				   	
ReturnType ::=	Type:typeObject
			   	{:
			   		RESULT = typeObject;
			   	:}
			   	|
			   	VOID
			   	{:
			   		RESULT = SymbolTable.find("void");
			   	:}
			   	;

FormalParameterList ::= FormalParameterList COMA FormalParameter
						|
						FormalParameter
						|
						/* epsilon */
						|
						FormalParameterList COMA error {: printSyntaxErrorDescription("Incorrect formal parameter declaration"); :}
						|
						error {: printSyntaxErrorDescription("Incorrect formal parameter declaration"); :}
						;	
						
FormalParameter ::= Type:typeObject IDENTIFIER:name Brackets:isArray
					{:
						incrementFormalArgumentsCount();
						
						//Semantic analysis
						if (typeObject == null) {
							parser.report_internal_error("NULL type object in production FormalParameter ::= Type IDENTIFIER BRACKETS", typeObjectleft);
						} if (!typeObject.equals(SymbolTable.noObj)) {
							if (SymbolTable.currentScope.findSymbol(name) != null) {
								parser.report_semantic_error("Redefinition of " + name, nameleft);
							} else {
								Obj newObject = null;
								if (isArray) {
									newObject = SymbolTable.insert(Obj.Var, name, new MyStruct(Struct.Array, typeObject.getType()));
								} else {
									newObject = SymbolTable.insert(Obj.Var, name, typeObject.getType());
								}

								if (newObject == SymbolTable.noObj) {
									parser.report_internal_error("Could not insert symbol " + name + " into symbol table", nameleft);
								} else {
									newObject.setLevel(SymbolTable.getCurrentLevel());
									newObject.setFpPos(variablePosition);
									newObject.setAdr(variablePosition);
									variablePosition++;
									formalParameterCount++;
								}
							}
						}
					:}
					;

MethodVariableDeclarationList ::= MethodVariableDeclarationList MethodVariableDeclaration
								  |
								  /* epsilon */
								  ;

MethodVariableDeclaration ::=	Type:typeObject MethodVariableList:locals SEMICOLON
								{:
									//Semantic analysis 
									if (typeObject == null) {
										parser.report_internal_error("NULL type object in production MethodVariableDeclaration ::= Type MethodVariableList SEMICOLON", typeObjectleft);
									} else if (locals == null) {
										parser.report_internal_error("NULL locals in production MethodVariableDeclaration ::= Type MethodVariableList SEMICOLON", localsleft);
									} else if (typeObject.getType() != SymbolTable.noType) {
										for(Variable localVariable : locals) {
											if (SymbolTable.currentScope.findSymbol(localVariable.getName()) != null) {
												parser.report_semantic_error("Redefinition of name " + localVariable.getName(), typeObjectleft);
											} else {
												Obj newObject = null;
												if (localVariable.isArray()) {
													newObject = SymbolTable.insert(Obj.Var, localVariable.getName(), new MyStruct(Struct.Array, typeObject.getType()));
												} else {
													newObject = SymbolTable.insert(Obj.Var, localVariable.getName(), typeObject.getType());
												}

												if (newObject == SymbolTable.noObj) {
													parser.report_internal_error("Could not insert symbol " + localVariable.getName() + " into symbol table", typeObjectleft);
												} else {
													newObject.setLevel(SymbolTable.getCurrentLevel());
													newObject.setFpPos(variablePosition);
													newObject.setAdr(variablePosition);
													variablePosition++;
												}
											}
										}
									}
								:}
								|
								error SEMICOLON {: printSyntaxErrorDescription("Incorrect local variable declaration"); :}
								|
								error {: printSyntaxErrorDescription("Incorrect local variable declaration"); :} 
								;

MethodVariableList ::=	MethodVariableList:locals COMA Variable:variable 
						{: 
							incrementCurrentMethodVariableCount(); 

							//Semantic analysis
							if (locals == null) {
								parser.report_internal_error("NULL locals list int production MethodVariableList ::= MethodVariableList COMA Variable", variableleft);
								RESULT = null;
							} else {
								locals.add(variable);
								RESULT = locals;
							}
						:}
						|
						Variable:variable
						{: 
							incrementCurrentMethodVariableCount(); 

							//Semantic analysis
							RESULT = new ArrayList<Variable>();
							if (variable == null) {
								parser.report_internal_error("NULL variable in production MethodVariableList ::= Variable", variableleft);
							} else {
								RESULT.add(variable);
							}
						:}
						;

Type ::=	IDENTIFIER:name
			{:
				Obj typeObject = SymbolTable.find(name);
				if (SymbolTable.noObj.equals(typeObject)) {
					parser.report_semantic_error("No symbol named " + name, nameleft);
					RESULT = SymbolTable.noObj;
				} else if (Obj.Type != typeObject.getKind()) {
					parser.report_semantic_error("Name " + name + " is not a type", nameleft);
					RESULT = SymbolTable.noObj;
				} else {
					RESULT = typeObject;
				}
			:}
			;

StatementList ::= StatementList Statement
				  |
				  /* epsilon */
				  ;

Statement ::= MatchedStatement
			  |
			  UnmatchedStatement
			  ;

IfHeader ::=	IF LEFT_PARENTHESIS Condition RIGHT_PARENTHESIS
				|
				IF LEFT_PARENTHESIS error RIGHT_PARENTHESIS {: printSyntaxErrorDescription("Incorrect condition declaration"); :}
				|
				IF LEFT_PARENTHESIS RIGHT_PARENTHESIS {: printSyntaxErrorDescription("Incorrect condition declaration"); :}
				;
			  
ForHeader ::=	FOR LEFT_PARENTHESIS ForInitialStatement SEMICOLON ForCondition SEMICOLON ForPostStatement RIGHT_PARENTHESIS
				{:
					forLoopBreakStack.push(new ArrayList<>());
					forLoopContinueStack.push(new ArrayList<>());
				:}
				|
				FOR LEFT_PARENTHESIS error RIGHT_PARENTHESIS
				{:
					printSyntaxErrorDescription("Incorrect for loop inner statements");

					forLoopBreakStack.push(new ArrayList<>());
					forLoopContinueStack.push(new ArrayList<>());
				:}
				;

UnmatchedStatement ::=	IfHeader 
							Statement
					  	|
					  	IfHeader
					   		MatchedStatement
					  	ELSE
					   		UnmatchedStatement
					  	| /* umatched for */
					   	ForHeader:token
					 		UnmatchedStatement
						{:
							if (forLoopBreakStack.isEmpty()) {
								parser.report_internal_error("For loop break stack is empty", tokenleft);
							} else if (forLoopContinueStack.isEmpty()) {
								parser.report_internal_error("For loop continue stack is empty", tokenleft);
							} else {
								//Iterate trough both lists and fix break and continue adressess
								forLoopBreakStack.pop();
								forLoopContinueStack.pop();
							}
						:}
					   	;
					 
MatchedStatement ::= 	IfHeader 
							MatchedStatement
						ELSE
							MatchedStatement
						| 
						/* matched for */
						ForHeader:token
							MatchedStatement
						{:
							if (forLoopBreakStack.isEmpty()) {
								parser.report_internal_error("For loop break stack is empty", tokenleft);
							} else if (forLoopContinueStack.isEmpty()) {
								parser.report_internal_error("For loop continue stack is empty", tokenleft);
							} else {
								//Iterate trough both lists and fix break and continue adressess
								forLoopBreakStack.pop();
								forLoopContinueStack.pop();
							}
						:}
						|
						DesignatorStatement SEMICOLON
						|
						BREAK SEMICOLON:token
						{:
							if (forLoopBreakStack.isEmpty()) {
								parser.report_semantic_error("BREAK statement found outside of loop", tokenleft);
							} else {
								//Add the address of break statement
							}
						:}
						|
						CONTINUE SEMICOLON:token
						{:
							if (forLoopContinueStack.isEmpty()) {
								parser.report_semantic_error("CONTINUE statement found outside of loop", tokenleft);
							} else {
								//Add the address of continue statement
							}
						:}
					 	|
					 	RETURN ReturnValue:value SEMICOLON
					 	{:
					 		if (value == null) {
					 			parser.report_internal_error("NULL value in production MatchedStatement ::= RETURN ReturnValue SEMICOLON", valueleft);
					 		} else if (currentMethod == null) {
					 			parser.report_semantic_error("Found return statement outside of method or function", valueleft);
					 		} else if (currentMethod.getType().equals(SymbolTable.voidType) && !value.equals(SymbolTable.voidObject)) {
					 			parser.report_semantic_error("Return statement must be empty for void type method or function " + currentMethod.getName(), valueleft);
					 			returnFound = true;
					 		} else if (!currentMethod.getType().equals(SymbolTable.voidType) && value.equals(SymbolTable.voidObject)) {
					 			parser.report_semantic_error("Empty return expression, must be of type " + SymbolTable.getTypeName(currentMethod.getType()), valueleft);
					 			returnFound = true;
					 		} else if (!currentMethod.getType().equals(SymbolTable.voidType) && !value.getType().equals(currentMethod.getType())) {
					 			parser.report_semantic_error("Return type must be equivalent to " + SymbolTable.getTypeName(currentMethod.getType()), valueleft);
					 			returnFound = true;
					 		} else {
					 			returnFound = true;
					 		}
					 	:}
					 	|
					 	READ LEFT_PARENTHESIS Designator:designator RIGHT_PARENTHESIS SEMICOLON
					 	{:
					 		if (designator == null) {
					 			parser.report_internal_error("NULL designator in production MatchedStatement ::= READ LEFT_PARENTHESIS Designator RIGHT_PARENTHESIS SEMICOLON", designatorleft);
					 		} else if (!designator.equals(SymbolTable.noObj)) {
					 			if (designator.getKind() != MyObj.Var && designator.getKind() != MyObj.Elem && designator.getKind() != MyObj.Fld) {
					 				parser.report_semantic_error("Designator " + designator.getName() +" must be a variable, array element or class field", designatorleft);
					 			} else if (!designator.getType().equals(SymbolTable.intType) && !designator.getType().equals(SymbolTable.charType) && !designator.getType().equals(SymbolTable.boolType)) {
					 				parser.report_semantic_error("Designator " + designator.getName() +" must be of int, char of bool type", designatorleft);
					 			}
					 		}
					 	:}
					 	|
					 	PRINT LEFT_PARENTHESIS PrintParameters RIGHT_PARENTHESIS SEMICOLON
					 	|
					 	LEFT_BRACE
					 		StatementList
					 	RIGHT_BRACE
					 	{:
					 		incrementCodeBlockCount();
					 	:}			
					 	;

ReturnValue ::= Expression:expression
				{:
					if (expression == null) {
						parser.report_internal_error("NULL expression in production ReturnValue ::= Expression", expressionleft);
						RESULT = SymbolTable.noObj;
					} else {
						RESULT = expression;
					}
				:}
				|
				/* epsilon */
				{:
					RESULT = SymbolTable.voidObject;
				:}
				;
				
PrintParameters ::=	Expression:expression
					{:
						if (expression == null) {
							parser.report_internal_error("NULL expression in production PrintParameters ::= Expression", expressionleft);
						} else if (!expression.equals(SymbolTable.noObj)) {
							if (!expression.getType().equals(SymbolTable.intType) && !expression.getType().equals(SymbolTable.charType) && !expression.getType().equals(SymbolTable.boolType)) {
								parser.report_semantic_error("Expression " + expression.getName() + " must be of int, char or bool type", expressionleft);
							}
						}
					:}
					|
					Expression:expression COMA NUMERICAL_CONSTANT
					{:
						if (expression == null) {
							parser.report_internal_error("NULL expression in production PrintParameters ::= Expression", expressionleft);
						} else if (!expression.equals(SymbolTable.noObj)) {
							if (!expression.getType().equals(SymbolTable.intType) && !expression.getType().equals(SymbolTable.charType) && !expression.getType().equals(SymbolTable.boolType)) {
								parser.report_semantic_error("Expression " + expression.getName() + " must be of int, char or bool type", expressionleft);
							}
						}
					:}
					;

ForInitialStatement ::= DesignatorStatement
						|
						error {: printSyntaxErrorDescription("Incorrect initial for loop statement"); :}
						|
						/* epsilon */
						;
						 
ForCondition ::=	Condition
				 	|
				 	error {: printSyntaxErrorDescription("Incorrect for condition statement"); :}
				 	|
				 	/* epsilon */
		  		 	;
		  		 
ForPostStatement ::= DesignatorStatement
					 |
					 error {: printSyntaxErrorDescription("Incorrect post for loop statement"); :}
					 |
					 /* epsilon */
					 ;

DesignatorStatement ::=	Designator:designator AssignOperation:expression
						{:
							if (designator == null) {
								parser.report_internal_error("NULL designator in production DesignatorStatement ::= Designator AssignOperation", designatorleft);
							} else if (expression == null) {
								parser.report_internal_error("NULL expression in production DesignatorStatement ::= Designator AssignOperation", expressionleft);
							} else if (!designator.equals(SymbolTable.noObj) && !expression.equals(SymbolTable.noObj)) {
								if (designator.getKind() != MyObj.Var && designator.getKind() != MyObj.Elem && designator.getKind() != MyObj.Fld) {
									parser.report_semantic_error("Designator " + designator.getName() + " must be a variable, array element or class field", expressionleft);
								} else if (!expression.getType().assignableTo(designator.getType())) {
									parser.report_semantic_error("Expression " + expression.getName() + " of type " + SymbolTable.getTypeName(expression.getType()) + " is not assignable to designator " + designator.getName() + " of type " + SymbolTable.getTypeName(designator.getType()), expressionleft);
								}
							}
						:}
						|
						Designator:designator MethodCall:parameterList
						{:
							if (designator == null) {
								parser.report_internal_error("NULL designator in production DesignatorStatement ::= Designator MethodCall", designatorleft);
							} else if (parameterList == null) {
								parser.report_internal_error("NULL parameter list in production DesignatorStatement ::= Designator MethodCall", parameterListleft);
							} else if (!designator.equals(SymbolTable.noObj)){
								if (designator.getKind() != MyObj.Global && designator.getKind() != MyObj.Static && designator.getKind() != MyObj.Meth) {
									parser.report_semantic_error("Symbol " + designator.getName() + " is not callable", designatorleft);
								} else {
									if ((designator.getKind() != MyObj.Meth && parameterList.size() != designator.getLevel()) || (designator.getKind() == MyObj.Meth && parameterList.size() != (designator.getLevel() - 1))) {
										parser.report_semantic_error("Incorrect number of parameters in the invokation of " + designator.getName(), designatorleft);
									} else {
										Collection<Obj> functionLocals = designator.getLocalSymbols();
										Iterator<Obj> formalParameterIterator = functionLocals.iterator();

										//If MyObj.Meth skip this parameter
										if (designator.getKind() == MyObj.Meth) {
											formalParameterIterator.next();
										}
										Iterator<Obj> actualParameterIterator = parameterList.iterator();

										while (formalParameterIterator.hasNext() && actualParameterIterator.hasNext()) {
											Obj formalParameter = formalParameterIterator.next();
											Obj actualParameter = actualParameterIterator.next();

											if(!formalParameter.equals(SymbolTable.noObj) && !actualParameter.equals(SymbolTable.noObj) && !actualParameter.getType().assignableTo(formalParameter.getType())) {
												parser.report_semantic_error("Actual parameter " + actualParameter.getName() + " of type " + SymbolTable.getTypeName(actualParameter.getType()) + " is not assignable to formal parameter " + formalParameter.getName() + " of type " + SymbolTable.getTypeName(formalParameter.getType()), designatorleft);
											}
										}
									}
								}
							}
						:}
						|
						Designator:designator INCREMENT
						{:
							if (designator == null) {
								parser.report_internal_error("NULL designator in production DesignatorStatement ::= Designator INCREMENT", designatorleft); 
							} else if (!designator.equals(SymbolTable.noObj)) {
								if (designator.getKind() != MyObj.Var && designator.getKind() != MyObj.Elem && designator.getKind() != MyObj.Fld) {
									parser.report_semantic_error("Designator " + designator.getName() + " must be a variable, array element or class field", designatorleft);
								} else if (!designator.getType().equals(SymbolTable.intType)) {
									parser.report_semantic_error("Designator " + designator.getName() + " must be of type int", designatorleft);
								}
							}
						:}
						|
						Designator:designator DECREMENT
						{:
							if (designator == null) {
								parser.report_internal_error("NULL designator in production DesignatorStatement ::= Designator INCREMENT", designatorleft); 
							} else if (!designator.equals(SymbolTable.noObj)) {
								if (designator.getKind() != MyObj.Var && designator.getKind() != MyObj.Elem && designator.getKind() != MyObj.Fld) {
									parser.report_semantic_error("Designator " + designator.getName() + " must be a variable, array element or class field", designatorleft);
								} else if (!designator.getType().equals(SymbolTable.intType)) {
									parser.report_semantic_error("Designator " + designator.getName() + " must be of type int", designatorleft);
								}
							}
						:}
						;

MethodCall ::=	LEFT_PARENTHESIS ActualParameters RIGHT_PARENTHESIS:token
			 	{:
			 		incrementCurrentMethodCallCount();

			 		if (actualParametersStack.isEmpty()) {
			 			parser.report_internal_error("Internal error, empty actual parameter stack", tokenleft);
			 			RESULT = null;
			 		} else {
			 			RESULT = actualParametersStack.pop();
			 		}
			 	:}
			 	|
			 	LEFT_PARENTHESIS error RIGHT_PARENTHESIS 
			 	{: 
			 		printSyntaxErrorDescription("Incorrect actual parameter list syntax"); 

			 		RESULT = new ArrayList<Obj>();
			 	:}
			 	;

AssignOperation ::= 	AssignOperator:operator Expression:expression
						{:
							if (expression == null) {
								parser.report_internal_error("NULL expression in production AssignOperation ::= AssignOperator Expression", expressionleft);
								RESULT = SymbolTable.noObj;
							} else {
								if (!expression.equals(SymbolTable.noObj) && !EQUALS.equals(operator) && !expression.getType().equals(SymbolTable.intType)) {
									parser.report_semantic_error("Expression " + expression.getName() + " must be of type int when using combined operator " + operator, expressionleft);
								} 
								RESULT = expression;
							}
						:} 
						|
						error 
						{: 
							printSyntaxErrorDescription("Incorrect asign operation syntax"); 
							RESULT = SymbolTable.noObj;
						:}
						;
								 
ActualParameters ::=	ActualParameters COMA Expression:expression
						{:
							if (actualParametersStack.empty()) {
								parser.report_internal_error("Internal error, got empty parameter list", expressionleft);
							} else if (expression == null) {
								parser.report_internal_error("NULL expression in production ActualParameters ::= ActualParameters COMA Expression", expressionleft);
								actualParametersStack.peek().add(SymbolTable.noObj);
							} else {
								actualParametersStack.peek().add(expression);
							}
						:}
						|
						Expression:expression
						{:
							List<Obj> parameters = new ArrayList<>();
							if (expression == null) {
								parser.report_internal_error("NULL expression in production ActualParameters ::= expression", expressionleft);
								parameters.add(SymbolTable.noObj);
							} else {
								parameters.add(expression);
							}
							actualParametersStack.push(parameters);
						:}
						|
						/* epsilon */
						{:
							actualParametersStack.push(new ArrayList<>());
						:}
						;
				 				
Condition ::=	Condition:condition OR ConditionTerm:term
				{:
					if (condition == null) {
						parser.report_internal_error("NULL condition in production Condition ::= Condition OR ConditionTerm", termleft);
						RESULT = SymbolTable.noObj;
					} else if (term == null) {
						parser.report_internal_error("NULL term in production Condition ::= Condition OR ConditionTerm", termleft);
						RESULT = SymbolTable.noObj;
					} else if (!condition.equals(SymbolTable.noObj) && !term.equals(SymbolTable.noObj)) {
						if (!condition.getType().equals(SymbolTable.boolType)) {
							parser.report_semantic_error("Expression " + condition.getName() + " is not of type bool", termleft);
							RESULT = SymbolTable.noObj;
						} else if (!term.getType().equals(SymbolTable.boolType)) {
							parser.report_semantic_error("Expression " + term.getName() + " is not of type bool", termleft);
							RESULT = SymbolTable.noObj;
						} else {
							RESULT = new MyObj(MyObj.Var, condition.getName() + " || " + term.getName(), SymbolTable.boolType);
						}
					} else {
						RESULT = SymbolTable.noObj;
					}
				:}
			 	|
			 	ConditionTerm:term
			 	{:
			 		if (term == null) {
			 			parser.report_internal_error("NULL term in production Condition ::= ConditionTerm", termleft);
			 			RESULT = SymbolTable.noObj;
			 		} else if (!term.equals(SymbolTable.noObj)) {
			 			if (!term.getType().equals(SymbolTable.boolType)) {
			 				parser.report_semantic_error("Expression " + term.getName() + " is not of type bool", termleft);
			 				RESULT = SymbolTable.noObj;
			 			} else {
			 				RESULT = term;
			 			}
			 		} else {
			 			RESULT = SymbolTable.noObj;
			 		}
			  	:}
			  	;		
				 				
ConditionTerm ::=	ConditionTerm:term AND ConditionFact:fact
					{:
						if (term == null) {
							parser.report_internal_error("NULL term in production ConditionTerm ::= ConditionTerm AND ConditionFact", factleft);
							RESULT = SymbolTable.noObj;
						} else if (fact == null) {
							parser.report_internal_error("NULL fact in production ConditionTerm ::= ConditionTerm AND ConditionFact", factleft);
							RESULT = SymbolTable.noObj;
						} else if (!term.equals(SymbolTable.noObj) && !fact.equals(SymbolTable.noObj)) {
							if (!term.getType().equals(SymbolTable.boolType)) {
								parser.report_semantic_error("Expression " + term.getName() + " is not of type bool", factleft);
								RESULT = SymbolTable.noObj;
							} else if (!fact.getType().equals(SymbolTable.boolType)) {
								parser.report_semantic_error("Expression " + fact.getName() + " is not of type bool", factleft);
								RESULT = SymbolTable.noObj;
							} else {
								RESULT = new MyObj(MyObj.Var, term.getName() + " && " + fact.getName(), SymbolTable.boolType);
							}
						} else {
							RESULT = SymbolTable.noObj;
						}
					:}
				 	|
				 	ConditionFact:fact
				 	{:
				 		if (fact == null) {
				 			parser.report_internal_error("NULL factor in production ConditionTerm ::= ConditionFact", factleft);
				 			RESULT = SymbolTable.noObj;
				 		} else if (!fact.equals(SymbolTable.noObj)) {
				 			if (!fact.getType().equals(SymbolTable.boolType)) {
				 				parser.report_semantic_error("Expression " + fact.getName() + " is not of type bool", factleft);
				 				RESULT = SymbolTable.noObj;
				 			} else {
				 				RESULT = fact;
				 			}
				 		} else {
				 			RESULT = SymbolTable.noObj;
				 		}
				 	:}
				 	;

ConditionFact ::=	Expression:leftExpression RelationalOperator:operator Expression:rightExpression
					{:
						if (leftExpression == null) {
							parser.report_internal_error("NULL left expression in production ConditionFact ::= Expression RelationalOperator Expression", leftExpressionleft);
							RESULT = SymbolTable.noObj;
						} else if (rightExpression == null) {
							parser.report_internal_error("NULL right expression in production ConditionFact ::= Expression RelationalOperator Expression", rightExpressionleft);
							RESULT = SymbolTable.noObj;
						} else if (!leftExpression.equals(SymbolTable.noObj) && !rightExpression.equals(SymbolTable.noObj)){
							if (!leftExpression.getType().compatibleWith(rightExpression.getType())) {
								parser.report_semantic_error("Expressions " + leftExpression.getName() + " and " + rightExpression.getName() + " are incompatible", leftExpressionleft);
								RESULT = SymbolTable.noObj;
							} else if (leftExpression.getType().isRefType() && rightExpression.getType().isRefType() && !EQUAL.equals(operator) && !NOT_EQUAL.equals(operator)) {
								parser.report_semantic_error("Only " + EQUAL + " and " + NOT_EQUAL + " are aloved with referential types", operatorleft);
								RESULT = SymbolTable.noObj;
							} else {
								RESULT = new MyObj(MyObj.Var, leftExpression.getName() + " " + operator + " " + rightExpression.getName(), SymbolTable.boolType);
							}
						} else {
							RESULT = SymbolTable.noObj;
						}
					:}
					|
					Expression:expression
					{:
						if (expression == null) {
							parser.report_internal_error("NULL expression in production ConditionFact ::= Expression", expressionleft);
							RESULT = SymbolTable.noObj;
						} else if (!expression.getType().equals(SymbolTable.boolType)) {
							parser.report_semantic_error("Expression " + expression.getName() + " is not of bool type", expressionleft);
							RESULT = SymbolTable.noObj;
						} else {
							RESULT = expression;
						}
					:}
					;

Expression ::=	ExpressionPrefix:isNegated RightAssociatedTermList:expression
				{:
					if (expression != null) {
						if (isNegated.booleanValue() && !expression.getType().equals(SymbolTable.intType)) {
							parser.report_semantic_error("Expression must be of type int if it is negated", expressionleft);
							RESULT = SymbolTable.noObj;
						} else {
							RESULT = expression;
						}
					} else {
						parser.report_internal_error("NULL expression in production Expression ::= ExpressionPrefix RightAssociatedTermList", expressionleft);
						RESULT = SymbolTable.noObj;
					}
				:}
				;

ExpressionPrefix ::=	MINUS
						{:
							RESULT = true;
						:}
						|
					 	/* epsilon */
					 	{:
					 		RESULT = false;
					 	:}
					 	;

RightAssociatedTermList ::=	LeftAssociatedTermList:leftExpression AdditionOperatorRight:operator RightAssociatedTermList:rightExpression
							{:
								boolean error = false;
								if (leftExpression == null) {
									parser.report_internal_error("NULL left expression in production RightAssociatedTermList ::= LeftAssociatedTermList AdditionOperatorRight RightAssociatedTermList", leftExpressionleft);
									error = true;
								}

								if (rightExpression == null) {
									parser.report_internal_error("NULL right expression in production RightAssociatedTermList ::= LeftAssociatedTermList AdditionOperatorRight RightAssociatedTermList", leftExpressionleft);
									error = true;
								}

								if (leftExpression != null && !leftExpression.equals(SymbolTable.noObj) && !leftExpression.getType().equals(SymbolTable.intType)) {
									parser.report_semantic_error("Expression " + leftExpression.getName() + " is not of type int", leftExpressionleft);
									error = true;
								}

								if (rightExpression != null && !rightExpression.equals(SymbolTable.noObj) && !rightExpression.getType().equals(SymbolTable.intType)) {
									parser.report_semantic_error("Expression " + rightExpression.getName() + " is not of type int", rightExpressionleft);
									error = true;
								}

								if (leftExpression != null && !leftExpression.equals(SymbolTable.noObj) && leftExpression.getKind() != MyObj.Var && leftExpression.getKind() != MyObj.Fld && leftExpression.getKind() != MyObj.Elem) {
									parser.report_semantic_error("Left side is not a varaible, array element or class field", leftExpressionleft);
									error = true;
								}

								if(!error) {
									RESULT = new MyObj(MyObj.Var, leftExpression.getName() + " " + operator + " " + rightExpression.getName(), SymbolTable.intType);
								} else {
									RESULT = SymbolTable.noObj;
								}
							:}
							|
							LeftAssociatedTermList:expression
							{:
								if (expression != null) {
									RESULT = expression;
								} else {
									parser.report_semantic_error("NULL expression in production RightAssociatedTermList ::= LeftAssociatedTermList", expressionleft);
									RESULT = SymbolTable.noObj;
								}
							:}
							;

LeftAssociatedTermList ::=	LeftAssociatedTermList:leftExpression AdditionOperatorLeft:operator RightAssociatedFactorList:rightExpression
							{:
								boolean error = false;
								if (leftExpression == null) {
									parser.report_internal_error("NULL left expression in production LeftAssociatedTermList ::= LeftAssociatedTermList AdditionOperatorLeft RightAssociatedFactorList", leftExpressionleft);
									error = true;
								}

								if (rightExpression == null) {
									parser.report_internal_error("NULL right expression in production LeftAssociatedTermList ::= LeftAssociatedTermList AdditionOperatorLeft RightAssociatedFactorList", leftExpressionleft);
									error = true;
								}

								if (leftExpression != null && !leftExpression.equals(SymbolTable.noObj) && !leftExpression.getType().equals(SymbolTable.intType)) {
									parser.report_semantic_error("Expression " + leftExpression.getName() + " is not of type int", leftExpressionleft);
									error = true;
								}

								if (rightExpression != null && !rightExpression.equals(SymbolTable.noObj) && !rightExpression.getType().equals(SymbolTable.intType)) {
									parser.report_semantic_error("Expression " + rightExpression.getName() + " is not of type int", rightExpressionleft);
									error = true;
								}

								if(!error) {
									RESULT = new MyObj(MyObj.Var, leftExpression.getName() + " " + operator + " " + rightExpression.getName(), SymbolTable.intType);
								} else {
									RESULT = SymbolTable.noObj;
								}
							:}
							|
							RightAssociatedFactorList:expression
							{:
								if (expression != null) {
									RESULT = expression;
								} else {
									parser.report_semantic_error("NULL expression in production LeftAssociatedTermList ::= RightAssociatedFactorList", expressionleft);
									RESULT = SymbolTable.noObj;
								}
							:}
							;

RightAssociatedFactorList ::=	LeftAssociatedFactorList:leftExpression MultiplicationOperatorRight:operator RightAssociatedFactorList:rightExpression
								{:
									boolean error = false;
									if (leftExpression == null) {
										parser.report_internal_error("NULL left expression in production RightAssociatedFactorList ::= LeftAssociatedFactorList MultiplicationOperatorRight RightAssociatedFactorList", leftExpressionleft);
										error = true;
									}

									if (rightExpression == null) {
										parser.report_internal_error("NULL right expression in production RightAssociatedFactorList ::= LeftAssociatedFactorList MultiplicationOperatorRight RightAssociatedFactorList", leftExpressionleft);
										error = true;
									}

									if (leftExpression != null && !leftExpression.equals(SymbolTable.noObj) && !leftExpression.getType().equals(SymbolTable.intType)) {
										parser.report_semantic_error("Expression " + leftExpression.getName() + " is not of type int", leftExpressionleft);
										error = true;
									}

									if (rightExpression != null && !rightExpression.equals(SymbolTable.noObj) && !rightExpression.getType().equals(SymbolTable.intType)) {
										parser.report_semantic_error("Expression " + rightExpression.getName() + " is not of type int", rightExpressionleft);
										error = true;
									}

									if (leftExpression != null && !leftExpression.equals(SymbolTable.noObj) && leftExpression.getKind() != MyObj.Var && leftExpression.getKind() != MyObj.Fld && leftExpression.getKind() != MyObj.Elem) {
										parser.report_semantic_error(leftExpression.getName() + " is not a variable, array element or class field", leftExpressionleft);
										error = true;
									}

									if(!error) {
										RESULT = new MyObj(MyObj.Var, leftExpression.getName() + " " + operator + " " + rightExpression.getName(), SymbolTable.intType);
									} else {
										RESULT = SymbolTable.noObj;
									}
								:}
								|
								LeftAssociatedFactorList:expression
								{:
									if (expression != null) {
										RESULT = expression;
									} else {
										parser.report_internal_error("NULL expression in production RightAssociatedFactorList ::= LeftAssociatedFactorList", expressionleft);
										RESULT = SymbolTable.noObj;
									}
								:}
								;

LeftAssociatedFactorList ::=	LeftAssociatedFactorList:expression MultiplicationOperatorLeft:operator Factor:factor
								{:
									boolean error = false;
									if (expression == null) {
										parser.report_internal_error("NULL expression in production LeftAssociatedFactorList ::= LeftAssociatedFactorList MultiplicationOperatorLeft Factor", factorleft);
										error = true;
									}

									if (factor == null) {
										parser.report_internal_error("NULL factor in production LeftAssociatedFactorList ::= LeftAssociatedFactorList MultiplicationOperatorLeft Factor", factorleft);
										error = true;
									}

									if (expression != null && !expression.equals(SymbolTable.noObj) && !expression.getType().equals(SymbolTable.intType)) {
										parser.report_semantic_error("Expression " + expression.getName() + " is not of type int", expressionleft);
										error = true;
									}

									if (factor != null && !factor.equals(SymbolTable.noObj) && !factor.getType().equals(SymbolTable.intType)) {
										parser.report_semantic_error("Expression " + factor.getName() + " is not of type int", factorleft);
										error = true;
									}

									if(!error) {
										RESULT = new MyObj(MyObj.Var, expression.getName() + " " + operator + " " + factor.getName(), SymbolTable.intType);
									} else {
										RESULT = SymbolTable.noObj;
									}
								:}
								|
								Factor:factor
								{:
									if (factor != null) {
										RESULT = factor;
									} else {
										parser.report_internal_error("NULL factor in production LeftAssociatedFactorList ::= Factor", factorleft);
										RESULT = SymbolTable.noObj;
									}
								:}
								;

Factor ::=	Designator:designator OptionalParameters:parameterList
			{:
				if (designator == null) {
					parser.report_internal_error("Internal error, got null designator or parameter list", designatorleft);
					RESULT = SymbolTable.noObj;
				} else if (designator.getKind() == MyObj.Global && designator.getKind() == MyObj.Meth && designator.getKind() == MyObj.Static && parameterList == null) {
					parser.report_internal_error("Internal error, got null parameter list", designatorleft);
				} else if (!designator.equals(SymbolTable.noObj)) {
					//Check types and number of paramaters
					if (designator.getKind() == MyObj.Global || designator.getKind() == MyObj.Meth || designator.getKind() == MyObj.Static) {
						if ((designator.getKind() != MyObj.Meth && parameterList.size() != designator.getLevel()) || (designator.getKind() == MyObj.Meth && parameterList.size() != (designator.getLevel() - 1))) {
							parser.report_semantic_error("Incorrect number of parameters in the invokation of " + designator.getName(), designatorleft);
						} else {
							Collection<Obj> functionLocals = designator.getLocalSymbols();
							Iterator<Obj> formalParameterIterator = functionLocals.iterator();

							//If MyObj.Meth skip this parameter
							if (designator.getKind() == MyObj.Meth) {
								formalParameterIterator.next();
							}
							Iterator<Obj> actualParameterIterator = parameterList.iterator();

							while (formalParameterIterator.hasNext() && actualParameterIterator.hasNext()) {
								Obj formalParameter = formalParameterIterator.next();
								Obj actualParameter = actualParameterIterator.next();

								if(!actualParameter.getType().assignableTo(formalParameter.getType())) {
									parser.report_semantic_error("Actual parameter " + actualParameter.getName() + " of type " + SymbolTable.getTypeName(actualParameter.getType()) + " is not assignable to formal parameter " + formalParameter.getName() + " of type " + SymbolTable.getTypeName(formalParameter.getType()), designatorleft);
								}
							}
						}
					}
					RESULT = designator;
				} else {
					RESULT = SymbolTable.noObj;
				}
			:}
		   	|
		   	NUMERICAL_CONSTANT:value {: RESULT = new MyObj(Obj.Con, value.toString(), SymbolTable.intType, value.intValue(), SymbolTable.getCurrentLevel()); :}
		   	|
		   	CHARACTER_CONSTANT:value {: RESULT = new MyObj(Obj.Con, value.toString(), SymbolTable.charType, (int)value.charAt(0), SymbolTable.getCurrentLevel()); :}
		   	|
		   	BOOLEAN_CONSTANT:value {: RESULT = new MyObj(Obj.Con, value.toString(), SymbolTable.boolType, value.booleanValue() ? 1 : 0, SymbolTable.getCurrentLevel()); :}
		   	|
		   	NEW Type:typeObject ArraySize:isArray
		   	{:
		   		if (!isArray.booleanValue() && typeObject.getType().getKind() != MyStruct.Class) {
		   			parser.report_semantic_error("Cannot instantiate a object of non class type " + typeObject.getName(), typeObjectleft);
		   			RESULT = SymbolTable.noObj;
		   		} else {
		   			if(isArray.booleanValue()) {
		   				RESULT = new Obj(Obj.Type, typeObject.getName() + "[]", new MyStruct(MyStruct.Array, typeObject.getType()));
		   			} else {
		   				RESULT = typeObject;
		   			}
		   		}
		   	:}
		   	|
		   	LEFT_PARENTHESIS Expression RIGHT_PARENTHESIS
		   	;
		   
OptionalParameters ::= 	MethodCall:parameterList
						{:
							if(parameterList == null) { 
								parser.report_internal_error("NULL parameter list for production OptionalParameters ::= MethodCall", parameterListleft);
								RESULT = null;
							} else {
								RESULT = parameterList;
							}
						:}
					   	|
					   	/* epsilon */
					   	{:
					   		RESULT = null;
					   	:}
					   	;		   
		   						  
ArraySize ::=	ArrayIndexer
			  	{: 
			  		RESULT = true;
			  	:}
			  	|
			  	/* epsilon */
			  	{:
			  		RESULT = false;
			  	:}
			  	;
	   
ArrayIndexer ::=	LEFT_BRACKET Expression:expression RIGHT_BRACKET
					{:
						if (expression != null) {
							if (!expression.getType().equals(SymbolTable.intType)) {
								parser.report_semantic_error("Array index is not of type int", expressionleft);
							}
						} else {
							parser.report_internal_error("NULL expression for production ArrayIndexer ::= LEFT_BRACKET Expression RIGHT_BRACKET", expressionleft);
						}
					:}
					|
					LEFT_BRACKET error RIGHT_BRACKET {: printSyntaxErrorDescription("Incorrect expression for array index"); :}
					;
					
Designator ::=	Designator:designator DOT IDENTIFIER:name
				{:
					//Semantic analysis
					if (designator == null) {
						parser.report_internal_error("NULL designator in production Designator ::= Designator DOT IDENTIFIER", designatorleft);
						RESULT = SymbolTable.noObj;
					} else if (!designator.equals(SymbolTable.noObj)) {
						if (designator.getType().getKind() != MyStruct.Class) {
							parser.report_semantic_error("Symbol " + designator.getName() + " is not of class type", designatorleft);
							RESULT = SymbolTable.noObj;
						} else {
							Obj member = null;
							//Check for member in base class
							//If designator is THIS or we are invoking a static method of our own class we need to search in top scope because members are not associated with class node yet
							if (THIS.equals(designator.getName()) || (currentClass != null && designator.getKind() == MyObj.Type && designator.getType().equals(currentClass.getType()))) {
								member = SymbolTable.currentScope.getOuter().findSymbol(name);
							} else {
								SymbolDataStructure members = designator.getType().getMembersTable();
								member = members.searchKey(name);
							}

							//If we did not find it in base class we find it in parent class
							if (member == null) {
								Struct parent = designator.getType().getElemType();
								while (parent != null && member == null) {
									SymbolDataStructure members = parent.getMembersTable();
									member = members.searchKey(name);
									if (member == null) {
										parent = parent.getElemType();
									}		
								}
							}

							if (member == null) {
								parser.report_semantic_error("Symbol " + designator.getName() + " has no member of name " + name, designatorleft);
								RESULT = SymbolTable.noObj;
							} else if(designator.getKind() == MyObj.Type && member.getKind() != MyObj.Static) {
								parser.report_semantic_error("Use of non-static method or varaible through class name symbol " + designator.getName(), designatorleft);
								RESULT = SymbolTable.noObj;
							} else {
								RESULT = member;
							}
						}
					} else {
						RESULT = SymbolTable.noObj;
					}
				:}
				|
				Designator:designator ArrayIndexer
				{:
					//Semantic analysis
					if (designator == null) {
						parser.report_internal_error("NULL designator in production Designator ::= Designator ArrayIndexer", designatorleft);
					} else if (!designator.equals(SymbolTable.noObj)) {
						if(designator.getType().getKind() != MyStruct.Array) {
							parser.report_semantic_error("Symbol " + designator.getName() + " is not an array", designatorleft);
							RESULT = SymbolTable.noObj;
						} else if(designator.getType().getElemType() == null) {
							parser.report_internal_error("Array without an element type in production Designator ::= Designator ArrayIndexer", designatorleft);
							RESULT = null;
						} else {
							//Return temp designator that represents and array element
							RESULT = new MyObj(MyObj.Elem, designator.getName() + "[]", designator.getType().getElemType());
						}
					} else {
						RESULT = SymbolTable.noObj;
					}
				:}
				|
				IDENTIFIER:name 
				{:
					//Semantic analysis
					Obj object = SymbolTable.find(name);
					if (object.equals(SymbolTable.noObj)) {
						if (THIS.equals(name)) {
							parser.report_semantic_error("Use of " + THIS + " outside of class non-static method", nameleft);
							RESULT = SymbolTable.noObj;
						} else {
							parser.report_semantic_error("Use of undefined symbol " + name, nameleft);
							RESULT = SymbolTable.noObj;
						}
					} else {	
						RESULT = object;
					}
				:}
				;
			   
AssignOperator ::= 	EQUALS
					{:
						RESULT = EQUALS;
					:}
					|
					AdditionOperatorRight:operator
					{:
						RESULT = operator;
					:}
					|
					MultiplicationOperatorRight:operator
					{:
						RESULT = operator;
					:}
					;

RelationalOperator ::= EQUAL {: RESULT = EQUAL; :}
					   |
					   NOT_EQUAL {: RESULT = NOT_EQUAL; :}
					   |
					   GREATER_THAN {: RESULT = GREATER_THAN; :}
					   |
					   GREATER_OR_EQUAL_THAN {: RESULT = GREATER_OR_EQUAL_THAN; :}
					   |
					   LESS_THAN {: RESULT = LESS_THAN; :}
					   |
					   LESS_OR_EQUAL_THAN {: RESULT = LESS_OR_EQUAL_THAN; :}
					   ;  
					 
AdditionOperatorLeft ::= PLUS {: RESULT = PLUS; :}
						 |
						 MINUS {: RESULT = MINUS; :}
						 ;					  
					   
AdditionOperatorRight ::= PLUS_EQUALS {: RESULT = PLUS_EQUALS; :}
						  |
						  MINUS_EQUALS {: RESULT = MINUS_EQUALS; :}
						  ;
						
MultiplicationOperatorLeft ::= TIMES {: RESULT = TIMES; :}
							   |
							   SOLIDUS {: RESULT = SOLIDUS; :}
							   |													   
							   PERCENT {: RESULT = PERCENT; :}
							   ;
								
MultiplicationOperatorRight ::= TIMES_EQUALS {: RESULT = TIMES_EQUALS; :}
							    |
							    SOLIDUS_EQUALS {: RESULT = SOLIDUS_EQUALS; :}
							    |
							    PERCENT_EQUALS {: RESULT = PERCENT_EQUALS; :}
							    ;
						   
				 				
				 				
				 				
				 				
				 				
				 				