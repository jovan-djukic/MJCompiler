
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jan 03 13:02:10 CET 2017
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.logging.log4j.Logger;
import rs.ac.bg.etf.pp1.utilities.MyLoggerFactory;
import java.util.*;
import rs.etf.pp1.symboltable.concepts.*;
import rs.etf.pp1.symboltable.structure.*;
import rs.ac.bg.etf.utilities.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jan 03 13:02:10 CET 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\235\000\002\002\010\000\002\002\004\000\002\041" +
    "\003\000\002\003\004\000\002\003\002\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\006\006\000" +
    "\002\045\005\000\002\045\003\000\002\044\005\000\002" +
    "\043\003\000\002\043\003\000\002\043\003\000\002\007" +
    "\005\000\002\007\004\000\002\007\006\000\002\050\005" +
    "\000\002\050\003\000\002\050\005\000\002\050\003\000" +
    "\002\046\004\000\002\047\004\000\002\047\002\000\002" +
    "\010\007\000\002\055\005\000\002\057\004\000\002\057" +
    "\002\000\002\057\003\000\002\011\004\000\002\011\002" +
    "\000\002\012\005\000\002\012\004\000\002\012\003\000" +
    "\002\051\005\000\002\051\003\000\002\013\005\000\002" +
    "\013\002\000\002\004\004\000\002\004\002\000\002\014" +
    "\012\000\002\052\005\000\002\056\003\000\002\056\002" +
    "\000\002\053\003\000\002\053\003\000\002\015\005\000" +
    "\002\015\003\000\002\015\002\000\002\015\005\000\002" +
    "\015\003\000\002\020\005\000\002\016\004\000\002\016" +
    "\003\000\002\016\002\000\002\017\005\000\002\017\005" +
    "\000\002\054\005\000\002\054\003\000\002\042\003\000" +
    "\002\021\004\000\002\021\002\000\002\022\003\000\002" +
    "\022\003\000\002\026\006\000\002\026\006\000\002\026" +
    "\005\000\002\027\012\000\002\027\006\000\002\024\004" +
    "\000\002\024\006\000\002\024\004\000\002\023\006\000" +
    "\002\023\004\000\002\023\004\000\002\023\004\000\002" +
    "\023\004\000\002\023\005\000\002\023\007\000\002\023" +
    "\007\000\002\023\005\000\002\102\003\000\002\102\002" +
    "\000\002\025\003\000\002\025\005\000\002\030\003\000" +
    "\002\030\003\000\002\030\002\000\002\031\003\000\002" +
    "\031\003\000\002\031\002\000\002\032\003\000\002\032" +
    "\003\000\002\032\002\000\002\033\004\000\002\033\004" +
    "\000\002\033\004\000\002\033\004\000\002\077\005\000" +
    "\002\077\005\000\002\101\004\000\002\101\003\000\002" +
    "\034\005\000\002\034\003\000\002\034\002\000\002\035" +
    "\005\000\002\035\003\000\002\036\005\000\002\036\003" +
    "\000\002\037\005\000\002\037\003\000\002\074\004\000" +
    "\002\076\003\000\002\076\002\000\002\062\005\000\002" +
    "\062\003\000\002\061\005\000\002\061\003\000\002\064" +
    "\005\000\002\064\003\000\002\063\005\000\002\063\003" +
    "\000\002\073\004\000\002\073\003\000\002\073\003\000" +
    "\002\073\003\000\002\073\005\000\002\073\005\000\002" +
    "\100\003\000\002\100\002\000\002\075\003\000\002\075" +
    "\002\000\002\040\005\000\002\040\005\000\002\060\005" +
    "\000\002\060\004\000\002\060\003\000\002\072\003\000" +
    "\002\072\003\000\002\072\003\000\002\071\003\000\002" +
    "\071\003\000\002\071\003\000\002\071\003\000\002\071" +
    "\003\000\002\071\003\000\002\065\003\000\002\065\003" +
    "\000\002\066\003\000\002\066\003\000\002\067\003\000" +
    "\002\067\003\000\002\067\003\000\002\070\003\000\002" +
    "\070\003\000\002\070\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\362\000\004\004\005\001\002\000\004\002\364\001" +
    "\002\000\004\060\007\001\002\000\014\003\ufffd\005\ufffd" +
    "\007\ufffd\015\ufffd\060\ufffd\001\002\000\014\003\uffff\005" +
    "\uffff\007\uffff\015\uffff\060\uffff\001\002\000\014\003\016" +
    "\005\020\007\023\015\021\060\017\001\002\000\006\003" +
    "\333\060\314\001\002\000\014\003\ufffb\005\ufffb\007\ufffb" +
    "\015\ufffb\060\ufffb\001\002\000\004\005\342\001\002\000" +
    "\014\003\ufffe\005\ufffe\007\ufffe\015\ufffe\060\ufffe\001\002" +
    "\000\014\003\ufffa\005\ufffa\007\ufffa\015\ufffa\060\ufffa\001" +
    "\002\000\006\010\332\012\331\001\002\000\066\003\uffc5" +
    "\005\uffc5\010\uffc5\012\uffc5\013\uffc5\014\uffc5\031\uffc5\032" +
    "\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5" +
    "\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051" +
    "\uffc5\052\uffc5\053\uffc5\054\uffc5\060\uffc5\062\uffc5\001\002" +
    "\000\012\006\uffd9\017\uffd9\020\uffd9\060\uffd9\001\002\000" +
    "\004\060\040\001\002\000\014\003\ufffc\005\ufffc\007\ufffc" +
    "\015\ufffc\060\ufffc\001\002\000\004\060\017\001\002\000" +
    "\004\060\025\001\002\000\004\011\033\001\002\000\006" +
    "\010\031\012\030\001\002\000\006\010\ufff7\012\ufff7\001" +
    "\002\000\004\060\025\001\002\000\014\003\ufff9\005\ufff9" +
    "\007\ufff9\015\ufff9\060\ufff9\001\002\000\006\010\ufff8\012" +
    "\ufff8\001\002\000\010\061\037\063\036\064\034\001\002" +
    "\000\006\010\ufff3\012\ufff3\001\002\000\006\010\ufff6\012" +
    "\ufff6\001\002\000\006\010\ufff5\012\ufff5\001\002\000\006" +
    "\010\ufff4\012\ufff4\001\002\000\010\003\043\005\uffe5\057" +
    "\042\001\002\000\004\005\uffe7\001\002\000\004\060\017" +
    "\001\002\000\004\005\uffe4\001\002\000\004\005\uffe6\001" +
    "\002\000\012\006\046\017\047\020\uffd5\060\uffd5\001\002" +
    "\000\004\002\001\001\002\000\006\020\uffd6\060\uffd6\001" +
    "\002\000\012\006\uffda\017\uffda\020\uffda\060\uffda\001\002" +
    "\000\006\020\326\060\017\001\002\000\004\016\053\001" +
    "\002\000\012\003\057\012\uffd0\060\017\062\uffd0\001\002" +
    "\000\006\012\064\062\065\001\002\000\006\012\uffd1\062" +
    "\uffd1\001\002\000\004\060\060\001\002\000\006\012\uffce" +
    "\062\uffce\001\002\000\010\012\uffe9\013\062\062\uffe9\001" +
    "\002\000\006\012\uffcd\062\uffcd\001\002\000\004\014\063" +
    "\001\002\000\010\010\uffea\012\uffea\062\uffea\001\002\000" +
    "\006\003\324\060\017\001\002\000\010\003\067\005\uffca" +
    "\060\uffca\001\002\000\006\005\072\060\017\001\002\000" +
    "\006\005\uffcb\060\uffcb\001\002\000\006\005\uffcc\060\uffcc" +
    "\001\002\000\006\003\312\060\314\001\002\000\026\005" +
    "\uffc3\006\uffc3\021\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3" +
    "\055\uffc3\056\uffc3\060\uffc3\001\002\000\026\005\105\006" +
    "\102\021\077\023\114\024\112\025\110\026\075\055\074" +
    "\056\103\060\104\001\002\000\004\016\306\001\002\000" +
    "\004\016\270\001\002\000\032\003\265\011\262\013\175" +
    "\016\173\027\264\030\256\034\177\045\164\046\163\052" +
    "\153\053\155\054\147\001\002\000\004\016\231\001\002" +
    "\000\026\005\uffc4\006\uffc4\021\uffc4\023\uffc4\024\uffc4\025" +
    "\uffc4\026\uffc4\055\uffc4\056\uffc4\060\uffc4\001\002\000\004" +
    "\010\230\001\002\000\012\006\uffd8\017\uffd8\020\uffd8\060" +
    "\uffd8\001\002\000\004\016\221\001\002\000\074\003\uff78" +
    "\010\uff78\011\uff78\012\uff78\013\uff78\014\uff78\016\uff78\027" +
    "\uff78\030\uff78\031\uff78\032\uff78\034\uff78\035\uff78\036\uff78" +
    "\037\uff78\040\uff78\041\uff78\042\uff78\043\uff78\044\uff78\045" +
    "\uff78\046\uff78\047\uff78\050\uff78\051\uff78\052\uff78\053\uff78" +
    "\054\uff78\062\uff78\001\002\000\026\005\uffc3\006\uffc3\021" +
    "\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\055\uffc3\056\uffc3" +
    "\060\uffc3\001\002\000\026\005\uffc2\006\uffc2\021\uffc2\023" +
    "\uffc2\024\uffc2\025\uffc2\026\uffc2\055\uffc2\056\uffc2\060\uffc2" +
    "\001\002\000\026\005\uffc1\006\uffc1\021\uffc1\023\uffc1\024" +
    "\uffc1\025\uffc1\026\uffc1\055\uffc1\056\uffc1\060\uffc1\001\002" +
    "\000\022\010\uffae\016\uff8f\033\uff8f\044\130\060\uff8f\061" +
    "\uff8f\063\uff8f\064\uff8f\001\002\000\024\005\105\021\077" +
    "\023\114\024\112\025\110\026\075\055\074\056\103\060" +
    "\104\001\002\000\004\010\123\001\002\000\024\005\105" +
    "\021\077\023\114\024\112\025\110\026\075\055\074\056" +
    "\103\060\104\001\002\000\004\010\115\001\002\000\030" +
    "\005\uffb5\006\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025" +
    "\uffb5\026\uffb5\055\uffb5\056\uffb5\060\uffb5\001\002\000\026" +
    "\005\uffbb\006\uffbb\021\uffbb\023\uffbb\024\uffbb\025\uffbb\026" +
    "\uffbb\055\uffbb\056\uffbb\060\uffbb\001\002\000\030\005\uffc2" +
    "\006\uffc2\021\uffc2\022\120\023\uffc2\024\uffc2\025\uffc2\026" +
    "\uffc2\055\uffc2\056\uffc2\060\uffc2\001\002\000\024\005\105" +
    "\021\077\023\114\024\112\025\110\026\075\055\074\056" +
    "\103\060\104\001\002\000\030\005\uffb8\006\uffb8\021\uffb8" +
    "\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\055\uffb8\056" +
    "\uffb8\060\uffb8\001\002\000\026\005\uffba\006\uffba\021\uffba" +
    "\023\uffba\024\uffba\025\uffba\026\uffba\055\uffba\056\uffba\060" +
    "\uffba\001\002\000\030\005\uffb4\006\uffb4\021\uffb4\022\uffb4" +
    "\023\uffb4\024\uffb4\025\uffb4\026\uffb4\055\uffb4\056\uffb4\060" +
    "\uffb4\001\002\000\030\005\uffb7\006\uffb7\021\uffb7\022\uffb7" +
    "\023\uffb7\024\uffb7\025\uffb7\026\uffb7\055\uffb7\056\uffb7\060" +
    "\uffb7\001\002\000\026\005\uffb9\006\uffb9\021\uffb9\023\uffb9" +
    "\024\uffb9\025\uffb9\026\uffb9\055\uffb9\056\uffb9\060\uffb9\001" +
    "\002\000\016\016\137\033\135\060\104\061\133\063\144" +
    "\064\142\001\002\000\004\010\uffaf\001\002\000\016\016" +
    "\uff90\033\uff90\060\uff90\061\uff90\063\uff90\064\uff90\001\002" +
    "\000\004\010\132\001\002\000\030\005\uffb3\006\uffb3\021" +
    "\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\055\uffb3" +
    "\056\uffb3\060\uffb3\001\002\000\056\010\uff84\012\uff84\014" +
    "\uff84\031\uff84\032\uff84\035\uff84\036\uff84\037\uff84\040\uff84" +
    "\041\uff84\042\uff84\043\uff84\044\uff84\045\uff84\046\uff84\047" +
    "\uff84\050\uff84\051\uff84\052\uff84\053\uff84\054\uff84\062\uff84" +
    "\001\002\000\032\010\uff91\012\uff91\014\uff91\031\uff91\032" +
    "\uff91\035\uff91\036\uff91\037\uff91\040\uff91\041\uff91\042\uff91" +
    "\062\uff91\001\002\000\004\060\017\001\002\000\064\010" +
    "\uff7f\012\uff7f\013\175\014\uff7f\016\173\031\uff7f\032\uff7f" +
    "\034\177\035\uff7f\036\uff7f\037\uff7f\040\uff7f\041\uff7f\042" +
    "\uff7f\043\uff7f\044\uff7f\045\uff7f\046\uff7f\047\uff7f\050\uff7f" +
    "\051\uff7f\052\uff7f\053\uff7f\054\uff7f\062\uff7f\001\002\000" +
    "\020\016\uff8f\033\uff8f\044\130\060\uff8f\061\uff8f\063\uff8f" +
    "\064\uff8f\001\002\000\042\010\uff8b\012\uff8b\014\uff8b\031" +
    "\uff8b\032\uff8b\035\uff8b\036\uff8b\037\uff8b\040\uff8b\041\uff8b" +
    "\042\uff8b\043\uff8b\044\uff8b\045\uff8b\046\uff8b\062\uff8b\001" +
    "\002\000\042\010\uff8d\012\uff8d\014\uff8d\031\uff8d\032\uff8d" +
    "\035\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\042\uff8d\043" +
    "\162\044\165\045\164\046\163\062\uff8d\001\002\000\056" +
    "\010\uff83\012\uff83\014\uff83\031\uff83\032\uff83\035\uff83\036" +
    "\uff83\037\uff83\040\uff83\041\uff83\042\uff83\043\uff83\044\uff83" +
    "\045\uff83\046\uff83\047\uff83\050\uff83\051\uff83\052\uff83\053" +
    "\uff83\054\uff83\062\uff83\001\002\000\056\010\uff89\012\uff89" +
    "\014\uff89\031\uff89\032\uff89\035\uff89\036\uff89\037\uff89\040" +
    "\uff89\041\uff89\042\uff89\043\uff89\044\uff89\045\uff89\046\uff89" +
    "\047\152\050\154\051\150\052\153\053\155\054\147\062" +
    "\uff89\001\002\000\056\010\uff85\012\uff85\014\uff85\031\uff85" +
    "\032\uff85\035\uff85\036\uff85\037\uff85\040\uff85\041\uff85\042" +
    "\uff85\043\uff85\044\uff85\045\uff85\046\uff85\047\uff85\050\uff85" +
    "\051\uff85\052\uff85\053\uff85\054\uff85\062\uff85\001\002\000" +
    "\056\010\uff87\012\uff87\014\uff87\031\uff87\032\uff87\035\uff87" +
    "\036\uff87\037\uff87\040\uff87\041\uff87\042\uff87\043\uff87\044" +
    "\uff87\045\uff87\046\uff87\047\uff87\050\uff87\051\uff87\052\uff87" +
    "\053\uff87\054\uff87\062\uff87\001\002\000\016\016\137\033" +
    "\135\060\104\061\133\063\144\064\142\001\002\000\020" +
    "\016\uff65\033\uff65\044\uff65\060\uff65\061\uff65\063\uff65\064" +
    "\uff65\001\002\000\016\016\uff68\033\uff68\060\uff68\061\uff68" +
    "\063\uff68\064\uff68\001\002\000\016\016\137\033\135\060" +
    "\104\061\133\063\144\064\142\001\002\000\016\016\uff6a" +
    "\033\uff6a\060\uff6a\061\uff6a\063\uff6a\064\uff6a\001\002\000" +
    "\020\016\uff67\033\uff67\044\uff67\060\uff67\061\uff67\063\uff67" +
    "\064\uff67\001\002\000\016\016\uff69\033\uff69\060\uff69\061" +
    "\uff69\063\uff69\064\uff69\001\002\000\020\016\uff66\033\uff66" +
    "\044\uff66\060\uff66\061\uff66\063\uff66\064\uff66\001\002\000" +
    "\042\010\uff8a\012\uff8a\014\uff8a\031\uff8a\032\uff8a\035\uff8a" +
    "\036\uff8a\037\uff8a\040\uff8a\041\uff8a\042\uff8a\043\uff8a\044" +
    "\uff8a\045\uff8a\046\uff8a\062\uff8a\001\002\000\056\010\uff88" +
    "\012\uff88\014\uff88\031\uff88\032\uff88\035\uff88\036\uff88\037" +
    "\uff88\040\uff88\041\uff88\042\uff88\043\uff88\044\uff88\045\uff88" +
    "\046\uff88\047\uff88\050\uff88\051\uff88\052\uff88\053\uff88\054" +
    "\uff88\062\uff88\001\002\000\016\016\137\033\135\060\104" +
    "\061\133\063\144\064\142\001\002\000\016\016\137\033" +
    "\135\060\104\061\133\063\144\064\142\001\002\000\016" +
    "\016\uff6e\033\uff6e\060\uff6e\061\uff6e\063\uff6e\064\uff6e\001" +
    "\002\000\020\016\uff6b\033\uff6b\044\uff6b\060\uff6b\061\uff6b" +
    "\063\uff6b\064\uff6b\001\002\000\020\016\uff6c\033\uff6c\044" +
    "\uff6c\060\uff6c\061\uff6c\063\uff6c\064\uff6c\001\002\000\016" +
    "\016\uff6d\033\uff6d\060\uff6d\061\uff6d\063\uff6d\064\uff6d\001" +
    "\002\000\032\010\uff8e\012\uff8e\014\uff8e\031\uff8e\032\uff8e" +
    "\035\uff8e\036\uff8e\037\uff8e\040\uff8e\041\uff8e\042\uff8e\062" +
    "\uff8e\001\002\000\042\010\uff8c\012\uff8c\014\uff8c\031\uff8c" +
    "\032\uff8c\035\uff8c\036\uff8c\037\uff8c\040\uff8c\041\uff8c\042" +
    "\uff8c\043\uff8c\044\uff8c\045\uff8c\046\uff8c\062\uff8c\001\002" +
    "\000\004\062\171\001\002\000\056\010\uff81\012\uff81\014" +
    "\uff81\031\uff81\032\uff81\035\uff81\036\uff81\037\uff81\040\uff81" +
    "\041\uff81\042\uff81\043\uff81\044\uff81\045\uff81\046\uff81\047" +
    "\uff81\050\uff81\051\uff81\052\uff81\053\uff81\054\uff81\062\uff81" +
    "\001\002\000\056\010\uff80\012\uff80\014\uff80\031\uff80\032" +
    "\uff80\035\uff80\036\uff80\037\uff80\040\uff80\041\uff80\042\uff80" +
    "\043\uff80\044\uff80\045\uff80\046\uff80\047\uff80\050\uff80\051" +
    "\uff80\052\uff80\053\uff80\054\uff80\062\uff80\001\002\000\026" +
    "\003\205\012\uff98\016\uff8f\033\uff8f\044\130\060\uff8f\061" +
    "\uff8f\062\uff98\063\uff8f\064\uff8f\001\002\000\074\003\uff79" +
    "\010\uff79\011\uff79\012\uff79\013\uff79\014\uff79\016\uff79\027" +
    "\uff79\030\uff79\031\uff79\032\uff79\034\uff79\035\uff79\036\uff79" +
    "\037\uff79\040\uff79\041\uff79\042\uff79\043\uff79\044\uff79\045" +
    "\uff79\046\uff79\047\uff79\050\uff79\051\uff79\052\uff79\053\uff79" +
    "\054\uff79\062\uff79\001\002\000\022\003\201\016\uff8f\033" +
    "\uff8f\044\130\060\uff8f\061\uff8f\063\uff8f\064\uff8f\001\002" +
    "\000\056\010\uff86\012\uff86\014\uff86\031\uff86\032\uff86\035" +
    "\uff86\036\uff86\037\uff86\040\uff86\041\uff86\042\uff86\043\uff86" +
    "\044\uff86\045\uff86\046\uff86\047\uff86\050\uff86\051\uff86\052" +
    "\uff86\053\uff86\054\uff86\062\uff86\001\002\000\004\060\200" +
    "\001\002\000\074\003\uff7a\010\uff7a\011\uff7a\012\uff7a\013" +
    "\uff7a\014\uff7a\016\uff7a\027\uff7a\030\uff7a\031\uff7a\032\uff7a" +
    "\034\uff7a\035\uff7a\036\uff7a\037\uff7a\040\uff7a\041\uff7a\042" +
    "\uff7a\043\uff7a\044\uff7a\045\uff7a\046\uff7a\047\uff7a\050\uff7a" +
    "\051\uff7a\052\uff7a\053\uff7a\054\uff7a\062\uff7a\001\002\000" +
    "\004\014\204\001\002\000\004\014\203\001\002\000\074" +
    "\003\uff7c\010\uff7c\011\uff7c\012\uff7c\013\uff7c\014\uff7c\016" +
    "\uff7c\027\uff7c\030\uff7c\031\uff7c\032\uff7c\034\uff7c\035\uff7c" +
    "\036\uff7c\037\uff7c\040\uff7c\041\uff7c\042\uff7c\043\uff7c\044" +
    "\uff7c\045\uff7c\046\uff7c\047\uff7c\050\uff7c\051\uff7c\052\uff7c" +
    "\053\uff7c\054\uff7c\062\uff7c\001\002\000\074\003\uff7b\010" +
    "\uff7b\011\uff7b\012\uff7b\013\uff7b\014\uff7b\016\uff7b\027\uff7b" +
    "\030\uff7b\031\uff7b\032\uff7b\034\uff7b\035\uff7b\036\uff7b\037" +
    "\uff7b\040\uff7b\041\uff7b\042\uff7b\043\uff7b\044\uff7b\045\uff7b" +
    "\046\uff7b\047\uff7b\050\uff7b\051\uff7b\052\uff7b\053\uff7b\054" +
    "\uff7b\062\uff7b\001\002\000\004\062\213\001\002\000\006" +
    "\012\uff99\062\uff99\001\002\000\006\012\210\062\211\001" +
    "\002\000\020\016\uff8f\033\uff8f\044\130\060\uff8f\061\uff8f" +
    "\063\uff8f\064\uff8f\001\002\000\056\010\uff9e\012\uff9e\014" +
    "\uff9e\031\uff9e\032\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e" +
    "\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047" +
    "\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\062\uff9e" +
    "\001\002\000\006\012\uff9a\062\uff9a\001\002\000\056\010" +
    "\uff9d\012\uff9d\014\uff9d\031\uff9d\032\uff9d\035\uff9d\036\uff9d" +
    "\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045" +
    "\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d\052\uff9d\053\uff9d" +
    "\054\uff9d\062\uff9d\001\002\000\060\010\uff7d\012\uff7d\013" +
    "\175\014\uff7d\031\uff7d\032\uff7d\035\uff7d\036\uff7d\037\uff7d" +
    "\040\uff7d\041\uff7d\042\uff7d\043\uff7d\044\uff7d\045\uff7d\046" +
    "\uff7d\047\uff7d\050\uff7d\051\uff7d\052\uff7d\053\uff7d\054\uff7d" +
    "\062\uff7d\001\002\000\056\010\uff7e\012\uff7e\014\uff7e\031" +
    "\uff7e\032\uff7e\035\uff7e\036\uff7e\037\uff7e\040\uff7e\041\uff7e" +
    "\042\uff7e\043\uff7e\044\uff7e\045\uff7e\046\uff7e\047\uff7e\050" +
    "\uff7e\051\uff7e\052\uff7e\053\uff7e\054\uff7e\062\uff7e\001\002" +
    "\000\056\010\uff82\012\uff82\014\uff82\031\uff82\032\uff82\035" +
    "\uff82\036\uff82\037\uff82\040\uff82\041\uff82\042\uff82\043\uff82" +
    "\044\uff82\045\uff82\046\uff82\047\uff82\050\uff82\051\uff82\052" +
    "\uff82\053\uff82\054\uff82\062\uff82\001\002\000\026\005\105" +
    "\006\220\021\077\023\114\024\112\025\110\026\075\055" +
    "\074\056\103\060\104\001\002\000\030\005\uffb0\006\uffb0" +
    "\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\055" +
    "\uffb0\056\uffb0\060\uffb0\001\002\000\020\016\uff8f\033\uff8f" +
    "\044\130\060\uff8f\061\uff8f\063\uff8f\064\uff8f\001\002\000" +
    "\006\012\226\062\uffad\001\002\000\004\062\224\001\002" +
    "\000\004\010\225\001\002\000\030\005\uffb1\006\uffb1\021" +
    "\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\055\uffb1" +
    "\056\uffb1\060\uffb1\001\002\000\004\063\227\001\002\000" +
    "\004\062\uffac\001\002\000\030\005\uffb6\006\uffb6\021\uffb6" +
    "\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\055\uffb6\056" +
    "\uffb6\060\uffb6\001\002\000\024\003\233\016\uff8f\033\uff8f" +
    "\044\130\060\uff8f\061\uff8f\062\235\063\uff8f\064\uff8f\001" +
    "\002\000\012\010\uff96\031\uff96\032\243\062\uff96\001\002" +
    "\000\004\062\255\001\002\000\026\010\uff92\031\uff92\032" +
    "\uff92\035\252\036\245\037\250\040\246\041\247\042\251" +
    "\062\uff92\001\002\000\024\005\uffbe\021\uffbe\023\uffbe\024" +
    "\uffbe\025\uffbe\026\uffbe\055\uffbe\056\uffbe\060\uffbe\001\002" +
    "\000\006\031\240\062\241\001\002\000\012\010\uff94\031" +
    "\uff94\032\uff94\062\uff94\001\002\000\020\016\uff8f\033\uff8f" +
    "\044\130\060\uff8f\061\uff8f\063\uff8f\064\uff8f\001\002\000" +
    "\024\005\uffc0\021\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0" +
    "\055\uffc0\056\uffc0\060\uffc0\001\002\000\012\010\uff97\031" +
    "\uff97\032\243\062\uff97\001\002\000\020\016\uff8f\033\uff8f" +
    "\044\130\060\uff8f\061\uff8f\063\uff8f\064\uff8f\001\002\000" +
    "\012\010\uff95\031\uff95\032\uff95\062\uff95\001\002\000\020" +
    "\016\uff73\033\uff73\044\uff73\060\uff73\061\uff73\063\uff73\064" +
    "\uff73\001\002\000\020\016\uff71\033\uff71\044\uff71\060\uff71" +
    "\061\uff71\063\uff71\064\uff71\001\002\000\020\016\uff70\033" +
    "\uff70\044\uff70\060\uff70\061\uff70\063\uff70\064\uff70\001\002" +
    "\000\020\016\uff72\033\uff72\044\uff72\060\uff72\061\uff72\063" +
    "\uff72\064\uff72\001\002\000\020\016\uff6f\033\uff6f\044\uff6f" +
    "\060\uff6f\061\uff6f\063\uff6f\064\uff6f\001\002\000\020\016" +
    "\uff74\033\uff74\044\uff74\060\uff74\061\uff74\063\uff74\064\uff74" +
    "\001\002\000\020\016\uff8f\033\uff8f\044\130\060\uff8f\061" +
    "\uff8f\063\uff8f\064\uff8f\001\002\000\012\010\uff93\031\uff93" +
    "\032\uff93\062\uff93\001\002\000\024\005\uffbf\021\uffbf\023" +
    "\uffbf\024\uffbf\025\uffbf\026\uffbf\055\uffbf\056\uffbf\060\uffbf" +
    "\001\002\000\006\010\uff9f\062\uff9f\001\002\000\020\016" +
    "\uff76\033\uff76\044\uff76\060\uff76\061\uff76\063\uff76\064\uff76" +
    "\001\002\000\006\010\uffa2\062\uffa2\001\002\000\020\016" +
    "\uff8f\033\uff8f\044\130\060\uff8f\061\uff8f\063\uff8f\064\uff8f" +
    "\001\002\000\020\016\uff77\033\uff77\044\uff77\060\uff77\061" +
    "\uff77\063\uff77\064\uff77\001\002\000\020\016\uff75\033\uff75" +
    "\044\uff75\060\uff75\061\uff75\063\uff75\064\uff75\001\002\000" +
    "\006\010\uffa0\062\uffa0\001\002\000\006\010\uff9b\062\uff9b" +
    "\001\002\000\006\010\uffa1\062\uffa1\001\002\000\006\010" +
    "\uff9c\062\uff9c\001\002\000\010\003\272\010\uffa9\060\104" +
    "\001\002\000\004\010\275\001\002\000\006\010\uffaa\062" +
    "\274\001\002\000\004\010\uffab\001\002\000\024\005\uffbc" +
    "\021\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\055\uffbc\056" +
    "\uffbc\060\uffbc\001\002\000\024\003\277\010\uffa6\016\uff8f" +
    "\033\uff8f\044\130\060\uff8f\061\uff8f\063\uff8f\064\uff8f\001" +
    "\002\000\004\010\301\001\002\000\004\010\uffa7\001\002" +
    "\000\006\010\uffa8\031\240\001\002\000\010\003\302\060" +
    "\104\062\uffa3\001\002\000\004\062\uffa4\001\002\000\004" +
    "\062\uffa5\001\002\000\004\062\305\001\002\000\024\005" +
    "\uffbd\021\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\055\uffbd" +
    "\056\uffbd\060\uffbd\001\002\000\004\060\104\001\002\000" +
    "\010\013\175\034\177\062\310\001\002\000\004\010\311" +
    "\001\002\000\030\005\uffb2\006\uffb2\021\uffb2\022\uffb2\023" +
    "\uffb2\024\uffb2\025\uffb2\026\uffb2\055\uffb2\056\uffb2\060\uffb2" +
    "\001\002\000\004\010\322\001\002\000\006\010\uffc6\012" +
    "\uffc6\001\002\000\010\010\uffe9\012\uffe9\013\062\001\002" +
    "\000\006\010\317\012\316\001\002\000\004\060\314\001" +
    "\002\000\006\005\uffc9\060\uffc9\001\002\000\006\010\uffc7" +
    "\012\uffc7\001\002\000\006\010\uffeb\012\uffeb\001\002\000" +
    "\006\005\uffc8\060\uffc8\001\002\000\006\012\uffd2\062\uffd2" +
    "\001\002\000\006\012\uffcf\062\uffcf\001\002\000\004\060" +
    "\uffd4\001\002\000\004\060\uffd3\001\002\000\004\060\330" +
    "\001\002\000\004\016\uffd7\001\002\000\006\003\333\060" +
    "\314\001\002\000\014\003\ufff1\005\ufff1\007\ufff1\015\ufff1" +
    "\060\ufff1\001\002\000\006\010\uffec\012\uffec\001\002\000" +
    "\006\010\uffee\012\uffee\001\002\000\006\010\337\012\336" +
    "\001\002\000\006\003\340\060\314\001\002\000\014\003" +
    "\ufff0\005\ufff0\007\ufff0\015\ufff0\060\ufff0\001\002\000\006" +
    "\010\uffed\012\uffed\001\002\000\006\010\uffef\012\uffef\001" +
    "\002\000\012\003\uffe2\005\uffe2\006\uffe2\060\uffe2\001\002" +
    "\000\012\003\345\005\350\006\uffdb\060\017\001\002\000" +
    "\004\060\314\001\002\000\014\003\uffdf\005\uffdf\006\uffdf" +
    "\010\354\060\uffdf\001\002\000\012\003\uffe3\005\uffe3\006" +
    "\uffe3\060\uffe3\001\002\000\004\006\353\001\002\000\012" +
    "\006\uffd9\017\uffd9\020\uffd9\060\uffd9\001\002\000\012\006" +
    "\352\017\047\020\uffd5\060\uffd5\001\002\000\004\006\uffdc" +
    "\001\002\000\014\003\uffe8\005\uffe8\007\uffe8\015\uffe8\060" +
    "\uffe8\001\002\000\012\003\uffe0\005\uffe0\006\uffe0\060\uffe0" +
    "\001\002\000\006\010\uffdd\012\uffdd\001\002\000\006\010" +
    "\360\012\357\001\002\000\004\060\314\001\002\000\012" +
    "\003\uffe1\005\uffe1\006\uffe1\060\uffe1\001\002\000\006\010" +
    "\uffde\012\uffde\001\002\000\006\010\363\012\336\001\002" +
    "\000\014\003\ufff2\005\ufff2\007\ufff2\015\ufff2\060\ufff2\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\362\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\041\005\001\001\000\004\003\007\001\001\000\002" +
    "\001\001\000\016\005\013\006\021\007\011\010\014\042" +
    "\010\055\012\001\001\000\006\046\333\050\361\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\023\001\001\000\006\044\026\045\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\044\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\057\040" +
    "\001\001\000\002\001\001\000\004\042\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\014\047\052\051" +
    "\056\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\042\324\053\326\001\001\000\002" +
    "\001\001\000\010\015\053\020\054\042\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\047\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\322\042\055" +
    "\001\001\000\004\016\065\001\001\000\006\017\067\042" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\046\312\054\314\001\001\000\004\021\072\001\001\000" +
    "\020\022\077\023\105\024\106\026\112\027\110\033\100" +
    "\060\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\040\173\066\256\070\262\072\260\077\265\101\257" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\216\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\074\126\076\125\102\130\001\001\000\016" +
    "\023\123\024\124\026\112\027\110\033\100\060\075\001" +
    "\001\000\002\001\001\000\020\022\115\023\116\024\106" +
    "\026\112\027\110\033\100\060\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\023\120\024\121\026\112\027\110\033\100\060" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\060" +
    "\135\061\140\062\133\063\142\064\137\073\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\213\001\001\000\010\040\173\077\171\100\175\001" +
    "\001\000\006\074\167\076\125\001\001\000\002\001\001" +
    "\000\006\065\157\066\160\001\001\000\002\001\001\000" +
    "\006\067\145\070\150\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\060\135\073\156\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\060\135\063\142\064\155" +
    "\073\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\060\135\063\142\064\166\073\144\001" +
    "\001\000\016\060\135\061\140\062\165\063\142\064\137" +
    "\073\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\034\206\074\205\076\125\001\001\000\002" +
    "\001\001\000\006\074\201\076\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\074\211\076\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\040\214\075\215\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\022\077\023" +
    "\105\024\106\026\112\027\110\033\100\060\075\001\001" +
    "\000\002\001\001\000\010\025\222\074\221\076\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\035\235\036\231\037\236\074\233" +
    "\076\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\071\252\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\036\241\037\236\074\233\076" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\037\243\074\233\076\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\074" +
    "\253\076\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\074\266\076\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\030\270\033\272\060\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\031\275\035\277\036\231" +
    "\037\236\074\233\076\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\032\303\033\302" +
    "\060\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\060\306\001\001" +
    "\000\004\040\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\047\320" +
    "\001\001\000\002\001\001\000\004\046\317\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\046\333\050\334\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\340\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\342\001\001\000\010\012\345" +
    "\013\346\042\343\001\001\000\006\046\354\051\355\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\350\001\001\000\010\014\047\052\051\056" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\046" +
    "\360\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	SymbolTable.init(); // Universe scope

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol symbol = this.getScanner().next_token();
	if (symbol != null && symbol.value != null) 
		logger.debug(symbol.toString() + " " + symbol.value.toString());
	return symbol;

    }


	
	private Logger logger = MyLoggerFactory.getLogger(getClass());

	public Logger getLogger() {
		return logger;	
	}    

	
   	//redefined error functions  
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      report_error(message, info);
      done_parsing();
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("Syntax erorr: ", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatal error, cannot continue parsing, symbol: ", cur_token);
    }

    public void report_error(String message, Object info) {
        if (info != null && info instanceof Symbol) {
			Symbol currentSymbol = (Symbol) info;
			message += "at line: " + (currentSymbol.left + 1) + ", at column: " + (currentSymbol.right + 1);
			logger.info(message + ", current symbol: " + info.toString());
		} else {
			logger.info(message);
		}
		errorFound = true;
    }

    private boolean errorFound = false;

    public void report_semantic_error(String message, int lineNumber) {
    	report_error("Semantic error on line: " + lineNumber + ", " + message, null);
    	errorFound = true;
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


	//functions defined for counts
	private int globalVariableCount = 0;

	public int getGlobalVariableCount() {
		return globalVariableCount;
	}

	private int currentMethodVariableCount = 0;

	public void incrementCurrentMethodVariableCount() {
		currentMethodVariableCount++;
	}

	public void invalidateCurrentMethodVariableCount() {
		currentMethodVariableCount = 0;
	}
	
	public void incrementGlobalVariableCount() {
		globalVariableCount++;
	}

	private int mainVariableCount = 0;

	public int getMainVariableCount() {
		return mainVariableCount;
	}

	public void incrementMainVariableCount() {
		mainVariableCount += currentMethodVariableCount;
		currentMethodVariableCount = 0;
	}

	private static String MAIN = "main";
	
	public boolean isMain(String identifier) {
		return MAIN.equals(identifier);
	}

	private int constantCount = 0;

	public int getConstantCount() {
		return constantCount;
	}

	public void incrementConstantCount() {
		constantCount++;
	}

	private int globalArrayCount = 0;
	private int currentArrayCount = 0;

	public int getGlobalArrayCount() {
		return globalArrayCount;
	}

	public void incrementGlobalArrayCount() {
		globalArrayCount += currentArrayCount;
		currentArrayCount = 0;	
	}

	public void incrementCurrentArrayCount() {
		currentArrayCount++;
	}

	public void invalidateCurrentArrayCount() {
		currentArrayCount = 0;	
	}

	private int staticMethodCount = 0;
	private int nonStaticMethodCount = 0;
	private int currentNonStaticMethodCount = 0;

	public int getStaticMethodCount() { 
		return staticMethodCount;
	}

	public int getNonStaticMethodCount() { 
		return nonStaticMethodCount;
	}

	public int getGlobalMethodCount() {
		return currentNonStaticMethodCount;
	}

	public void incrementCurrentNonStaticMethodCount() {
		currentNonStaticMethodCount++;
	}

	public void incrementStaticMethodCount() {
		staticMethodCount++;
	}

	public void incrementNonStaticMethodCount() {
		nonStaticMethodCount += currentNonStaticMethodCount;
		currentNonStaticMethodCount = 0;
	}

	private int codeBlockCount = 0;
	private int currentMethodCallCount = 0;

	public int getCodeBlockCount() {
		return codeBlockCount;
	}

	public void incrementCodeBlockCount() {
		codeBlockCount++;
	}

	private int mainMethodCallCount = 0;

	public int getMainMethodCalls() {
		return mainMethodCallCount;
	}

	public void incrementCurrentMethodCallCount() {
		currentMethodCallCount++;
	}

	public void invalidateCurrentMethodCallCount() {
		currentMethodCallCount = 0;
	}

	public void incrementMainMethodCallCount() {
		mainMethodCallCount += currentMethodCallCount;
		currentMethodCallCount = 0;
	}

	private int formalArgumentsCount = 0;

	public int getFormalArgumentsCount() {
		return formalArgumentsCount;
	}

	public void incrementFormalArgumentsCount() {
		formalArgumentsCount++;
	}

	private int classDefinitionCount = 0;

	public int getClassDefinitionCount() {
		return classDefinitionCount;
	}

	public void incrementClassDefinitionCount() {
		classDefinitionCount++;
	}

	private int classVariableCount = 0;

	public int getClassVariableCount() {
		return classVariableCount;
	}

	public void incrementClassVariableCount() {
		classVariableCount ++;
	}

	void printSyntaxErrorDescription(String message) {
		parser.getLogger().info("Description: " + message);
	}

	//Semantic analysis

	private static final String THIS = "this";
	private static final String BRACKETS = "[]";
	private static final String EQUAL = "==";
	private static final String NOT_EQUAL = "!=";
	private static final String EQUALS = "=";
	private static final String PLUS_EQUALS = "+=";
	private static final String MINUS_EQUALS = "-=";
	private static final String TIMES_EQUALS = "*=";
	private static final String SOLIDUS_EQUALS = "/=";
	private static final String PERCENT_EQUALS = "%=";

	private int variablePosition = 0;
	
	private int formalParameterCount = 0;
	private Obj currentMethod = null;

	private Obj currentClass = null;
	private int classVariablePosition = 0;

	private Stack<List<Obj>> actualParametersStack = new Stack<>();

	private boolean returnFound = false;

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // MultiplicationOperatorRight ::= PERCENT_EQUALS 
            {
              String RESULT =null;
		 RESULT = "%="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicationOperatorRight",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // MultiplicationOperatorRight ::= SOLIDUS_EQUALS 
            {
              String RESULT =null;
		 RESULT = "/="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicationOperatorRight",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // MultiplicationOperatorRight ::= TIMES_EQUALS 
            {
              String RESULT =null;
		 RESULT = "*="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicationOperatorRight",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // MultiplicationOperatorLeft ::= PERCENT 
            {
              String RESULT =null;
		 RESULT = "%"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicationOperatorLeft",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // MultiplicationOperatorLeft ::= SOLIDUS 
            {
              String RESULT =null;
		 RESULT = "/"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicationOperatorLeft",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // MultiplicationOperatorLeft ::= TIMES 
            {
              String RESULT =null;
		 RESULT = "*"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicationOperatorLeft",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // AdditionOperatorRight ::= MINUS_EQUALS 
            {
              String RESULT =null;
		 RESULT = "-="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AdditionOperatorRight",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // AdditionOperatorRight ::= PLUS_EQUALS 
            {
              String RESULT =null;
		 RESULT = "+="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AdditionOperatorRight",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // AdditionOperatorLeft ::= MINUS 
            {
              String RESULT =null;
		 RESULT = "-"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AdditionOperatorLeft",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // AdditionOperatorLeft ::= PLUS 
            {
              String RESULT =null;
		 RESULT = "+"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AdditionOperatorLeft",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // RelationalOperator ::= LESS_OR_EQUAL_THAN 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalOperator",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // RelationalOperator ::= LESS_THAN 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalOperator",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // RelationalOperator ::= GREATER_OR_EQUAL_THAN 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalOperator",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // RelationalOperator ::= GREATER_THAN 
            {
              String RESULT =null;
		 RESULT = ">"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalOperator",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // RelationalOperator ::= NOT_EQUAL 
            {
              String RESULT =null;
		 RESULT = "!="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalOperator",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // RelationalOperator ::= EQUAL 
            {
              String RESULT =null;
		 RESULT = "=="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalOperator",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // AssignOperator ::= MultiplicationOperatorRight 
            {
              String RESULT =null;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String operator = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = operator;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOperator",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // AssignOperator ::= AdditionOperatorRight 
            {
              String RESULT =null;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String operator = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = operator;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOperator",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // AssignOperator ::= EQUALS 
            {
              String RESULT =null;
		
						RESULT = EQUALS;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOperator",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Designator ::= IDENTIFIER 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					//Semantic analysis
					Obj object = SymbolTable.find(name);
					if (object.equals(SymbolTable.noObj)) {
						if (THIS.equals(name)) {
							parser.report_semantic_error("Use of " + THIS + " outside of class non-static method", nameleft);
							RESULT = null;
						} else {
							parser.report_error("Use of undefined symbol " + name, nameleft);
							RESULT = null;
						}
					} else {	
						RESULT = object;
					}
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Designator",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Designator ::= Designator ArrayIndexer 
            {
              Obj RESULT =null;
		int objectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int objectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Obj object = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					//Semantic analysis
					if (object != null) {
						if(object.getType().getKind() != MyStruct.Array) {
							parser.report_semantic_error("Symbol " + object.getName() + " is not an array", objectleft);
							RESULT = null;
						} else if(object.getType().getElemType() == null) {
							parser.report_semantic_error("Internal error, array without an element type", objectleft);
							RESULT = null;
						} else {
							//Return temp object that represents and array element
							RESULT = new MyObj(MyObj.Elem, object.getName() + "[]", object.getType().getElemType());
						}
					} else {
						RESULT = null;
					}
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Designator",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Designator ::= Designator DOT IDENTIFIER 
            {
              Obj RESULT =null;
		int objectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int objectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Obj object = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					//Semantic analysis
					if (object != null) {
						if (object.getType().getKind() != MyStruct.Class) {
							parser.report_semantic_error("Symbol " + object.getName() + " is not of class type", objectleft);
							RESULT = null;
						} else {
							Obj member = null;
							//Check for member in base class
							//If object is THIS or we are invoking a static method of our own class we need to search in top scope because members are not associated with class node yet
							if (THIS.equals(object.getName()) || (currentClass != null && object.getKind() == MyObj.Type && object.getType().equals(currentClass.getType()))) {
								member = SymbolTable.currentScope.getOuter().findSymbol(name);
							} else {
								SymbolDataStructure members = object.getType().getMembersTable();
								member = members.searchKey(name);
							}

							//If we did not find it in base class we find it in parent class
							if (member == null) {
								Struct parent = object.getType().getElemType();
								while (parent != null && member == null) {
									SymbolDataStructure members = parent.getMembersTable();
									member = members.searchKey(name);
									if (member == null) {
										parent = parent.getElemType();
									}		
								}
							}

							if (member == null) {
								parser.report_semantic_error("Symbol " + object.getName() + " has no member of name " + name, objectleft);
								RESULT = null;
							} else if(object.getKind() == MyObj.Type && member.getKind() != MyObj.Static) {
								parser.report_semantic_error("Use of non-static method or varaible through class name symbol " + object.getName(), objectleft);
								RESULT = null;
							} else {
								RESULT = member;
							}
						}
					} else {
						RESULT = null;
					}
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Designator",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ArrayIndexer ::= LEFT_BRACKET error RIGHT_BRACKET 
            {
              Object RESULT =null;
		 printSyntaxErrorDescription("Incorrect expression for array index"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArrayIndexer",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ArrayIndexer ::= LEFT_BRACKET Expression RIGHT_BRACKET 
            {
              Object RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Obj expression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						if (expression != null) {
							if (!expression.getType().equals(SymbolTable.intType)) {
								parser.report_semantic_error("Array index is not of type int", expressionleft);
							}
						} else {
							parser.report_semantic_error("Internal error for ArrayIndexer production, expression is null", expressionleft);
						}
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArrayIndexer",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ArraySize ::= 
            {
              Boolean RESULT =null;
		
			  		RESULT = false;
			  	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArraySize",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ArraySize ::= ArrayIndexer 
            {
              Boolean RESULT =null;
		 
			  		RESULT = true;
			  	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArraySize",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OptionalParameters ::= 
            {
              List<Obj> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptionalParameters",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OptionalParameters ::= MethodCall 
            {
              List<Obj> RESULT =null;
		int parameterListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parameterListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Obj> parameterList = (List<Obj>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							if(parameterList == null) { 
								parser.report_semantic_error("Internal error, got null parameter list", parameterListleft);
								RESULT = null;
							} else {
								RESULT = parameterList;
							}
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptionalParameters",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Factor ::= LEFT_PARENTHESIS Expression RIGHT_PARENTHESIS 
            {
              Obj RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Factor ::= NEW Type ArraySize 
            {
              Obj RESULT =null;
		int typeObjectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeObjectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Obj typeObject = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int isArrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int isArrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean isArray = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		   		if (!isArray.booleanValue() && typeObject.getType().getKind() != MyStruct.Class) {
		   			parser.report_semantic_error("Cannot instantiate a object of non class type " + typeObject.getName(), typeObjectleft);
		   			RESULT = SymbolTable.noObj;
		   		} else {
		   			if(isArray.booleanValue()) {
		   				RESULT = new Obj(Obj.Type, typeObject.getName() + "[]", new MyStruct(MyStruct.Array, typeObject.getType()));
		   			} else {
		   				RESULT = typeObject;
		   			}
		   		}
		   	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Factor ::= BOOLEAN_CONSTANT 
            {
              Obj RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean value = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MyObj(Obj.Con, value.toString(), SymbolTable.boolType, value.booleanValue() ? 1 : 0, SymbolTable.getCurrentLevel()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Factor ::= CHARACTER_CONSTANT 
            {
              Obj RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MyObj(Obj.Con, value.toString(), SymbolTable.charType, (int)value.charAt(0), SymbolTable.getCurrentLevel()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Factor ::= NUMERICAL_CONSTANT 
            {
              Obj RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MyObj(Obj.Con, value.toString(), SymbolTable.intType, value.intValue(), SymbolTable.getCurrentLevel()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Factor ::= Designator OptionalParameters 
            {
              Obj RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int parameterListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parameterListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Obj> parameterList = (List<Obj>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				if (designator == null) {
					parser.report_semantic_error("Internal error, got null designator or parameter list", designatorleft);
					RESULT = SymbolTable.noObj;
				} else if (designator != null && designator.getKind() == MyObj.Global && designator.getKind() == MyObj.Meth && designator.getKind() == MyObj.Static && parameterList == null) {
					parser.report_semantic_error("Internal error, got null parameter list", designatorleft);
				} else {
					//Check types and number of paramaters
					if (designator.getKind() == MyObj.Global || designator.getKind() == MyObj.Meth || designator.getKind() == MyObj.Static) {
						if ((designator.getKind() != MyObj.Meth && parameterList.size() != designator.getLevel()) || (designator.getKind() == MyObj.Meth && parameterList.size() != (designator.getLevel() - 1))) {
							parser.report_semantic_error("Incorrect number of parameters in the invokation of " + designator.getName(), designatorleft);
						} else {
							Collection<Obj> functionLocals = designator.getLocalSymbols();
							Iterator<Obj> formalParameterIterator = functionLocals.iterator();

							//If MyObj.Meth skip this parameter
							if (designator.getKind() == MyObj.Meth) {
								formalParameterIterator.next();
							}
							Iterator<Obj> actualParameterIterator = parameterList.iterator();

							while (formalParameterIterator.hasNext() && actualParameterIterator.hasNext()) {
								Obj formalParameter = formalParameterIterator.next();
								Obj actualParameter = actualParameterIterator.next();

								if(!actualParameter.getType().assignableTo(formalParameter.getType())) {
									parser.report_semantic_error("Actual parameter " + actualParameter.getName() + " of type " + SymbolTable.getTypeName(actualParameter.getType()) + " is not assignable to formal parameter " + formalParameter.getName() + " of type " + SymbolTable.getTypeName(formalParameter.getType()), designatorleft);
								}
							}
						}
					}
					RESULT = designator;
				}
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // LeftAssociatedFactorList ::= Factor 
            {
              Obj RESULT =null;
		int factorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj factor = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
									if (factor != null) {
										RESULT = factor;
									} else {
										parser.report_semantic_error("Internal error, got null factor", factorleft);
										RESULT = SymbolTable.noObj;
									}
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LeftAssociatedFactorList",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // LeftAssociatedFactorList ::= LeftAssociatedFactorList MultiplicationOperatorLeft Factor 
            {
              Obj RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Obj expression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String operator = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int factorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj factor = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
									boolean error = false;
									if (expression == null || factor == null) {
										parser.report_semantic_error("Internal error, got null expression", factorleft);
										error = true;
									}

									if (expression != null && !expression.equals(SymbolTable.noObj) && (expression.getType().equals(SymbolTable.noType) || !expression.getType().equals(SymbolTable.intType))) {
										parser.report_semantic_error("Expression " + expression.getName() + " is not of type int", expressionleft);
										error = true;
									}

									if (factor != null && !factor.equals(SymbolTable.noObj) && (factor.getType().equals(SymbolTable.noType) || !factor.getType().equals(SymbolTable.intType))) {
										parser.report_semantic_error("Expression " + factor.getName() + " is not of type int", factorleft);
										error = true;
									}

									if(!error) {
										RESULT = new MyObj(MyObj.Var, expression.getName() + " " + operator + " " + factor.getName(), SymbolTable.intType);
									} else {
										RESULT = SymbolTable.noObj;
									}
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LeftAssociatedFactorList",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // RightAssociatedFactorList ::= LeftAssociatedFactorList 
            {
              Obj RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj expression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
									if (expression != null) {
										RESULT = expression;
									} else {
										parser.report_semantic_error("Internal error, got null expression", expressionleft);
										RESULT = SymbolTable.noObj;
									}
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RightAssociatedFactorList",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // RightAssociatedFactorList ::= LeftAssociatedFactorList MultiplicationOperatorRight RightAssociatedFactorList 
            {
              Obj RESULT =null;
		int leftExpressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leftExpressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Obj leftExpression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String operator = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rightExpressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rightExpressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj rightExpression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
									boolean error = false;
									if (rightExpression == null || leftExpression == null) {
										parser.report_semantic_error("Internal error, got null expression", leftExpressionleft);
										error = true;
									}

									if (leftExpression != null && !leftExpression.equals(SymbolTable.noObj) && (leftExpression.getType().equals(SymbolTable.noType) || !leftExpression.getType().equals(SymbolTable.intType))) {
										parser.report_semantic_error("Expression " + leftExpression.getName() + " is not of type int", leftExpressionleft);
										error = true;
									}

									if (rightExpression != null && !rightExpression.equals(SymbolTable.noObj) && (rightExpression.getType().equals(SymbolTable.noType) || !rightExpression.getType().equals(SymbolTable.intType))) {
										parser.report_semantic_error("Expression " + rightExpression.getName() + " is not of type int", rightExpressionleft);
										error = true;
									}

									if (leftExpression != null && leftExpression.getKind() != MyObj.Var && leftExpression.getKind() != MyObj.Fld && leftExpression.getKind() != MyObj.Elem) {
										parser.report_semantic_error("Left side is not a varaible, array element or class field", leftExpressionleft);
										error = true;
									}

									if(!error) {
										RESULT = new MyObj(MyObj.Var, leftExpression.getName() + " " + operator + " " + rightExpression.getName(), SymbolTable.intType);
									} else {
										RESULT = SymbolTable.noObj;
									}
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RightAssociatedFactorList",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // LeftAssociatedTermList ::= RightAssociatedFactorList 
            {
              Obj RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj expression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
								if (expression != null) {
									RESULT = expression;
								} else {
									parser.report_semantic_error("Internal error, got null expression", expressionleft);
									RESULT = SymbolTable.noObj;
								}
							
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LeftAssociatedTermList",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // LeftAssociatedTermList ::= LeftAssociatedTermList AdditionOperatorLeft RightAssociatedFactorList 
            {
              Obj RESULT =null;
		int leftExpressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leftExpressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Obj leftExpression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String operator = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rightExpressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rightExpressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj rightExpression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
								boolean error = false;
								if (rightExpression == null || leftExpression == null) {
									parser.report_semantic_error("Internal error, got null expression", leftExpressionleft);
									error = true;
								}

								if (leftExpression != null && !leftExpression.equals(SymbolTable.noObj) && (leftExpression.getType().equals(SymbolTable.noType) || !leftExpression.getType().equals(SymbolTable.intType))) {
									parser.report_semantic_error("Expression " + leftExpression.getName() + " is not of type int", leftExpressionleft);
									error = true;
								}

								if (rightExpression != null && !rightExpression.equals(SymbolTable.noObj) && (rightExpression.getType().equals(SymbolTable.noType) || !rightExpression.getType().equals(SymbolTable.intType))) {
									parser.report_semantic_error("Expression " + rightExpression.getName() + " is not of type int", rightExpressionleft);
									error = true;
								}

								if(!error) {
									RESULT = new MyObj(MyObj.Var, leftExpression.getName() + " " + operator + " " + rightExpression.getName(), SymbolTable.intType);
								} else {
									RESULT = SymbolTable.noObj;
								}
							
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LeftAssociatedTermList",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // RightAssociatedTermList ::= LeftAssociatedTermList 
            {
              Obj RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj expression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
								if (expression != null) {
									RESULT = expression;
								} else {
									parser.report_semantic_error("Internal error, got null expression", expressionleft);
									RESULT = SymbolTable.noObj;
								}
							
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RightAssociatedTermList",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // RightAssociatedTermList ::= LeftAssociatedTermList AdditionOperatorRight RightAssociatedTermList 
            {
              Obj RESULT =null;
		int leftExpressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leftExpressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Obj leftExpression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String operator = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rightExpressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rightExpressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj rightExpression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
								boolean error = false;
								if (rightExpression == null || leftExpression == null) {
									parser.report_semantic_error("Internal error, got null expression", leftExpressionleft);
									error = true;
								}

								if (leftExpression != null && !leftExpression.equals(SymbolTable.noObj) && (leftExpression.getType().equals(SymbolTable.noType) || !leftExpression.getType().equals(SymbolTable.intType))) {
									parser.report_semantic_error("Expression " + leftExpression.getName() + " is not of type int", leftExpressionleft);
									error = true;
								}

								if (rightExpression != null && !rightExpression.equals(SymbolTable.noObj) && (rightExpression.getType().equals(SymbolTable.noType) || !rightExpression.getType().equals(SymbolTable.intType))) {
									parser.report_semantic_error("Expression " + rightExpression.getName() + " is not of type int", rightExpressionleft);
									error = true;
								}

								if (leftExpression != null && leftExpression.getKind() != MyObj.Var && leftExpression.getKind() != MyObj.Fld && leftExpression.getKind() != MyObj.Elem) {
									parser.report_semantic_error("Left side is not a varaible, array element or class field", leftExpressionleft);
									error = true;
								}

								if(!error) {
									RESULT = new MyObj(MyObj.Var, leftExpression.getName() + " " + operator + " " + rightExpression.getName(), SymbolTable.intType);
								} else {
									RESULT = SymbolTable.noObj;
								}
							
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RightAssociatedTermList",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ExpressionPrefix ::= 
            {
              Boolean RESULT =null;
		
					 		RESULT = false;
					 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionPrefix",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ExpressionPrefix ::= MINUS 
            {
              Boolean RESULT =null;
		
							RESULT = true;
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionPrefix",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Expression ::= ExpressionPrefix RightAssociatedTermList 
            {
              Obj RESULT =null;
		int isNegatedleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int isNegatedright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Boolean isNegated = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj expression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					if (expression != null) {
						if (isNegated.booleanValue() && !expression.getType().equals(SymbolTable.intType)) {
							parser.report_semantic_error("Expression must be of type int if it is negated", expressionleft);
							RESULT = SymbolTable.noObj;
						} else {
							RESULT = expression;
						}
					} else {
						parser.report_semantic_error("Internal error, got null expression", expressionleft);
						RESULT = SymbolTable.noObj;
					}
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ConditionFact ::= Expression 
            {
              Object RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj expression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						if (expression == null) {
							parser.report_semantic_error("Internal error, got null expression", expressionleft);
						} else if (!expression.getType().equals(SymbolTable.boolType)) {
							parser.report_semantic_error("Expression " + expression.getName() + " is not of bool value", expressionleft);
						}
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConditionFact",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ConditionFact ::= Expression RelationalOperator Expression 
            {
              Object RESULT =null;
		int leftExpressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leftExpressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Obj leftExpression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String operator = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rightExpressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rightExpressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj rightExpression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						if (leftExpression == null || rightExpression == null) {
							parser.report_semantic_error("Internal error, got null expression", leftExpressionleft);
						}

						if (!leftExpression.getType().compatibleWith(rightExpression.getType())) {
							parser.report_semantic_error("Expression " + leftExpression.getName() + " and " + rightExpression.getName() + " are incompatible", leftExpressionleft);
						}

						if (leftExpression.getType().isRefType() && rightExpression.getType().isRefType() && !EQUAL.equals(operator) && !NOT_EQUAL.equals(operator)) {
							parser.report_semantic_error("Only " + EQUAL + " and " + NOT_EQUAL + " are aloved with referential types", operatorleft);
						}
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConditionFact",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ConditionTerm ::= ConditionFact 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConditionTerm",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ConditionTerm ::= ConditionTerm AND ConditionFact 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConditionTerm",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Condition ::= ConditionTerm 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condition",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Condition ::= Condition OR ConditionTerm 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condition",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ActualParameters ::= 
            {
              Object RESULT =null;
		
							actualParametersStack.push(new ArrayList<>());
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ActualParameters",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ActualParameters ::= Expression 
            {
              Object RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj expression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							List<Obj> parameters = new ArrayList<>();
							parameters.add(expression);
							actualParametersStack.push(parameters);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ActualParameters",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ActualParameters ::= ActualParameters COMA Expression 
            {
              Object RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj expression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							if (actualParametersStack.empty()) {
								parser.report_semantic_error("Internal error, got empty parameter list", expressionleft);
							} else {
								actualParametersStack.peek().add(expression);
							}
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ActualParameters",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // AssignOperation ::= error 
            {
              Obj RESULT =null;
		 
							printSyntaxErrorDescription("Incorrect asign operation syntax"); 
							RESULT = null;
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOperation",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // AssignOperation ::= AssignOperator Expression 
            {
              Obj RESULT =null;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String operator = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj expression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							if (expression == null) {
								parser.getLogger().debug("Internal error, got null expression", expressionleft);
								RESULT = null;
							} else {
								if (!expression.equals(SymbolTable.noObj) && !EQUALS.equals(operator) && !expression.getType().equals(SymbolTable.intType)) {
									parser.report_semantic_error("Expression " + expression.getName() + " musts be of type int when using combined operator " + operator, expressionleft);
								} 
								RESULT = expression;
							}
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOperation",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // MethodCall ::= LEFT_PARENTHESIS error RIGHT_PARENTHESIS 
            {
              List<Obj> RESULT =null;
		 printSyntaxErrorDescription("Incorrect actual parameter list syntax"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodCall",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // MethodCall ::= LEFT_PARENTHESIS ActualParameters RIGHT_PARENTHESIS 
            {
              List<Obj> RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			 		incrementCurrentMethodCallCount();

			 		if (actualParametersStack.isEmpty()) {
			 			parser.report_semantic_error("Internal error, empty actual parameter stack", tokenleft);
			 		} else {
			 			RESULT = actualParametersStack.pop();
			 		}
			 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodCall",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DesignatorStatement ::= Designator DECREMENT 
            {
              Object RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
							if (designator == null) {
								parser.report_semantic_error("Internal error, got null designator", designatorleft); 
							} else if (designator.getKind() != MyObj.Var && designator.getKind() != MyObj.Elem && designator.getKind() != MyObj.Fld) {
								parser.report_semantic_error("Designator " + designator.getName() + " must be a variable, array element or class field", designatorleft);
							} else if (!designator.getType().equals(SymbolTable.intType)) {
								parser.report_semantic_error("Designator " + designator.getName() + " must be of type int", designatorleft);
							}
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DesignatorStatement ::= Designator INCREMENT 
            {
              Object RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
							if (designator == null) {
								parser.report_semantic_error("Internal error, got null designator", designatorleft); 
							} else if (designator.getKind() != MyObj.Var && designator.getKind() != MyObj.Elem && designator.getKind() != MyObj.Fld) {
								parser.report_semantic_error("Designator " + designator.getName() + " must be a variable, array element or class field", designatorleft);
							} else if (!designator.getType().equals(SymbolTable.intType)) {
								parser.report_semantic_error("Designator " + designator.getName() + " must be of type int", designatorleft);
							}
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DesignatorStatement ::= Designator MethodCall 
            {
              Object RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int parameterListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parameterListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Obj> parameterList = (List<Obj>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							if (designator == null || parameterList == null) {
								parser.report_semantic_error("Internal error, got null for designator or parameters", designatorleft);
							} else if (designator.getKind() != MyObj.Global && designator.getKind() != MyObj.Static && designator.getKind() != MyObj.Meth) {
								parser.report_semantic_error("Symbol " + designator.getName() + " is not callable", designatorleft);
							} else {
								if ((designator.getKind() != MyObj.Meth && parameterList.size() != designator.getLevel()) || (designator.getKind() == MyObj.Meth && parameterList.size() != (designator.getLevel() - 1))) {
									parser.report_semantic_error("Incorrect number of parameters in the invokation of " + designator.getName(), designatorleft);
								} else {
									Collection<Obj> functionLocals = designator.getLocalSymbols();
									Iterator<Obj> formalParameterIterator = functionLocals.iterator();

									//If MyObj.Meth skip this parameter
									if (designator.getKind() == MyObj.Meth) {
										formalParameterIterator.next();
									}
									Iterator<Obj> actualParameterIterator = parameterList.iterator();

									while (formalParameterIterator.hasNext() && actualParameterIterator.hasNext()) {
										Obj formalParameter = formalParameterIterator.next();
										Obj actualParameter = actualParameterIterator.next();

										if(!actualParameter.getType().assignableTo(formalParameter.getType())) {
											parser.report_semantic_error("Actual parameter " + actualParameter.getName() + " of type " + SymbolTable.getTypeName(actualParameter.getType()) + " is not assignable to formal parameter " + formalParameter.getName() + " of type " + SymbolTable.getTypeName(formalParameter.getType()), designatorleft);
										}
									}
								}
							}
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DesignatorStatement ::= Designator AssignOperation 
            {
              Object RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj expression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							if (designator == null || expression == null) {
								parser.getLogger().debug("Internal error, got null designator or expression", expressionleft);
							} else if (designator.getKind() != MyObj.Var && designator.getKind() != MyObj.Elem && designator.getKind() != MyObj.Fld) {
								parser.report_semantic_error("Designator " + designator.getName() + " must be a variable, array element or class field", expressionleft);
							} else if (!expression.equals(SymbolTable.noObj) && !expression.getType().assignableTo(designator.getType())) {
								parser.report_semantic_error("Expression " + expression.getName() + " of type " + SymbolTable.getTypeName(expression.getType()) + " is not assignable to designator " + designator.getName() + " of type " + SymbolTable.getTypeName(designator.getType()), expressionleft);
							}
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ForPostStatement ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForPostStatement",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ForPostStatement ::= error 
            {
              Object RESULT =null;
		 printSyntaxErrorDescription("Incorrect post for loop statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForPostStatement",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ForPostStatement ::= DesignatorStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForPostStatement",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ForCondition ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForCondition",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ForCondition ::= error 
            {
              Object RESULT =null;
		 printSyntaxErrorDescription("Incorrect for condition statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForCondition",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ForCondition ::= Condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForCondition",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ForInitialStatement ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForInitialStatement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ForInitialStatement ::= error 
            {
              Object RESULT =null;
		 printSyntaxErrorDescription("Incorrect initial for loop statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForInitialStatement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ForInitialStatement ::= DesignatorStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForInitialStatement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // PrintParameters ::= Expression COMA NUMERICAL_CONSTANT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrintParameters",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PrintParameters ::= Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrintParameters",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ReturnValue ::= 
            {
              Obj RESULT =null;
		
					RESULT = SymbolTable.noObj;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnValue",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ReturnValue ::= Expression 
            {
              Obj RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj expression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = expression;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnValue",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // MatchedStatement ::= LEFT_BRACE StatementList RIGHT_BRACE 
            {
              Object RESULT =null;
		
					 		incrementCodeBlockCount();
					 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MatchedStatement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // MatchedStatement ::= PRINT LEFT_PARENTHESIS PrintParameters RIGHT_PARENTHESIS SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MatchedStatement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // MatchedStatement ::= READ LEFT_PARENTHESIS Designator RIGHT_PARENTHESIS SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MatchedStatement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // MatchedStatement ::= RETURN ReturnValue SEMICOLON 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Obj value = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					 		if (value == null) {
					 			parser.report_semantic_error("Internal expression, got null value", valueleft);
					 		} else if (currentMethod == null) {
					 			parser.report_semantic_error("Found returns statement outside of method", valueleft);
					 		} else if (currentMethod.getType().equals(SymbolTable.voidType) && !value.equals(SymbolTable.noObj)) {
					 			parser.report_semantic_error("Return statement must be empty for void type procedure " + currentMethod.getName(), valueleft);
					 		} else if (!currentMethod.getType().equals(SymbolTable.voidType) && value.equals(SymbolTable.noObj)) {
					 			parser.report_semantic_error("Empty return expression, must be of type " + SymbolTable.getTypeName(currentMethod.getType()), valueleft);
					 		} else if (!currentMethod.getType().equals(SymbolTable.voidType) && !value.getType().equals(currentMethod.getType())) {
					 			parser.report_semantic_error("Return type must be equivalent to " + SymbolTable.getTypeName(currentMethod.getType()), valueleft);
					 		} else {
					 			returnFound = true;
					 		}
					 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MatchedStatement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // MatchedStatement ::= CONTINUE SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MatchedStatement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // MatchedStatement ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MatchedStatement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // MatchedStatement ::= DesignatorStatement SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MatchedStatement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // MatchedStatement ::= ForHeader MatchedStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MatchedStatement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // MatchedStatement ::= IfHeader MatchedStatement ELSE MatchedStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MatchedStatement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // UnmatchedStatement ::= ForHeader UnmatchedStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnmatchedStatement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // UnmatchedStatement ::= IfHeader MatchedStatement ELSE UnmatchedStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnmatchedStatement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // UnmatchedStatement ::= IfHeader Statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnmatchedStatement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ForHeader ::= FOR LEFT_PARENTHESIS error RIGHT_PARENTHESIS 
            {
              Object RESULT =null;
		 printSyntaxErrorDescription("Incorrect for loop inner statements"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForHeader",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ForHeader ::= FOR LEFT_PARENTHESIS ForInitialStatement SEMICOLON ForCondition SEMICOLON ForPostStatement RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForHeader",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // IfHeader ::= IF LEFT_PARENTHESIS RIGHT_PARENTHESIS 
            {
              Object RESULT =null;
		 printSyntaxErrorDescription("Incorrect condition declaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfHeader",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // IfHeader ::= IF LEFT_PARENTHESIS error RIGHT_PARENTHESIS 
            {
              Object RESULT =null;
		 printSyntaxErrorDescription("Incorrect condition declaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfHeader",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // IfHeader ::= IF LEFT_PARENTHESIS Condition RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfHeader",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Statement ::= UnmatchedStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Statement ::= MatchedStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Type ::= IDENTIFIER 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Obj typeObject = SymbolTable.find(name);
				if (SymbolTable.noObj.equals(typeObject)) {
					parser.report_semantic_error("no type named: " + name, nameleft);
					RESULT = SymbolTable.noObj;
				} else if (Obj.Type != typeObject.getKind()) {
					parser.report_semantic_error("Name: " + name + " is not a type", nameleft);
					RESULT = SymbolTable.noObj;
				} else {
					RESULT = typeObject;
				}
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // MethodVariableList ::= Variable 
            {
              List<Variable> RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable variable = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
							incrementCurrentMethodVariableCount(); 

							//Semantic analysis
							RESULT = new ArrayList<Variable>();
							RESULT.add(variable);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodVariableList",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // MethodVariableList ::= MethodVariableList COMA Variable 
            {
              List<Variable> RESULT =null;
		int localsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int localsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Variable> locals = (List<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable variable = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
							incrementCurrentMethodVariableCount(); 

							//Semantic analysis
							locals.add(variable);
							RESULT = locals;
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodVariableList",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // MethodVariableDeclaration ::= Type error SEMICOLON 
            {
              Object RESULT =null;
		 printSyntaxErrorDescription("Incorrect local variable declaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodVariableDeclaration",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // MethodVariableDeclaration ::= Type MethodVariableList SEMICOLON 
            {
              Object RESULT =null;
		int typeObjectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeObjectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Obj typeObject = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int localsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int localsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Variable> locals = (List<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
									//Semantic analysis 
									if (typeObject != null && locals != null && typeObject.getType() != SymbolTable.noType) {
										for(Variable localVariable : locals) {
											if (SymbolTable.currentScope.findSymbol(localVariable.getName()) != null) {
												parser.report_semantic_error("Redefinition of name " + localVariable.getName(), typeObjectleft);
											} else {
												Obj newObject = null;
												if (localVariable.isArray()) {
													newObject = SymbolTable.insert(Obj.Var, localVariable.getName(), new MyStruct(Struct.Array, typeObject.getType()));
												} else {
													newObject = SymbolTable.insert(Obj.Var, localVariable.getName(), typeObject.getType());
												}

												if (newObject == SymbolTable.noObj) {
													parser.report_semantic_error("Could not insert symbol " + localVariable.getName() + " into symbol table", typeObjectleft);
												} else {
													newObject.setLevel(SymbolTable.getCurrentLevel());
													newObject.setFpPos(variablePosition);
													newObject.setAdr(variablePosition);
													variablePosition++;
												}
											}
										}
									}
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodVariableDeclaration",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // MethodVariableDeclarationList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodVariableDeclarationList",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // MethodVariableDeclarationList ::= error 
            {
              Object RESULT =null;
		 printSyntaxErrorDescription("Incorrect local variable declaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodVariableDeclarationList",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // MethodVariableDeclarationList ::= MethodVariableDeclarationList MethodVariableDeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodVariableDeclarationList",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FormalParameter ::= Type IDENTIFIER Brackets 
            {
              Object RESULT =null;
		int typeObjectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeObjectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Obj typeObject = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int isArrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int isArrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean isArray = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						incrementFormalArgumentsCount();
						
						//Semantic analysis
						//If the exists in the current scop then it is an error
						if (typeObject != null && typeObject.getType() != SymbolTable.noType) {
							if (SymbolTable.currentScope.findSymbol(name) != null) {
								parser.report_semantic_error("Redefinition of " + name, nameleft);
							} else {
								Obj newObject = null;
								if (isArray) {
									newObject = SymbolTable.insert(Obj.Var, name, new MyStruct(Struct.Array, typeObject.getType()));
								} else {
									newObject = SymbolTable.insert(Obj.Var, name, typeObject.getType());
								}

								if (newObject == SymbolTable.noObj) {
									parser.report_semantic_error("Could not insert symbol " + name + " into symbol table", nameleft);
								} else {
									newObject.setLevel(SymbolTable.getCurrentLevel());
									newObject.setFpPos(variablePosition);
									newObject.setAdr(variablePosition);
									variablePosition++;
									formalParameterCount++;
								}
							}
						}
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalParameter",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FormalParameterList ::= error 
            {
              Object RESULT =null;
		 printSyntaxErrorDescription("Incorrect formal parameter declaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalParameterList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FormalParameterList ::= FormalParameterList COMA error 
            {
              Object RESULT =null;
		 printSyntaxErrorDescription("Incorrect formal parameter declaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalParameterList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FormalParameterList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalParameterList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FormalParameterList ::= FormalParameter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalParameterList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FormalParameterList ::= FormalParameterList COMA FormalParameter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalParameterList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ReturnType ::= VOID 
            {
              Obj RESULT =null;
		
			   		RESULT = SymbolTable.find("void");
			   	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnType",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ReturnType ::= Type 
            {
              Obj RESULT =null;
		int typeObjectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeObjectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj typeObject = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			   		RESULT = typeObject;
			   	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnType",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // StaticModifier ::= 
            {
              Boolean RESULT =null;
		
				   		incrementCurrentNonStaticMethodCount();
				   		
				   		//Semantic analysis
						RESULT = false;
				   	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StaticModifier",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // StaticModifier ::= STATIC 
            {
              Boolean RESULT =null;
		int attributeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int attributeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object attribute = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						incrementStaticMethodCount();

						//Semantic analysis
						if (currentClass == null) {
							parser.report_semantic_error("Static method outside class", attributeleft);
							RESULT = false;
						} else {
							RESULT = true;
						}
						
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StaticModifier",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // MethodTypeAndName ::= StaticModifier ReturnType IDENTIFIER 
            {
              Object RESULT =null;
		int isStaticleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int isStaticright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Boolean isStatic = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int typeObjectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeObjectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Obj typeObject = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							//Semantic analysis
							if (typeObject.getType() != SymbolTable.noType) {
								if (SymbolTable.find(identifier) != SymbolTable.noObj) {
									parser.report_semantic_error("Redefinition of " + identifier, identifierleft);
								} else {
									if (currentClass == null && isStatic.booleanValue() == false) {
										currentMethod = SymbolTable.insert(MyObj.Global, identifier, typeObject.getType());
									} else {
										if (isStatic != null && isStatic.booleanValue()) {
											currentMethod = SymbolTable.insert(MyObj.Static, identifier, typeObject.getType());
										} else {
											currentMethod = SymbolTable.insert(Obj.Meth, identifier, typeObject.getType());
										}
									}
									
									if (currentMethod == SymbolTable.noObj) {
										currentMethod = null;
										parser.report_semantic_error("Could not insert symbol " + identifier + "into symbol talbe", identifierleft);
									} else {
										variablePosition = 0;
										formalParameterCount = 0;
										returnFound = false;

										SymbolTable.openScope();

										//If non-static method add this formal parameter
										if (currentClass != null && !isStatic.booleanValue()) {
											Obj newObject = SymbolTable.insert(MyObj.Var, THIS, currentClass.getType());

											if (newObject == SymbolTable.noObj) {
												parser.report_semantic_error("Could not insert symbol " + THIS + " into symbol table", identifierleft);
											} else {
												newObject.setLevel(SymbolTable.getCurrentLevel());
												newObject.setFpPos(variablePosition);
												newObject.setAdr(variablePosition);
												variablePosition++;
												formalParameterCount++;
											}
										}
									}
								}
							}
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodTypeAndName",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MethodDeclaration ::= MethodTypeAndName LEFT_PARENTHESIS FormalParameterList RIGHT_PARENTHESIS MethodVariableDeclarationList LEFT_BRACE StatementList RIGHT_BRACE 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
							if (currentMethod != null && isMain(currentMethod.getName())) {
								incrementMainVariableCount();
								incrementMainMethodCallCount();
							} else {
								invalidateCurrentMethodVariableCount();
								invalidateCurrentArrayCount();
								invalidateCurrentMethodCallCount();
							}
							incrementCodeBlockCount();

							//Semantic analysis
							if (currentMethod != null) {
								SymbolTable.chainLocalSymbols(currentMethod);
								SymbolTable.closeScope();

								currentMethod.setLevel(formalParameterCount);
								
								if (!currentMethod.getType().equals(SymbolTable.voidType) && !returnFound) {
									parser.report_semantic_error("No return statement found for procedure " + currentMethod.getName(), tokenleft);
								}
							}

							currentMethod = null;
							variablePosition = 0;
							formalParameterCount = 0;
							returnFound = false;
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDeclaration",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MethodDeclarationList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDeclarationList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MethodDeclarationList ::= MethodDeclarationList MethodDeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDeclarationList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ClassMethodList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassMethodList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ClassMethodList ::= LEFT_BRACE MethodDeclarationList RIGHT_BRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassMethodList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ClassVariableList ::= Variable 
            {
              List<Variable> RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable variable = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
							incrementClassVariableCount(); 

							//Semantic analysis
							RESULT = new ArrayList<Variable>();
							RESULT.add(variable);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassVariableList",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ClassVariableList ::= ClassVariableList COMA Variable 
            {
              List<Variable> RESULT =null;
		int variablesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int variablesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Variable> variables = (List<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable variable = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
							incrementClassVariableCount(); 

							//Semantic analysis
							variables.add(variable);
							RESULT = variables;
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassVariableList",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ClassVariableDeclaration ::= error 
            {
              Object RESULT =null;
		 printSyntaxErrorDescription("Incorrect class variable declaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassVariableDeclaration",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ClassVariableDeclaration ::= error SEMICOLON 
            {
              Object RESULT =null;
		 printSyntaxErrorDescription("Incorrect class variable declaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassVariableDeclaration",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ClassVariableDeclaration ::= Type ClassVariableList SEMICOLON 
            {
              Object RESULT =null;
		int typeObjectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeObjectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Obj typeObject = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int variablesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int variablesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Variable> variables = (List<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
									//Semantic analysis
									if (typeObject != null && variables != null && typeObject.getType() != SymbolTable.noType) {
										for(Variable variable : variables) {
											if(SymbolTable.currentScope.findSymbol(variable.getName()) != null) {
												parser.report_semantic_error("Redefinition of name " + variable.getName(), typeObjectleft);
											} else {
												Obj newObject = null;
												if (variable.isArray()) {
													newObject = SymbolTable.insert(Obj.Fld, variable.getName(), new MyStruct(MyStruct.Array, typeObject.getType()));
												} else {
													newObject = SymbolTable.insert(Obj.Fld, variable.getName(), typeObject.getType());
												}
												if (newObject != null && newObject != SymbolTable.noObj) {
													newObject.setAdr(classVariablePosition);
													newObject.setLevel(SymbolTable.getCurrentLevel());
													classVariablePosition++;
												} else {
													parser.report_semantic_error("Could not insert symbol: " + variable.getName() + " into symbol table", typeObjectleft);
												}
											}
										}
									}
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassVariableDeclaration",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ClassVariableDeclarationList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassVariableDeclarationList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ClassVariableDeclarationList ::= ClassVariableDeclarationList ClassVariableDeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassVariableDeclarationList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ParentClassDeclaration ::= error 
            {
              Obj RESULT =null;
		 printSyntaxErrorDescription("Incorrect declaration of parent class"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParentClassDeclaration",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ParentClassDeclaration ::= 
            {
              Obj RESULT =null;
		
						   		RESULT = SymbolTable.noObj;
						   	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParentClassDeclaration",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ParentClassDeclaration ::= EXTENDS Type 
            {
              Obj RESULT =null;
		int typeObjectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeObjectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj typeObject = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						   		//Semantic analysis
						   		if (typeObject.getType() != SymbolTable.noType) {
						   			if (typeObject.getType().getKind() != Struct.Class) {
						   				parser.report_semantic_error("Name " + typeObject.getName() + " is not a class type", typeObjectleft);
						   				
						   				RESULT = SymbolTable.noObj;
						   			} else {
						   				RESULT = typeObject;
						   			}
						   		}
						   	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParentClassDeclaration",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ClassHeader ::= CLASS IDENTIFIER ParentClassDeclaration 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int typeObjectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeObjectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj typeObject = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					if (SymbolTable.find(name) != SymbolTable.noObj) {
						parser.report_semantic_error("Redefinition of " + name, nameleft);
					} else {
						if (typeObject != null && typeObject.getType() != SymbolTable.noType) {
							currentClass = SymbolTable.insert(Obj.Type, name, new MyStruct(MyStruct.Class, typeObject.getType()));
						} else {
							currentClass = SymbolTable.insert(Obj.Type, name, new MyStruct(MyStruct.Class));
						}

						if (currentClass == null || currentClass.equals(SymbolTable.noObj)) {
							parser.report_semantic_error("Could not insert name " + name + " into symbol table", nameleft);
						} else {
							SymbolTable.openScope();
							classVariablePosition = 0;
						}
					}
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassHeader",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ClassDeclaration ::= ClassHeader LEFT_BRACE ClassVariableDeclarationList ClassMethodList RIGHT_BRACE 
            {
              Object RESULT =null;
		
						 	incrementNonStaticMethodCount();
						 	incrementClassDefinitionCount();

						 	//Semantic analysis
						 	if (currentClass != null) {
						 		SymbolTable.chainLocalSymbols(currentClass.getType());
						 		SymbolTable.closeScope();
						 	}

						 	classVariablePosition = 0;
						 	currentClass = null;
						 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Brackets ::= 
            {
              Boolean RESULT =null;
		
			 		RESULT = false;
			 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Brackets",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Brackets ::= LEFT_BRACKET RIGHT_BRACKET 
            {
              Boolean RESULT =null;
		
					incrementCurrentArrayCount();
					RESULT = true;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Brackets",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Variable ::= IDENTIFIER Brackets 
            {
              Variable RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int isArrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int isArrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean isArray = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Variable(name, isArray);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Variable",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // GlobalVariableList ::= error 
            {
              List<Variable> RESULT =null;
		 printSyntaxErrorDescription("Incorrect global variable declaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalVariableList",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // GlobalVariableList ::= GlobalVariableList COMA error 
            {
              List<Variable> RESULT =null;
		 printSyntaxErrorDescription("Incorrect global variable declaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalVariableList",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // GlobalVariableList ::= Variable 
            {
              List<Variable> RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable variable = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
				 			incrementGlobalVariableCount(); 

				 			//Semantic analysis
				 			RESULT = new ArrayList<Variable>();
				 			RESULT.add(variable);
				 		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalVariableList",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // GlobalVariableList ::= GlobalVariableList COMA Variable 
            {
              List<Variable> RESULT =null;
		int globalVariablesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int globalVariablesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Variable> globalVariables = (List<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable variable = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
							incrementGlobalVariableCount(); 

							//Semantic analysis
							globalVariables.add(variable);
							RESULT = globalVariables;
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalVariableList",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // GlobalVariableDeclaration ::= error COMA GlobalVariableList SEMICOLON 
            {
              Object RESULT =null;
		 printSyntaxErrorDescription("Incorrect global variable declaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalVariableDeclaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // GlobalVariableDeclaration ::= error SEMICOLON 
            {
              Object RESULT =null;
		 printSyntaxErrorDescription("Incorrect global variable list declaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalVariableDeclaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // GlobalVariableDeclaration ::= Type GlobalVariableList SEMICOLON 
            {
              Object RESULT =null;
		int typeObjectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeObjectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Obj typeObject = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int globalVariablesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int globalVariablesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Variable> globalVariables = (List<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
									//Semantic analysis
									if (typeObject != null && globalVariables != null && typeObject.getType() != SymbolTable.noType) {
										for(Variable variable : globalVariables) {
											if(SymbolTable.find(variable.getName()) != SymbolTable.noObj) {
												parser.report_semantic_error("Redefinition of name " + variable.getName(), typeObjectleft);
											} else {
												Obj newObject = null;
												if (variable.isArray()) {
													newObject = SymbolTable.insert(Obj.Var, variable.getName(), new MyStruct(MyStruct.Array, typeObject.getType()));
												} else {
													newObject = SymbolTable.insert(Obj.Var, variable.getName(), typeObject.getType());
												}
												if (newObject != null && newObject != SymbolTable.noObj) {
													newObject.setAdr(variablePosition);
													newObject.setLevel(SymbolTable.getCurrentLevel());
													variablePosition++;
												} else {
													parser.report_semantic_error("Could not insert symbol: " + variable.getName() + " into symbol table", typeObjectleft);
												}
											}
										}
									}
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalVariableDeclaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Value ::= BOOLEAN_CONSTANT 
            {
              Value RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean value = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		  		RESULT = new Value(SymbolTable.boolType, value.booleanValue() ? 1 : 0);
		  	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Value ::= CHARACTER_CONSTANT 
            {
              Value RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		  		RESULT = new Value(SymbolTable.charType, (int)value.charAt(0));
		  	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Value ::= NUMERICAL_CONSTANT 
            {
              Value RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		  		RESULT = new Value(SymbolTable.intType, value.intValue());
		  	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Constant ::= IDENTIFIER EQUALS Value 
            {
              Constant RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Value value = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Constant(name, value);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ConstantList ::= Constant 
            {
              List<Constant> RESULT =null;
		int constantleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Constant constant = (Constant)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
				 		incrementConstantCount();

				 		//Semantic analysis
				 		List<Constant> constants = new ArrayList<Constant>();
				 		constants.add(constant);
				 		RESULT = constants;
				 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstantList",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ConstantList ::= ConstantList COMA Constant 
            {
              List<Constant> RESULT =null;
		int constantsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int constantsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Constant> constants = (List<Constant>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int constantleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Constant constant = (Constant)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
						incrementConstantCount(); 

						//Semantic analysis
						constants.add(constant);
						RESULT = constants;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstantList",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ConstantDeclaration ::= CONST Type ConstantList SEMICOLON 
            {
              Object RESULT =null;
		int typeObjectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeObjectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Obj typeObject = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int constantsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int constantsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Constant> constants = (List<Constant>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
							if (typeObject != null && constants != null && typeObject.getType() != SymbolTable.noType) {
								for(Constant constant : constants) {
									if (!typeObject.getType().assignableTo(constant.getValue().getType())) {
										parser.report_semantic_error("Value " + constant.getValue() + " is not of type " + typeObject.getName(), typeObjectleft);
									} else if (SymbolTable.find(constant.getName()) != SymbolTable.noObj) {
												parser.report_semantic_error("Redefinition of name " + constant.getName(), typeObjectleft);		
									} else {
										Obj newObject = SymbolTable.insert(Obj.Con, constant.getName(), typeObject.getType());
										if (newObject != null && newObject != SymbolTable.noObj) {
											newObject.setAdr(constant.getValue().getValue());
										} else {
											parser.report_semantic_error("Could not insert symbol: " + constant.getName() + " into symbol table", typeObjectleft);
										}
									}
								}
							}
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstantDeclaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NonMethodDeclaration ::= ClassDeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NonMethodDeclaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NonMethodDeclaration ::= GlobalVariableDeclaration 
            {
              Object RESULT =null;
		 incrementGlobalArrayCount(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NonMethodDeclaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NonMethodDeclaration ::= ConstantDeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NonMethodDeclaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NonMethodDeclarationList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NonMethodDeclarationList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NonMethodDeclarationList ::= NonMethodDeclarationList NonMethodDeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NonMethodDeclarationList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgramName ::= IDENTIFIER 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT  = SymbolTable.insert(Obj.Prog, name, SymbolTable.noType);
					SymbolTable.openScope();
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProgramName",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROGRAM ProgramName NonMethodDeclarationList LEFT_BRACE MethodDeclarationList RIGHT_BRACE 
            {
              Object RESULT =null;
		int programObjectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int programObjectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Obj programObject = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
				if (SymbolTable.currentScope.findSymbol(MAIN) == null) {
					parser.report_semantic_error("No main symbol found", programObjectleft);
				} 
				SymbolTable.chainLocalSymbols(programObject);
				SymbolTable.closeScope();
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

