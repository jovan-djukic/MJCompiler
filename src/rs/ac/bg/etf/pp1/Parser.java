
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jan 12 22:48:41 CET 2017
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.logging.log4j.Logger;
import rs.ac.bg.etf.pp1.utilities.MyLoggerFactory;
import java.util.*;
import rs.etf.pp1.symboltable.concepts.*;
import rs.etf.pp1.symboltable.structure.*;
import rs.ac.bg.etf.utilities.*;
import rs.etf.pp1.mj.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jan 12 22:48:41 CET 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\244\000\002\002\010\000\002\002\004\000\002\036" +
    "\003\000\002\003\004\000\002\003\002\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\006\006\000" +
    "\002\042\005\000\002\042\003\000\002\041\005\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\007" +
    "\005\000\002\007\004\000\002\007\006\000\002\045\005" +
    "\000\002\045\003\000\002\045\005\000\002\045\003\000" +
    "\002\043\004\000\002\044\004\000\002\044\002\000\002" +
    "\010\007\000\002\054\005\000\002\056\004\000\002\056" +
    "\002\000\002\056\003\000\002\011\004\000\002\011\002" +
    "\000\002\012\005\000\002\012\004\000\002\012\003\000" +
    "\002\046\005\000\002\046\003\000\002\013\005\000\002" +
    "\013\002\000\002\004\004\000\002\004\002\000\002\014" +
    "\007\000\002\016\003\000\002\047\010\000\002\055\003" +
    "\000\002\055\002\000\002\052\003\000\002\052\003\000" +
    "\002\051\005\000\002\051\003\000\002\051\002\000\002" +
    "\051\005\000\002\051\003\000\002\050\005\000\002\015" +
    "\004\000\002\015\002\000\002\017\005\000\002\017\004" +
    "\000\002\017\003\000\002\053\005\000\002\053\003\000" +
    "\002\037\003\000\002\020\004\000\002\020\002\000\002" +
    "\021\003\000\002\021\003\000\002\026\006\000\002\026" +
    "\006\000\002\026\005\000\002\027\012\000\002\027\006" +
    "\000\002\023\004\000\002\023\006\000\002\023\004\000" +
    "\002\022\006\000\002\022\004\000\002\022\004\000\002" +
    "\022\004\000\002\022\004\000\002\022\005\000\002\022" +
    "\007\000\002\022\007\000\002\022\005\000\002\100\003" +
    "\000\002\100\002\000\002\024\003\000\002\024\005\000" +
    "\002\030\003\000\002\030\003\000\002\030\002\000\002" +
    "\031\003\000\002\031\003\000\002\031\002\000\002\032" +
    "\003\000\002\032\003\000\002\032\002\000\002\033\003" +
    "\000\002\033\004\000\002\033\004\000\002\033\004\000" +
    "\002\076\005\000\002\076\005\000\002\104\002\000\002" +
    "\025\006\000\002\025\004\000\002\034\005\000\002\034" +
    "\003\000\002\034\002\000\002\101\005\000\002\101\003" +
    "\000\002\102\005\000\002\102\003\000\002\103\005\000" +
    "\002\103\003\000\002\073\004\000\002\075\003\000\002" +
    "\075\002\000\002\105\002\000\002\061\006\000\002\061" +
    "\003\000\002\106\002\000\002\063\006\000\002\063\003" +
    "\000\002\107\002\000\002\060\006\000\002\060\003\000" +
    "\002\110\002\000\002\062\006\000\002\062\003\000\002" +
    "\072\004\000\002\072\003\000\002\072\003\000\002\072" +
    "\003\000\002\072\005\000\002\072\005\000\002\077\003" +
    "\000\002\077\002\000\002\074\003\000\002\074\002\000" +
    "\002\035\005\000\002\035\005\000\002\057\005\000\002" +
    "\111\002\000\002\057\005\000\002\057\003\000\002\071" +
    "\003\000\002\071\003\000\002\071\003\000\002\070\003" +
    "\000\002\070\003\000\002\070\003\000\002\070\003\000" +
    "\002\070\003\000\002\070\003\000\002\064\003\000\002" +
    "\064\003\000\002\065\003\000\002\065\003\000\002\066" +
    "\003\000\002\066\003\000\002\066\003\000\002\067\003" +
    "\000\002\067\003\000\002\067\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\370\000\004\004\005\001\002\000\004\002\372\001" +
    "\002\000\004\060\007\001\002\000\014\003\ufffd\005\ufffd" +
    "\007\ufffd\015\ufffd\060\ufffd\001\002\000\014\003\uffff\005" +
    "\uffff\007\uffff\015\uffff\060\uffff\001\002\000\014\003\016" +
    "\005\020\007\023\015\021\060\017\001\002\000\006\003" +
    "\341\060\103\001\002\000\014\003\ufffb\005\ufffb\007\ufffb" +
    "\015\ufffb\060\ufffb\001\002\000\004\005\350\001\002\000" +
    "\014\003\ufffe\005\ufffe\007\ufffe\015\ufffe\060\ufffe\001\002" +
    "\000\014\003\ufffa\005\ufffa\007\ufffa\015\ufffa\060\ufffa\001" +
    "\002\000\006\010\340\012\337\001\002\000\066\003\uffc4" +
    "\005\uffc4\010\uffc4\012\uffc4\013\uffc4\014\uffc4\031\uffc4\032" +
    "\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4" +
    "\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051" +
    "\uffc4\052\uffc4\053\uffc4\054\uffc4\060\uffc4\062\uffc4\001\002" +
    "\000\012\006\uffd9\017\uffd9\020\uffd9\060\uffd9\001\002\000" +
    "\004\060\040\001\002\000\014\003\ufffc\005\ufffc\007\ufffc" +
    "\015\ufffc\060\ufffc\001\002\000\004\060\017\001\002\000" +
    "\004\060\025\001\002\000\004\011\033\001\002\000\006" +
    "\010\031\012\030\001\002\000\006\010\ufff7\012\ufff7\001" +
    "\002\000\004\060\025\001\002\000\014\003\ufff9\005\ufff9" +
    "\007\ufff9\015\ufff9\060\ufff9\001\002\000\006\010\ufff8\012" +
    "\ufff8\001\002\000\010\061\037\063\036\064\034\001\002" +
    "\000\006\010\ufff3\012\ufff3\001\002\000\006\010\ufff6\012" +
    "\ufff6\001\002\000\006\010\ufff5\012\ufff5\001\002\000\006" +
    "\010\ufff4\012\ufff4\001\002\000\010\003\043\005\uffe5\057" +
    "\042\001\002\000\004\005\uffe7\001\002\000\004\060\017" +
    "\001\002\000\004\005\uffe4\001\002\000\004\005\uffe6\001" +
    "\002\000\012\006\047\017\046\020\uffd4\060\uffd4\001\002" +
    "\000\006\020\uffd5\060\uffd5\001\002\000\004\002\001\001" +
    "\002\000\012\006\uffda\017\uffda\020\uffda\060\uffda\001\002" +
    "\000\010\003\uffca\005\uffca\060\uffca\001\002\000\006\020" +
    "\054\060\017\001\002\000\004\060\uffd3\001\002\000\004" +
    "\060\uffd2\001\002\000\004\060\056\001\002\000\004\016" +
    "\057\001\002\000\012\003\063\012\uffcf\060\017\062\uffcf" +
    "\001\002\000\004\060\070\001\002\000\006\012\064\062" +
    "\065\001\002\000\006\012\uffd0\062\uffd0\001\002\000\006" +
    "\012\uffcd\062\uffcd\001\002\000\006\003\067\060\017\001" +
    "\002\000\010\003\uffd6\005\uffd6\060\uffd6\001\002\000\006" +
    "\012\uffd1\062\uffd1\001\002\000\006\012\uffce\062\uffce\001" +
    "\002\000\010\012\uffe9\013\072\062\uffe9\001\002\000\006" +
    "\012\uffcc\062\uffcc\001\002\000\004\014\073\001\002\000" +
    "\010\010\uffea\012\uffea\062\uffea\001\002\000\004\005\111" +
    "\001\002\000\010\003\100\005\uffd7\060\017\001\002\000" +
    "\010\003\uffcb\005\uffcb\060\uffcb\001\002\000\004\060\103" +
    "\001\002\000\012\003\uffc7\005\uffc7\010\101\060\uffc7\001" +
    "\002\000\010\003\uffc8\005\uffc8\060\uffc8\001\002\000\006" +
    "\010\uffc5\012\uffc5\001\002\000\010\010\uffe9\012\uffe9\013" +
    "\072\001\002\000\006\010\106\012\105\001\002\000\004" +
    "\060\103\001\002\000\010\003\uffc9\005\uffc9\060\uffc9\001" +
    "\002\000\006\010\uffc6\012\uffc6\001\002\000\006\010\uffeb" +
    "\012\uffeb\001\002\000\026\005\uffc2\006\uffc2\021\uffc2\023" +
    "\uffc2\024\uffc2\025\uffc2\026\uffc2\055\uffc2\056\uffc2\060\uffc2" +
    "\001\002\000\026\005\116\006\132\021\123\023\126\024" +
    "\115\025\120\026\133\055\114\056\127\060\121\001\002" +
    "\000\032\003\332\011\333\013\uff73\016\242\027\325\030" +
    "\330\034\245\045\221\046\220\052\231\053\232\054\227" +
    "\001\002\000\004\016\321\001\002\000\004\010\320\001" +
    "\002\000\026\005\uffc2\006\uffc2\021\uffc2\023\uffc2\024\uffc2" +
    "\025\uffc2\026\uffc2\055\uffc2\056\uffc2\060\uffc2\001\002\000" +
    "\004\010\315\001\002\000\022\010\uffad\016\uff8d\033\uff8d" +
    "\044\152\060\uff8d\061\uff8d\063\uff8d\064\uff8d\001\002\000" +
    "\074\003\uff71\010\uff71\011\uff71\012\uff71\013\uff71\014\uff71" +
    "\016\uff71\027\uff71\030\uff71\031\uff71\032\uff71\034\uff71\035" +
    "\uff71\036\uff71\037\uff71\040\uff71\041\uff71\042\uff71\043\uff71" +
    "\044\uff71\045\uff71\046\uff71\047\uff71\050\uff71\051\uff71\052" +
    "\uff71\053\uff71\054\uff71\062\uff71\001\002\000\026\005\uffc0" +
    "\006\uffc0\021\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\055" +
    "\uffc0\056\uffc0\060\uffc0\001\002\000\004\016\304\001\002" +
    "\000\006\010\uffa1\062\uffa1\001\002\000\024\005\116\021" +
    "\123\023\126\024\115\025\120\026\133\055\114\056\127" +
    "\060\121\001\002\000\004\010\276\001\002\000\004\016" +
    "\267\001\002\000\026\005\uffc3\006\uffc3\021\uffc3\023\uffc3" +
    "\024\uffc3\025\uffc3\026\uffc3\055\uffc3\056\uffc3\060\uffc3\001" +
    "\002\000\026\005\uffc1\006\uffc1\021\uffc1\023\uffc1\024\uffc1" +
    "\025\uffc1\026\uffc1\055\uffc1\056\uffc1\060\uffc1\001\002\000" +
    "\012\006\uffd8\017\uffd8\020\uffd8\060\uffd8\001\002\000\004" +
    "\016\137\001\002\000\024\005\116\021\123\023\126\024" +
    "\115\025\120\026\133\055\114\056\127\060\121\001\002" +
    "\000\030\005\uffb6\006\uffb6\021\uffb6\022\uffb6\023\uffb6\024" +
    "\uffb6\025\uffb6\026\uffb6\055\uffb6\056\uffb6\060\uffb6\001\002" +
    "\000\026\005\uffb8\006\uffb8\021\uffb8\023\uffb8\024\uffb8\025" +
    "\uffb8\026\uffb8\055\uffb8\056\uffb8\060\uffb8\001\002\000\010" +
    "\003\141\010\uffa8\060\121\001\002\000\004\010\144\001" +
    "\002\000\006\010\uffa9\062\143\001\002\000\004\010\uffaa" +
    "\001\002\000\024\005\uffbb\021\uffbb\023\uffbb\024\uffbb\025" +
    "\uffbb\026\uffbb\055\uffbb\056\uffbb\060\uffbb\001\002\000\024" +
    "\003\150\010\uffa5\016\uff8d\033\uff8d\044\152\060\uff8d\061" +
    "\uff8d\063\uff8d\064\uff8d\001\002\000\016\016\203\033\200" +
    "\060\121\061\176\063\210\064\206\001\002\000\012\010" +
    "\uff94\031\uff94\032\157\062\uff94\001\002\000\004\010\171" +
    "\001\002\000\004\010\uffa6\001\002\000\026\010\uff90\031" +
    "\uff90\032\uff90\035\166\036\161\037\164\040\163\041\162" +
    "\042\165\062\uff90\001\002\000\016\016\uff8e\033\uff8e\060" +
    "\uff8e\061\uff8e\063\uff8e\064\uff8e\001\002\000\006\010\uffa7" +
    "\031\155\001\002\000\012\010\uff92\031\uff92\032\uff92\062" +
    "\uff92\001\002\000\020\016\uff8d\033\uff8d\044\152\060\uff8d" +
    "\061\uff8d\063\uff8d\064\uff8d\001\002\000\012\010\uff95\031" +
    "\uff95\032\157\062\uff95\001\002\000\020\016\uff8d\033\uff8d" +
    "\044\152\060\uff8d\061\uff8d\063\uff8d\064\uff8d\001\002\000" +
    "\012\010\uff93\031\uff93\032\uff93\062\uff93\001\002\000\020" +
    "\016\uff6c\033\uff6c\044\uff6c\060\uff6c\061\uff6c\063\uff6c\064" +
    "\uff6c\001\002\000\020\016\uff69\033\uff69\044\uff69\060\uff69" +
    "\061\uff69\063\uff69\064\uff69\001\002\000\020\016\uff6a\033" +
    "\uff6a\044\uff6a\060\uff6a\061\uff6a\063\uff6a\064\uff6a\001\002" +
    "\000\020\016\uff6b\033\uff6b\044\uff6b\060\uff6b\061\uff6b\063" +
    "\uff6b\064\uff6b\001\002\000\020\016\uff68\033\uff68\044\uff68" +
    "\060\uff68\061\uff68\063\uff68\064\uff68\001\002\000\020\016" +
    "\uff6d\033\uff6d\044\uff6d\060\uff6d\061\uff6d\063\uff6d\064\uff6d" +
    "\001\002\000\020\016\uff8d\033\uff8d\044\152\060\uff8d\061" +
    "\uff8d\063\uff8d\064\uff8d\001\002\000\012\010\uff91\031\uff91" +
    "\032\uff91\062\uff91\001\002\000\010\003\172\060\121\062" +
    "\uffa2\001\002\000\004\062\uffa3\001\002\000\004\062\uffa4" +
    "\001\002\000\004\062\175\001\002\000\024\005\uffbc\021" +
    "\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\055\uffbc\056\uffbc" +
    "\060\uffbc\001\002\000\056\010\uff7e\012\uff7e\014\uff7e\031" +
    "\uff7e\032\uff7e\035\uff7e\036\uff7e\037\uff7e\040\uff7e\041\uff7e" +
    "\042\uff7e\043\uff7e\044\uff7e\045\uff7e\046\uff7e\047\uff7e\050" +
    "\uff7e\051\uff7e\052\uff7e\053\uff7e\054\uff7e\062\uff7e\001\002" +
    "\000\032\010\uff8f\012\uff8f\014\uff8f\031\uff8f\032\uff8f\035" +
    "\uff8f\036\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f\062\uff8f" +
    "\001\002\000\004\060\017\001\002\000\064\010\uff79\012" +
    "\uff79\013\uff73\014\uff79\016\242\031\uff79\032\uff79\034\245" +
    "\035\uff79\036\uff79\037\uff79\040\uff79\041\uff79\042\uff79\043" +
    "\uff79\044\uff79\045\uff79\046\uff79\047\uff79\050\uff79\051\uff79" +
    "\052\uff79\053\uff79\054\uff79\062\uff79\001\002\000\050\010" +
    "\uff87\012\uff87\014\uff87\031\uff87\032\uff87\035\uff87\036\uff87" +
    "\037\uff87\040\uff87\041\uff87\042\uff87\043\uff86\044\uff86\045" +
    "\uff87\046\uff87\052\231\053\232\054\227\062\uff87\001\002" +
    "\000\020\016\uff8d\033\uff8d\044\152\060\uff8d\061\uff8d\063" +
    "\uff8d\064\uff8d\001\002\000\036\010\uff8a\012\uff8a\014\uff8a" +
    "\031\uff8a\032\uff8a\035\uff8a\036\uff8a\037\uff8a\040\uff8a\041" +
    "\uff8a\042\uff8a\045\221\046\220\062\uff8a\001\002\000\056" +
    "\010\uff84\012\uff84\014\uff84\031\uff84\032\uff84\035\uff84\036" +
    "\uff84\037\uff84\040\uff84\041\uff84\042\uff84\043\uff84\044\uff84" +
    "\045\uff84\046\uff84\047\uff83\050\uff83\051\uff83\052\uff84\053" +
    "\uff84\054\uff84\062\uff84\001\002\000\056\010\uff7d\012\uff7d" +
    "\014\uff7d\031\uff7d\032\uff7d\035\uff7d\036\uff7d\037\uff7d\040" +
    "\uff7d\041\uff7d\042\uff7d\043\uff7d\044\uff7d\045\uff7d\046\uff7d" +
    "\047\uff7d\050\uff7d\051\uff7d\052\uff7d\053\uff7d\054\uff7d\062" +
    "\uff7d\001\002\000\056\010\uff81\012\uff81\014\uff81\031\uff81" +
    "\032\uff81\035\uff81\036\uff81\037\uff81\040\uff81\041\uff81\042" +
    "\uff81\043\uff81\044\uff81\045\uff81\046\uff81\047\uff81\050\uff81" +
    "\051\uff81\052\uff81\053\uff81\054\uff81\062\uff81\001\002\000" +
    "\056\010\uff7f\012\uff7f\014\uff7f\031\uff7f\032\uff7f\035\uff7f" +
    "\036\uff7f\037\uff7f\040\uff7f\041\uff7f\042\uff7f\043\uff7f\044" +
    "\uff7f\045\uff7f\046\uff7f\047\uff7f\050\uff7f\051\uff7f\052\uff7f" +
    "\053\uff7f\054\uff7f\062\uff7f\001\002\000\010\047\214\050" +
    "\215\051\213\001\002\000\016\016\203\033\200\060\121" +
    "\061\176\063\210\064\206\001\002\000\016\016\uff61\033" +
    "\uff61\060\uff61\061\uff61\063\uff61\064\uff61\001\002\000\016" +
    "\016\uff63\033\uff63\060\uff63\061\uff63\063\uff63\064\uff63\001" +
    "\002\000\016\016\uff62\033\uff62\060\uff62\061\uff62\063\uff62" +
    "\064\uff62\001\002\000\056\010\uff82\012\uff82\014\uff82\031" +
    "\uff82\032\uff82\035\uff82\036\uff82\037\uff82\040\uff82\041\uff82" +
    "\042\uff82\043\uff82\044\uff82\045\uff82\046\uff82\047\uff82\050" +
    "\uff82\051\uff82\052\uff82\053\uff82\054\uff82\062\uff82\001\002" +
    "\000\016\016\uff8c\033\uff8c\060\uff8c\061\uff8c\063\uff8c\064" +
    "\uff8c\001\002\000\020\016\uff64\033\uff64\044\uff64\060\uff64" +
    "\061\uff64\063\uff64\064\uff64\001\002\000\020\016\uff65\033" +
    "\uff65\044\uff65\060\uff65\061\uff65\063\uff65\064\uff65\001\002" +
    "\000\016\016\203\033\200\060\121\061\176\063\210\064" +
    "\206\001\002\000\032\010\uff8b\012\uff8b\014\uff8b\031\uff8b" +
    "\032\uff8b\035\uff8b\036\uff8b\037\uff8b\040\uff8b\041\uff8b\042" +
    "\uff8b\062\uff8b\001\002\000\004\062\225\001\002\000\056" +
    "\010\uff7b\012\uff7b\014\uff7b\031\uff7b\032\uff7b\035\uff7b\036" +
    "\uff7b\037\uff7b\040\uff7b\041\uff7b\042\uff7b\043\uff7b\044\uff7b" +
    "\045\uff7b\046\uff7b\047\uff7b\050\uff7b\051\uff7b\052\uff7b\053" +
    "\uff7b\054\uff7b\062\uff7b\001\002\000\006\043\236\044\237" +
    "\001\002\000\020\016\uff5e\033\uff5e\044\uff5e\060\uff5e\061" +
    "\uff5e\063\uff5e\064\uff5e\001\002\000\016\016\uff89\033\uff89" +
    "\060\uff89\061\uff89\063\uff89\064\uff89\001\002\000\020\016" +
    "\uff60\033\uff60\044\uff60\060\uff60\061\uff60\063\uff60\064\uff60" +
    "\001\002\000\020\016\uff5f\033\uff5f\044\uff5f\060\uff5f\061" +
    "\uff5f\063\uff5f\064\uff5f\001\002\000\016\016\203\033\200" +
    "\060\121\061\176\063\210\064\206\001\002\000\036\010" +
    "\uff88\012\uff88\014\uff88\031\uff88\032\uff88\035\uff88\036\uff88" +
    "\037\uff88\040\uff88\041\uff88\042\uff88\045\uff88\046\uff88\062" +
    "\uff88\001\002\000\016\016\203\033\200\060\121\061\176" +
    "\063\210\064\206\001\002\000\016\016\uff67\033\uff67\060" +
    "\uff67\061\uff67\063\uff67\064\uff67\001\002\000\016\016\uff66" +
    "\033\uff66\060\uff66\061\uff66\063\uff66\064\uff66\001\002\000" +
    "\056\010\uff85\012\uff85\014\uff85\031\uff85\032\uff85\035\uff85" +
    "\036\uff85\037\uff85\040\uff85\041\uff85\042\uff85\043\uff85\044" +
    "\uff85\045\uff85\046\uff85\047\uff83\050\uff83\051\uff83\052\uff85" +
    "\053\uff85\054\uff85\062\uff85\001\002\000\056\010\uff7a\012" +
    "\uff7a\014\uff7a\031\uff7a\032\uff7a\035\uff7a\036\uff7a\037\uff7a" +
    "\040\uff7a\041\uff7a\042\uff7a\043\uff7a\044\uff7a\045\uff7a\046" +
    "\uff7a\047\uff7a\050\uff7a\051\uff7a\052\uff7a\053\uff7a\054\uff7a" +
    "\062\uff7a\001\002\000\026\003\255\012\uff96\016\uff8d\033" +
    "\uff8d\044\152\060\uff8d\061\uff8d\062\uff96\063\uff8d\064\uff8d" +
    "\001\002\000\056\010\uff80\012\uff80\014\uff80\031\uff80\032" +
    "\uff80\035\uff80\036\uff80\037\uff80\040\uff80\041\uff80\042\uff80" +
    "\043\uff80\044\uff80\045\uff80\046\uff80\047\uff80\050\uff80\051" +
    "\uff80\052\uff80\053\uff80\054\uff80\062\uff80\001\002\000\004" +
    "\013\250\001\002\000\004\060\246\001\002\000\074\003" +
    "\uff74\010\uff74\011\uff74\012\uff74\013\uff74\014\uff74\016\uff74" +
    "\027\uff74\030\uff74\031\uff74\032\uff74\034\uff74\035\uff74\036" +
    "\uff74\037\uff74\040\uff74\041\uff74\042\uff74\043\uff74\044\uff74" +
    "\045\uff74\046\uff74\047\uff74\050\uff74\051\uff74\052\uff74\053" +
    "\uff74\054\uff74\062\uff74\001\002\000\074\003\uff72\010\uff72" +
    "\011\uff72\012\uff72\013\uff72\014\uff72\016\uff72\027\uff72\030" +
    "\uff72\031\uff72\032\uff72\034\uff72\035\uff72\036\uff72\037\uff72" +
    "\040\uff72\041\uff72\042\uff72\043\uff72\044\uff72\045\uff72\046" +
    "\uff72\047\uff72\050\uff72\051\uff72\052\uff72\053\uff72\054\uff72" +
    "\062\uff72\001\002\000\022\003\251\016\uff8d\033\uff8d\044" +
    "\152\060\uff8d\061\uff8d\063\uff8d\064\uff8d\001\002\000\004" +
    "\014\254\001\002\000\004\014\253\001\002\000\074\003" +
    "\uff76\010\uff76\011\uff76\012\uff76\013\uff76\014\uff76\016\uff76" +
    "\027\uff76\030\uff76\031\uff76\032\uff76\034\uff76\035\uff76\036" +
    "\uff76\037\uff76\040\uff76\041\uff76\042\uff76\043\uff76\044\uff76" +
    "\045\uff76\046\uff76\047\uff76\050\uff76\051\uff76\052\uff76\053" +
    "\uff76\054\uff76\062\uff76\001\002\000\074\003\uff75\010\uff75" +
    "\011\uff75\012\uff75\013\uff75\014\uff75\016\uff75\027\uff75\030" +
    "\uff75\031\uff75\032\uff75\034\uff75\035\uff75\036\uff75\037\uff75" +
    "\040\uff75\041\uff75\042\uff75\043\uff75\044\uff75\045\uff75\046" +
    "\uff75\047\uff75\050\uff75\051\uff75\052\uff75\053\uff75\054\uff75" +
    "\062\uff75\001\002\000\004\062\263\001\002\000\006\012" +
    "\uff97\062\uff97\001\002\000\006\012\260\062\261\001\002" +
    "\000\020\016\uff8d\033\uff8d\044\152\060\uff8d\061\uff8d\063" +
    "\uff8d\064\uff8d\001\002\000\056\010\uff9d\012\uff9d\014\uff9d" +
    "\031\uff9d\032\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041" +
    "\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d" +
    "\050\uff9d\051\uff9d\052\uff9d\053\uff9d\054\uff9d\062\uff9d\001" +
    "\002\000\006\012\uff98\062\uff98\001\002\000\056\010\uff9c" +
    "\012\uff9c\014\uff9c\031\uff9c\032\uff9c\035\uff9c\036\uff9c\037" +
    "\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c" +
    "\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c\054" +
    "\uff9c\062\uff9c\001\002\000\060\010\uff77\012\uff77\013\250" +
    "\014\uff77\031\uff77\032\uff77\035\uff77\036\uff77\037\uff77\040" +
    "\uff77\041\uff77\042\uff77\043\uff77\044\uff77\045\uff77\046\uff77" +
    "\047\uff77\050\uff77\051\uff77\052\uff77\053\uff77\054\uff77\062" +
    "\uff77\001\002\000\056\010\uff78\012\uff78\014\uff78\031\uff78" +
    "\032\uff78\035\uff78\036\uff78\037\uff78\040\uff78\041\uff78\042" +
    "\uff78\043\uff78\044\uff78\045\uff78\046\uff78\047\uff78\050\uff78" +
    "\051\uff78\052\uff78\053\uff78\054\uff78\062\uff78\001\002\000" +
    "\056\010\uff7c\012\uff7c\014\uff7c\031\uff7c\032\uff7c\035\uff7c" +
    "\036\uff7c\037\uff7c\040\uff7c\041\uff7c\042\uff7c\043\uff7c\044" +
    "\uff7c\045\uff7c\046\uff7c\047\uff7c\050\uff7c\051\uff7c\052\uff7c" +
    "\053\uff7c\054\uff7c\062\uff7c\001\002\000\020\016\uff8d\033" +
    "\uff8d\044\152\060\uff8d\061\uff8d\063\uff8d\064\uff8d\001\002" +
    "\000\006\012\274\062\uffac\001\002\000\004\062\272\001" +
    "\002\000\004\010\273\001\002\000\030\005\uffb0\006\uffb0" +
    "\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\055" +
    "\uffb0\056\uffb0\060\uffb0\001\002\000\004\063\275\001\002" +
    "\000\004\062\uffab\001\002\000\030\005\uffb4\006\uffb4\021" +
    "\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\055\uffb4" +
    "\056\uffb4\060\uffb4\001\002\000\026\005\uffba\006\uffba\021" +
    "\uffba\023\uffba\024\uffba\025\uffba\026\uffba\055\uffba\056\uffba" +
    "\060\uffba\001\002\000\030\005\uffc1\006\uffc1\021\uffc1\022" +
    "\301\023\uffc1\024\uffc1\025\uffc1\026\uffc1\055\uffc1\056\uffc1" +
    "\060\uffc1\001\002\000\024\005\116\021\123\023\126\024" +
    "\115\025\120\026\133\055\114\056\127\060\121\001\002" +
    "\000\030\005\uffb7\006\uffb7\021\uffb7\022\uffb7\023\uffb7\024" +
    "\uffb7\025\uffb7\026\uffb7\055\uffb7\056\uffb7\060\uffb7\001\002" +
    "\000\026\005\uffb9\006\uffb9\021\uffb9\023\uffb9\024\uffb9\025" +
    "\uffb9\026\uffb9\055\uffb9\056\uffb9\060\uffb9\001\002\000\024" +
    "\003\305\016\uff8d\033\uff8d\044\152\060\uff8d\061\uff8d\062" +
    "\306\063\uff8d\064\uff8d\001\002\000\004\062\311\001\002" +
    "\000\024\005\uffbd\021\uffbd\023\uffbd\024\uffbd\025\uffbd\026" +
    "\uffbd\055\uffbd\056\uffbd\060\uffbd\001\002\000\006\031\155" +
    "\062\310\001\002\000\024\005\uffbf\021\uffbf\023\uffbf\024" +
    "\uffbf\025\uffbf\026\uffbf\055\uffbf\056\uffbf\060\uffbf\001\002" +
    "\000\024\005\uffbe\021\uffbe\023\uffbe\024\uffbe\025\uffbe\026" +
    "\uffbe\055\uffbe\056\uffbe\060\uffbe\001\002\000\004\010\uffae" +
    "\001\002\000\004\010\314\001\002\000\030\005\uffb2\006" +
    "\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2" +
    "\055\uffb2\056\uffb2\060\uffb2\001\002\000\030\005\uffb5\006" +
    "\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5" +
    "\055\uffb5\056\uffb5\060\uffb5\001\002\000\026\005\116\006" +
    "\317\021\123\023\126\024\115\025\120\026\133\055\114" +
    "\056\127\060\121\001\002\000\030\005\uffaf\006\uffaf\021" +
    "\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\055\uffaf" +
    "\056\uffaf\060\uffaf\001\002\000\030\005\uffb3\006\uffb3\021" +
    "\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\055\uffb3" +
    "\056\uffb3\060\uffb3\001\002\000\004\060\121\001\002\000" +
    "\010\013\uff73\034\245\062\323\001\002\000\004\010\324" +
    "\001\002\000\030\005\uffb1\006\uffb1\021\uffb1\022\uffb1\023" +
    "\uffb1\024\uffb1\025\uffb1\026\uffb1\055\uffb1\056\uffb1\060\uffb1" +
    "\001\002\000\006\010\uff9f\062\uff9f\001\002\000\020\016" +
    "\uff6f\033\uff6f\044\uff6f\060\uff6f\061\uff6f\063\uff6f\064\uff6f" +
    "\001\002\000\020\016\uff6e\033\uff6e\044\uff6e\060\uff6e\061" +
    "\uff6e\063\uff6e\064\uff6e\001\002\000\006\010\uff9e\062\uff9e" +
    "\001\002\000\006\010\uffa0\062\uffa0\001\002\000\006\010" +
    "\uff99\062\uff99\001\002\000\020\016\uff70\033\uff70\044\uff70" +
    "\060\uff70\061\uff70\063\uff70\064\uff70\001\002\000\020\016" +
    "\uff9b\033\uff9b\044\uff9b\060\uff9b\061\uff9b\063\uff9b\064\uff9b" +
    "\001\002\000\020\016\uff8d\033\uff8d\044\152\060\uff8d\061" +
    "\uff8d\063\uff8d\064\uff8d\001\002\000\006\010\uff9a\062\uff9a" +
    "\001\002\000\006\003\341\060\103\001\002\000\014\003" +
    "\ufff1\005\ufff1\007\ufff1\015\ufff1\060\ufff1\001\002\000\006" +
    "\010\uffec\012\uffec\001\002\000\006\010\uffee\012\uffee\001" +
    "\002\000\006\010\345\012\344\001\002\000\006\003\346" +
    "\060\103\001\002\000\014\003\ufff0\005\ufff0\007\ufff0\015" +
    "\ufff0\060\ufff0\001\002\000\006\010\uffed\012\uffed\001\002" +
    "\000\006\010\uffef\012\uffef\001\002\000\012\003\uffe2\005" +
    "\uffe2\006\uffe2\060\uffe2\001\002\000\012\003\353\005\356" +
    "\006\uffdb\060\017\001\002\000\004\060\103\001\002\000" +
    "\014\003\uffdf\005\uffdf\006\uffdf\010\362\060\uffdf\001\002" +
    "\000\012\003\uffe3\005\uffe3\006\uffe3\060\uffe3\001\002\000" +
    "\004\006\361\001\002\000\012\006\uffd9\017\uffd9\020\uffd9" +
    "\060\uffd9\001\002\000\012\006\360\017\046\020\uffd4\060" +
    "\uffd4\001\002\000\004\006\uffdc\001\002\000\014\003\uffe8" +
    "\005\uffe8\007\uffe8\015\uffe8\060\uffe8\001\002\000\012\003" +
    "\uffe0\005\uffe0\006\uffe0\060\uffe0\001\002\000\006\010\uffdd" +
    "\012\uffdd\001\002\000\006\010\366\012\365\001\002\000" +
    "\004\060\103\001\002\000\012\003\uffe1\005\uffe1\006\uffe1" +
    "\060\uffe1\001\002\000\006\010\uffde\012\uffde\001\002\000" +
    "\006\010\371\012\344\001\002\000\014\003\ufff2\005\ufff2" +
    "\007\ufff2\015\ufff2\060\ufff2\001\002\000\004\002\000\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\370\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\036\005\001\001\000\004\003\007\001\001\000\002" +
    "\001\001\000\016\005\013\006\021\007\011\010\014\037" +
    "\010\054\012\001\001\000\006\043\341\045\367\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\023\001\001\000\006\041\026\042\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\056\040" +
    "\001\001\000\002\001\001\000\004\037\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\014\047\047\050" +
    "\055\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\074\016\073\001\001\000\006" +
    "\037\052\052\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\037\057" +
    "\050\061\051\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\037\057" +
    "\050\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\044\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\075\037\076\001\001\000\002\001\001\000\006" +
    "\043\101\053\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\044\107\001\001\000\002" +
    "\001\001\000\004\043\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\111\001\001" +
    "\000\022\021\127\022\130\023\121\025\123\026\124\027" +
    "\133\033\116\057\112\001\001\000\014\065\325\067\326" +
    "\071\333\076\330\111\243\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\315\001\001\000\002\001\001" +
    "\000\010\073\311\075\144\100\312\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\021\276\022\277\023\121\025\123\026\124\027" +
    "\133\033\116\057\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\022\134\023\135\025\123" +
    "\026\124\027\133\033\116\057\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\025\123\030\137\033\141" +
    "\057\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\031\146\073\150" +
    "\075\144\101\152\102\145\103\153\001\001\000\016\057" +
    "\200\060\201\061\176\062\204\063\203\072\206\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\070\166\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\073\150\075\144\102\155\103" +
    "\153\001\001\000\002\001\001\000\010\073\150\075\144" +
    "\103\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\073\167\075\144\001" +
    "\001\000\002\001\001\000\012\025\123\032\173\033\172" +
    "\057\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\037\263\001\001\000\010\076\240\077" +
    "\242\111\243\001\001\000\006\067\227\107\225\001\001" +
    "\000\006\073\223\075\144\001\001\000\004\065\216\001" +
    "\001\000\004\110\210\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\066\211\001\001\000" +
    "\006\057\200\072\215\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\105" +
    "\221\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\057\200\060\201\061\222\062\204\063\203\072\206\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\064\234\001\001\000\002\001\001\000\004\106" +
    "\232\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\057\200\060\201\062\204\063\233\072\206\001\001\000" +
    "\002\001\001\000\010\057\200\062\237\072\206\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\110\210\001" +
    "\001\000\002\001\001\000\010\034\256\073\255\075\144" +
    "\001\001\000\002\001\001\000\004\035\246\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\073\251\075\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\073\261\075" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\035\264\074\265\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\024\270\073\267\075\144" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\022\301\023\302\025\123\026\124\027\133\033\116" +
    "\057\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\073\150\075\144\101\306\102\145\103\153\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\021" +
    "\127\022\130\023\121\025\123\026\124\027\133\033\116" +
    "\057\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\057\321\001\001\000\004\111\243\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\104\334\001" +
    "\001\000\006\073\335\075\144\001\001\000\002\001\001" +
    "\000\006\043\341\045\342\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\346\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\350\001\001\000\010\012\353" +
    "\013\354\037\351\001\001\000\006\043\362\046\363\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\356\001\001\000\010\014\047\047\050\055" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\366\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	SymbolTable.init(); // Universe scope

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol symbol = this.getScanner().next_token();
	if (symbol != null && symbol.value != null) 
		logger.debug(symbol.toString() + " " + symbol.value.toString());
	return symbol;

    }


	
	private Logger logger = MyLoggerFactory.getLogger(getClass());

	public Logger getLogger() {
		return logger;	
	}    

	
   	//redefined error functions  
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      report_error(message, info);
      done_parsing();
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("Syntax erorr: ", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatal error, cannot continue parsing, symbol: ", cur_token);
    }

    public void report_error(String message, Object info) {
        if (info != null && info instanceof Symbol) {
			Symbol currentSymbol = (Symbol) info;
			message += "at line: " + (currentSymbol.left + 1) + ", at column: " + (currentSymbol.right + 1);
			logger.info(message + ", current symbol: " + info.toString());
		} else {
			logger.info(message);
		}
		errorFound = true;
    }

    private boolean errorFound = false;

    public void report_semantic_error(String message, int lineNumber) {
    	report_error("Semantic error on line: " + (lineNumber + 1) + ", " + message, null);
    	errorFound = true;
    }

    public void report_internal_error(String message, int lineNumber) {
    	report_error("Internal error on line: " + (lineNumber + 1) + ", " + message, null);
    	errorFound = true;	
    }

    public boolean isErrorFound() {
    	return errorFound;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


	//functions defined for counts
	private int globalVariableCount = 0;

	public int getGlobalVariableCount() {
		return globalVariableCount;
	}

	private int currentMethodVariableCount = 0;

	public void incrementCurrentMethodVariableCount() {
		currentMethodVariableCount++;
	}

	public void invalidateCurrentMethodVariableCount() {
		currentMethodVariableCount = 0;
	}
	
	public void incrementGlobalVariableCount() {
		globalVariableCount++;
	}

	private int mainVariableCount = 0;

	public int getMainVariableCount() {
		return mainVariableCount;
	}

	public void incrementMainVariableCount() {
		mainVariableCount += currentMethodVariableCount;
		currentMethodVariableCount = 0;
	}

	private static String MAIN = "main";
	
	public boolean isMain(String identifier) {
		return MAIN.equals(identifier);
	}

	private int constantCount = 0;

	public int getConstantCount() {
		return constantCount;
	}

	public void incrementConstantCount() {
		constantCount++;
	}

	private int globalArrayCount = 0;
	private int currentArrayCount = 0;

	public int getGlobalArrayCount() {
		return globalArrayCount;
	}

	public void incrementGlobalArrayCount() {
		globalArrayCount += currentArrayCount;
		currentArrayCount = 0;	
	}

	public void incrementCurrentArrayCount() {
		currentArrayCount++;
	}

	public void invalidateCurrentArrayCount() {
		currentArrayCount = 0;	
	}

	private int staticMethodCount = 0;
	private int nonStaticMethodCount = 0;
	private int currentNonStaticMethodCount = 0;

	public int getStaticMethodCount() { 
		return staticMethodCount;
	}

	public int getNonStaticMethodCount() { 
		return nonStaticMethodCount;
	}

	public int getGlobalMethodCount() {
		return currentNonStaticMethodCount;
	}

	public void incrementCurrentNonStaticMethodCount() {
		currentNonStaticMethodCount++;
	}

	public void incrementStaticMethodCount() {
		staticMethodCount++;
	}

	public void incrementNonStaticMethodCount() {
		nonStaticMethodCount += currentNonStaticMethodCount;
		currentNonStaticMethodCount = 0;
	}

	private int codeBlockCount = 0;
	private int currentMethodCallCount = 0;

	public int getCodeBlockCount() {
		return codeBlockCount;
	}

	public void incrementCodeBlockCount() {
		codeBlockCount++;
	}

	private int mainMethodCallCount = 0;

	public int getMainMethodCalls() {
		return mainMethodCallCount;
	}

	public void incrementCurrentMethodCallCount() {
		currentMethodCallCount++;
	}

	public void invalidateCurrentMethodCallCount() {
		currentMethodCallCount = 0;
	}

	public void incrementMainMethodCallCount() {
		mainMethodCallCount += currentMethodCallCount;
		currentMethodCallCount = 0;
	}

	private int formalArgumentsCount = 0;

	public int getFormalArgumentsCount() {
		return formalArgumentsCount;
	}

	public void incrementFormalArgumentsCount() {
		formalArgumentsCount++;
	}

	private int classDefinitionCount = 0;

	public int getClassDefinitionCount() {
		return classDefinitionCount;
	}

	public void incrementClassDefinitionCount() {
		classDefinitionCount++;
	}

	private int classVariableCount = 0;

	public int getClassVariableCount() {
		return classVariableCount;
	}

	public void incrementClassVariableCount() {
		classVariableCount ++;
	}

	void printSyntaxErrorDescription(String message) {
		parser.report_error("Syntax error: " + message, null);
	}

	//Semantic analysis

	private static final String THIS = "this";
	private static final String BRACKETS = "[]";
	private static final String EQUAL = "==";
	private static final String NOT_EQUAL = "!=";
	private static final String EQUALS = "=";
	private static final String GREATER_THAN = ">";
	private static final String GREATER_OR_EQUAL_THAN = ">=";
	private static final String LESS_THAN = "<";
	private static final String LESS_OR_EQUAL_THAN = "<=";
	private static final String PLUS = "+";
	private static final String MINUS = "-";
	private static final String PLUS_EQUALS = "+=";
	private static final String MINUS_EQUALS = "-=";
	private static final String TIMES = "*";
	private static final String SOLIDUS = "/";
	private static final String PERCENT = "%";
	private static final String TIMES_EQUALS = "*=";
	private static final String SOLIDUS_EQUALS = "/=";
	private static final String PERCENT_EQUALS = "%=";

	private int variablePosition = 0;
	
	private Obj currentMethod = null;
	private int methodVariablePosition = 0;

	private Obj currentClass = null;
	private int classVariablePosition = 0;

	private Stack<List<Obj>> actualParametersStack = new Stack<>();
	private Stack<List<Integer>>  forLoopBreakStack = new Stack<>(), forLoopContinueStack = new Stack<>();

	private boolean returnFound = false;

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // MultiplicationOperatorRight ::= PERCENT_EQUALS 
            {
              String RESULT =null;
		 RESULT = PERCENT_EQUALS; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicationOperatorRight",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // MultiplicationOperatorRight ::= SOLIDUS_EQUALS 
            {
              String RESULT =null;
		 RESULT = SOLIDUS_EQUALS; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicationOperatorRight",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // MultiplicationOperatorRight ::= TIMES_EQUALS 
            {
              String RESULT =null;
		 RESULT = TIMES_EQUALS; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicationOperatorRight",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // MultiplicationOperatorLeft ::= PERCENT 
            {
              String RESULT =null;
		 RESULT = PERCENT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicationOperatorLeft",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // MultiplicationOperatorLeft ::= SOLIDUS 
            {
              String RESULT =null;
		 RESULT = SOLIDUS; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicationOperatorLeft",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // MultiplicationOperatorLeft ::= TIMES 
            {
              String RESULT =null;
		 RESULT = TIMES; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicationOperatorLeft",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // AdditionOperatorRight ::= MINUS_EQUALS 
            {
              String RESULT =null;
		 RESULT = MINUS_EQUALS; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AdditionOperatorRight",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // AdditionOperatorRight ::= PLUS_EQUALS 
            {
              String RESULT =null;
		 RESULT = PLUS_EQUALS; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AdditionOperatorRight",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // AdditionOperatorLeft ::= MINUS 
            {
              String RESULT =null;
		 RESULT = MINUS; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AdditionOperatorLeft",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // AdditionOperatorLeft ::= PLUS 
            {
              String RESULT =null;
		 RESULT = PLUS; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AdditionOperatorLeft",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // RelationalOperator ::= LESS_OR_EQUAL_THAN 
            {
              String RESULT =null;
		 RESULT = LESS_OR_EQUAL_THAN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalOperator",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // RelationalOperator ::= LESS_THAN 
            {
              String RESULT =null;
		 RESULT = LESS_THAN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalOperator",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // RelationalOperator ::= GREATER_OR_EQUAL_THAN 
            {
              String RESULT =null;
		 RESULT = GREATER_OR_EQUAL_THAN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalOperator",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // RelationalOperator ::= GREATER_THAN 
            {
              String RESULT =null;
		 RESULT = GREATER_THAN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalOperator",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // RelationalOperator ::= NOT_EQUAL 
            {
              String RESULT =null;
		 RESULT = NOT_EQUAL; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalOperator",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // RelationalOperator ::= EQUAL 
            {
              String RESULT =null;
		 RESULT = EQUAL; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalOperator",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // AssignOperator ::= MultiplicationOperatorRight 
            {
              String RESULT =null;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String operator = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = operator;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOperator",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // AssignOperator ::= AdditionOperatorRight 
            {
              String RESULT =null;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String operator = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = operator;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOperator",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // AssignOperator ::= EQUALS 
            {
              String RESULT =null;
		
						RESULT = EQUALS;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOperator",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Designator ::= IDENTIFIER 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					//Semantic analysis
					Obj object = SymbolTable.find(name);
					if (object.equals(SymbolTable.noObj) && currentClass != null) {
						object = currentClass.getType().getMembersTable().searchKey(name);
					}
					if (object == null || object.equals(SymbolTable.noObj)) {
						if (THIS.equals(name)) {
							parser.report_semantic_error("Use of " + THIS + " outside of class non-static method", nameleft);
							RESULT = SymbolTable.noObj;
						} else {
							parser.report_semantic_error("Use of undefined symbol " + name, nameleft);
							RESULT = SymbolTable.noObj;
						}
					} else {	
						RESULT = object;
					}
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Designator",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Designator ::= Designator NT$5 ArrayIndexer 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
					//Semantic analysis
					if (designator == null) {
						parser.report_internal_error("NULL designator in production Designator ::= Designator ArrayIndexer", designatorleft);
					} else if (!designator.equals(SymbolTable.noObj)) {
						if(designator.getType().getKind() != MyStruct.Array) {
							parser.report_semantic_error("Symbol " + designator.getName() + " is not an array", designatorleft);
							RESULT = SymbolTable.noObj;
						} else if(designator.getType().getElemType() == null) {
							parser.report_internal_error("Array without an element type in production Designator ::= Designator ArrayIndexer", designatorleft);
							RESULT = SymbolTable.noObj;
						} else {
							//Return temp designator that represents and array element
							RESULT = new MyObj(MyObj.Elem, designator.getName() + "[]", designator.getType().getElemType());
						}
					} else {
						RESULT = SymbolTable.noObj;
					}
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Designator",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // NT$5 ::= 
            {
              Obj RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

					//Code generation
					if (!parser.isErrorFound()) {
						Code.load(designator);
					}
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Designator ::= Designator DOT IDENTIFIER 
            {
              Obj RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					//Semantic analysis
					if (designator == null) {
						parser.report_internal_error("NULL designator in production Designator ::= Designator DOT IDENTIFIER", designatorleft);
						RESULT = SymbolTable.noObj;
					} else if (!designator.equals(SymbolTable.noObj)) {
						if (designator.getType().getKind() != MyStruct.Class) {
							parser.report_semantic_error("Symbol " + designator.getName() + " is not of class type", designatorleft);
							RESULT = SymbolTable.noObj;
						} else {
							Obj member = designator.getType().getMembersTable().searchKey(name);
							if (member == null && currentClass != null && designator.getType().equals(currentClass.getType())) {
								member = SymbolTable.currentScope.getOuter().findSymbol(name);
							}

							if (member == null) {
								parser.report_semantic_error("Symbol " + designator.getName() + " has no member of name " + name, designatorleft);
								RESULT = SymbolTable.noObj;
							} else if(designator.getKind() == MyObj.Type && member.getKind() != MyObj.Static) {
								parser.report_semantic_error("Use of non-static method or varaible through class name symbol " + designator.getName(), designatorleft);
								RESULT = SymbolTable.noObj;
							} else {
								RESULT = member;
							}
						}
					} else {
						RESULT = SymbolTable.noObj;
					}
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Designator",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ArrayIndexer ::= LEFT_BRACKET error RIGHT_BRACKET 
            {
              Object RESULT =null;
		 printSyntaxErrorDescription("Incorrect expression for array index"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArrayIndexer",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ArrayIndexer ::= LEFT_BRACKET Expression RIGHT_BRACKET 
            {
              Object RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Obj expression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						if (expression != null) {
							if (!expression.getType().equals(SymbolTable.intType)) {
								parser.report_semantic_error("Array index is not of type int", expressionleft);
							}
						} else {
							parser.report_internal_error("NULL expression for production ArrayIndexer ::= LEFT_BRACKET Expression RIGHT_BRACKET", expressionleft);
						}
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArrayIndexer",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ArraySize ::= 
            {
              Boolean RESULT =null;
		
			  		RESULT = false;
			  	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArraySize",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ArraySize ::= ArrayIndexer 
            {
              Boolean RESULT =null;
		 
			  		RESULT = true;
			  	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArraySize",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OptionalParameters ::= 
            {
              List<Obj> RESULT =null;
		
					   		RESULT = null;
					   	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptionalParameters",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OptionalParameters ::= MethodCall 
            {
              List<Obj> RESULT =null;
		int parameterListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parameterListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Obj> parameterList = (List<Obj>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							if(parameterList == null) { 
								parser.report_internal_error("NULL parameter list for production OptionalParameters ::= MethodCall", parameterListleft);
								RESULT = null;
							} else {
								RESULT = parameterList;
							}
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptionalParameters",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Factor ::= LEFT_PARENTHESIS Expression RIGHT_PARENTHESIS 
            {
              Obj RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Obj expression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		   		if (expression == null) {
		   			parser.report_internal_error("NULL expression in production Factor ::= LEFT_PARENTHESIS Expression RIGHT_PARENTHESIS", expressionleft);
		   			RESULT = SymbolTable.noObj;
		   		} else {
		   			RESULT = expression;
		   		}
		   	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Factor ::= NEW Type ArraySize 
            {
              Obj RESULT =null;
		int typeObjectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeObjectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Obj typeObject = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int isArrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int isArrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean isArray = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		   		//Semantic analysis
		   		if (!isArray.booleanValue() && typeObject.getType().getKind() != MyStruct.Class) {
		   			parser.report_semantic_error("Cannot instantiate a object of non class type " + typeObject.getName(), typeObjectleft);
		   			RESULT = SymbolTable.noObj;
		   		} else {
		   			if(isArray.booleanValue()) {
		   				RESULT = new Obj(Obj.Type, typeObject.getName() + "[]", new MyStruct(MyStruct.Array, typeObject.getType()));
		   			} else {
		   				RESULT = typeObject;
		   			}
		   		}

		   		//Code generation
		   		if (!parser.isErrorFound()) {
		   			if (isArray.booleanValue()) {
		   				Code.put(Code.newarray);
		   			} else {
		   				Code.put(Code.new_);
		   			}

		   			//if char type allocate byte array
		   			if (typeObject.getType().equals(SymbolTable.charType)) {
		   				Code.put(0);
		   			} else {
		   				Code.put(1);
		   			}

		   			//Adjust size for array of classes
		   		}
		   	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Factor ::= BOOLEAN_CONSTANT 
            {
              Obj RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean value = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		   		//Semantic analysis
		   		RESULT = new MyObj(Obj.Con, value.toString(), SymbolTable.boolType, value.booleanValue() ? 1 : 0, SymbolTable.getCurrentLevel()); 

		   		//Code generation
		   		if (!parser.isErrorFound()) {
		   			Code.load(RESULT);
		   		}
		   	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Factor ::= CHARACTER_CONSTANT 
            {
              Obj RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		   		//Semantic analysis
		   		RESULT = new MyObj(Obj.Con, value.toString(), SymbolTable.charType, (int)value.charAt(0), SymbolTable.getCurrentLevel()); 
		   	
		   		//Code generation
		   		if (!parser.isErrorFound()) {
		   			//I am puting byte values because of special characters that can be two bytes like \r\n
		   			if ("\\n".equals(value)) {
		   				value = "\n";
		   			}

		   			byte bytes[] = value.getBytes();
		   			for (int i = 0; i < bytes.length; i++) {
		   				Code.loadConst(Byte.toUnsignedInt(bytes[i]));
		   			}
		   		}
		   	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Factor ::= NUMERICAL_CONSTANT 
            {
              Obj RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		   		//Semantic analysis
		   		RESULT = new MyObj(Obj.Con, value.toString(), SymbolTable.intType, value.intValue(), SymbolTable.getCurrentLevel()); 

		   		//Code generation
		   		if (!parser.isErrorFound()) {
		   			Code.load(RESULT);
		   		}
		   	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Factor ::= Designator OptionalParameters 
            {
              Obj RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int parameterListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parameterListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Obj> parameterList = (List<Obj>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				//Semantic analysis
				if (designator == null) {
					parser.report_internal_error("NULL designator in production Factor ::= Designator OptionalParameters", designatorleft);
					RESULT = SymbolTable.noObj;
				} else if (designator.getKind() == MyObj.Global && designator.getKind() == MyObj.Meth && designator.getKind() == MyObj.Static && parameterList == null) {
					parser.report_internal_error("NULL parameter list in production Factor ::= Designator OptionalParameters", designatorleft);
					RESULT = SymbolTable.noObj;
				} else if (!designator.equals(SymbolTable.noObj)) {
					//Check types and number of paramaters
					String name = designator.getName();
					if (designator.getKind() == MyObj.Global || designator.getKind() == MyObj.Meth || designator.getKind() == MyObj.Static) {
						if ((designator.getKind() != MyObj.Meth && parameterList.size() != designator.getLevel()) || (designator.getKind() == MyObj.Meth && parameterList.size() != (designator.getLevel() - 1))) {
							parser.report_semantic_error("Incorrect number of parameters in the invokation of " + designator.getName(), designatorleft);
						} else {
							Collection<Obj> functionLocals = designator.getLocalSymbols();
							Iterator<Obj> formalParameterIterator = functionLocals.iterator();

							//If MyObj.Meth skip this parameter
							if (designator.getKind() == MyObj.Meth) {
								formalParameterIterator.next();
							}
							Iterator<Obj> actualParameterIterator = parameterList.iterator();

							name += "(";

							while (formalParameterIterator.hasNext() && actualParameterIterator.hasNext()) {
								Obj formalParameter = formalParameterIterator.next();
								Obj actualParameter = actualParameterIterator.next();

								if(!actualParameter.getType().assignableTo(formalParameter.getType())) {
									parser.report_semantic_error("Actual parameter " + actualParameter.getName() + " of type " + SymbolTable.getTypeName(actualParameter.getType()) + " is not assignable to formal parameter " + formalParameter.getName() + " of type " + SymbolTable.getTypeName(formalParameter.getType()), designatorleft);
								} else {
									name += actualParameter.getName();
									if (actualParameterIterator.hasNext()) {
										name += ", ";
									}
								}
							}

							name += ")";
						}
					}
					RESULT = new MyObj(designator.getKind(), name, designator.getType(), designator.getAdr(), designator.getLevel());
				} else {
					RESULT = SymbolTable.noObj;
				}

				//Code generation
				if (!parser.isErrorFound()) {
					if (designator.getKind() == MyObj.Var || designator.getKind() == MyObj.Con) {
						Code.load(designator);
					}
				}
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // LeftAssociatedFactorList ::= Factor 
            {
              Obj RESULT =null;
		int factorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj factor = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
									if (factor != null) {
										RESULT = factor;
									} else {
										parser.report_internal_error("NULL factor in production LeftAssociatedFactorList ::= factor", factorleft);
										RESULT = SymbolTable.noObj;
									}
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LeftAssociatedFactorList",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // LeftAssociatedFactorList ::= LeftAssociatedFactorList NT$4 MultiplicationOperatorLeft Factor 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int leftExpressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int leftExpressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Obj leftExpression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String operator = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int factorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj factor = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
									//Semantic analysis
									boolean error = false;
									if (leftExpression == null) {
										parser.report_internal_error("NULL right left expression in production LeftAssociatedFactorList ::= LeftAssociatedFactorList MultiplicationOperatorLeft Factor", factorleft);
										error = true;
									}

									if (factor == null) {
										parser.report_internal_error("NULL factor in production LeftAssociatedFactorList ::= LeftAssociatedFactorList MultiplicationOperatorLeft Factor", factorleft);
										error = true;
									}

									if (leftExpression != null && !leftExpression.equals(SymbolTable.noObj) && !leftExpression.getType().equals(SymbolTable.intType)) {
										parser.report_semantic_error("Expression " + leftExpression.getName() + " is not of type int", leftExpressionleft);
										error = true;
									}

									if (factor != null && !factor.equals(SymbolTable.noObj) && !factor.getType().equals(SymbolTable.intType)) {
										parser.report_semantic_error("Expression " + factor.getName() + " is not of type int", factorleft);
										error = true;
									}

									if(!error) {
										RESULT = new MyObj(MyObj.Con, leftExpression.getName() + " " + operator + " " + factor.getName(), SymbolTable.intType);
									} else {
										RESULT = SymbolTable.noObj;
									}

									//Code generation
									if (!parser.isErrorFound()) {
										//We did not load array element or class field beacuse of the combined operators
										if (factor.getKind() == MyObj.Elem || factor.getKind() == MyObj.Fld) {
											Code.load(factor);
										}

										switch (operator) {
											case TIMES: {
												Code.put(Code.mul);
												break;
											}
											case SOLIDUS: {
												Code.put(Code.div);
												break;
											}
											case PERCENT: {
												Code.put(Code.rem);
												break;
											}
										}
									}
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LeftAssociatedFactorList",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NT$4 ::= 
            {
              Obj RESULT =null;
		int leftExpressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int leftExpressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj leftExpression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

									//Code generation
									if (!parser.isErrorFound()) {
										//We did not load array element or class field beacuse of the combined operators
										//This will be true only for the first element of expression if it is an array element or class field
										if (leftExpression.getKind() == MyObj.Elem || leftExpression.getKind() == MyObj.Fld) {
											Code.load(leftExpression);
										}
									}
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // LeftAssociatedTermList ::= LeftAssociatedFactorList 
            {
              Obj RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj expression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
								if (expression != null) {
									RESULT = expression;
								} else {
									parser.report_internal_error("NULL expression in production LeftAssociatedTermList ::= LeftAssociatedFactorList", expressionleft);
									RESULT = SymbolTable.noObj;
								}
							
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LeftAssociatedTermList",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // LeftAssociatedTermList ::= LeftAssociatedTermList NT$3 AdditionOperatorLeft LeftAssociatedFactorList 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int leftExpressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int leftExpressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Obj leftExpression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String operator = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rightExpressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rightExpressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj rightExpression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
								//Semantic analysis
								boolean error = false;
								if (leftExpression == null) {
									parser.report_internal_error("NULL left expression in production LeftAssociatedTermList ::= LeftAssociatedTermList AdditionOperatorLeft LeftAssociatedFactorList", leftExpressionleft);
									error = true;
								}

								if (rightExpression == null) {
									parser.report_internal_error("NULL right expression in production LeftAssociatedTermList ::= LeftAssociatedTermList AdditionOperatorLeft LeftAssociatedFactorList", leftExpressionleft);
									error = true;
								}

								if (leftExpression != null && !leftExpression.equals(SymbolTable.noObj) && !leftExpression.getType().equals(SymbolTable.intType)) {
									parser.report_semantic_error("Expression " + leftExpression.getName() + " is not of type int", leftExpressionleft);
									error = true;
								}

								if (rightExpression != null && !rightExpression.equals(SymbolTable.noObj) && !rightExpression.getType().equals(SymbolTable.intType)) {
									parser.report_semantic_error("Expression " + rightExpression.getName() + " is not of type int", rightExpressionleft);
									error = true;
								}

								if(!error) {
									RESULT = new MyObj(MyObj.Con, leftExpression.getName() + " " + operator + " " + rightExpression.getName(), SymbolTable.intType);
								} else {
									RESULT = SymbolTable.noObj;
								}

								//Code generation
								if (!parser.isErrorFound()) {
									//We did not load array element or class field beacuse of the combined operators
									if (rightExpression.getKind() == MyObj.Elem || rightExpression.getKind() == MyObj.Fld) {
										Code.load(rightExpression);
									}

									switch (operator) {
										case PLUS: {
											Code.put(Code.add);
											break;
										}
										case MINUS: {
											Code.put(Code.sub);
											break;
										}
									}
								}
							
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LeftAssociatedTermList",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // NT$3 ::= 
            {
              Obj RESULT =null;
		int leftExpressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int leftExpressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj leftExpression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

								//Code generation
								if (!parser.isErrorFound()) {
									//We did not load array element or class field beacuse of the combined operators
									//This will be true only for the first element of expression if it is an array element or class field
									if (leftExpression.getKind() == MyObj.Elem || leftExpression.getKind() == MyObj.Fld) {
										Code.load(leftExpression);
									}
								}
							
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // RightAssociatedFactorList ::= LeftAssociatedTermList 
            {
              Obj RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj expression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
									if (expression != null) {
										RESULT = expression;
									} else {
										parser.report_internal_error("NULL expression in production RightAssociatedFactorList ::= LeftAssociatedTermList", expressionleft);
										RESULT = SymbolTable.noObj;
									}
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RightAssociatedFactorList",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // RightAssociatedFactorList ::= LeftAssociatedTermList MultiplicationOperatorRight NT$2 RightAssociatedFactorList 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int leftExpressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int leftExpressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Obj leftExpression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String operator = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rightExpressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rightExpressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj rightExpression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
									//Semantic analysis
									boolean error = false;
									if (leftExpression == null) {
										parser.report_internal_error("NULL left expression in production RightAssociatedFactorList ::= LeftAssociatedTermList MultiplicationOperatorRight RightAssociatedFactorList", rightExpressionleft);
										error = true;
									}

									if (rightExpression == null) {
										parser.report_internal_error("NULL right expression in production RightAssociatedFactorList ::= LeftAssociatedTermList MultiplicationOperatorRight RightAssociatedFactorList", rightExpressionleft);
										error = true;
									}

									if (leftExpression != null && !leftExpression.equals(SymbolTable.noObj) && !leftExpression.getType().equals(SymbolTable.intType)) {
										parser.report_semantic_error("Expression " + leftExpression.getName() + " is not of type int", leftExpressionleft);
										error = true;
									}

									if (rightExpression != null && !rightExpression.equals(SymbolTable.noObj) && !rightExpression.getType().equals(SymbolTable.intType)) {
										parser.report_semantic_error("Expression " + rightExpression.getName() + " is not of type int", rightExpressionleft);
										error = true;
									}

									if (leftExpression != null && !leftExpression.equals(SymbolTable.noObj) && leftExpression.getKind() != MyObj.Var && leftExpression.getKind() != MyObj.Fld && leftExpression.getKind() != MyObj.Elem) {
										parser.report_semantic_error(leftExpression.getName() + " is not a variable, array element or class field", leftExpressionleft);
										error = true;
									}

									if(!error) {
										RESULT = new MyObj(MyObj.Con, leftExpression.getName() + " " + operator + " " + rightExpression.getName(), SymbolTable.intType);
									} else {
										RESULT = SymbolTable.noObj;
									}

									//Code generation
									if (!parser.isErrorFound()) {
										//Load array element or class field beacuse it is not loaded
										if (rightExpression.getKind() == MyObj.Elem || rightExpression.getKind() == MyObj.Fld) {
											Code.load(rightExpression);
										}

										switch (operator) {
											case TIMES_EQUALS: {
												Code.put(Code.mul);
												break;
											}
											case SOLIDUS_EQUALS: {
												Code.put(Code.div);
												break;
											}
											case PERCENT_EQUALS: {
												Code.put(Code.rem);
												break;
											}
										}
										if (leftExpression.getKind() != MyObj.Var) {
											Code.put(Code.dup_x2);
										} else {
											Code.put(Code.dup);
										}

										Code.store(leftExpression);
									}
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RightAssociatedFactorList",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NT$2 ::= 
            {
              Obj RESULT =null;
		int leftExpressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int leftExpressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Obj leftExpression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String operator = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

									//Code generation
									if (!parser.isErrorFound() && leftExpression != null && !leftExpression.equals(SymbolTable.noObj)) {
										if (!EQUALS.equals(operator) && (leftExpression.getKind() == MyObj.Elem || leftExpression.getKind() == MyObj.Fld)) {
											Code.put(Code.dup2);
											Code.load(leftExpression);
										}
										//We do need to load variables because they are already loaded
									}
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // RightAssociatedTermList ::= RightAssociatedFactorList 
            {
              Obj RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj expression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
								if (expression != null) {
									RESULT = expression;
								} else {
									parser.report_internal_error("NULL expression in production RightAssociatedTermList ::= RightAssociatedFactorList", expressionleft);
									RESULT = SymbolTable.noObj;
								}
							
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RightAssociatedTermList",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // RightAssociatedTermList ::= RightAssociatedFactorList AdditionOperatorRight NT$1 RightAssociatedTermList 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int leftExpressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int leftExpressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Obj leftExpression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String operator = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rightExpressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rightExpressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj rightExpression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
								boolean error = false;
								if (leftExpression == null) {
									parser.report_internal_error("NULL left expression in production RightAssociatedTermList ::= RightAssociatedFactorList AdditionOperatorRight RightAssociatedTermList", leftExpressionleft);
									error = true;
								}

								if (rightExpression == null) {
									parser.report_internal_error("NULL right expression in production RightAssociatedTermList ::= RightAssociatedFactorList AdditionOperatorRight RightAssociatedTermList", leftExpressionleft);
									error = true;
								}

								if (leftExpression != null && !leftExpression.equals(SymbolTable.noObj) && !leftExpression.getType().equals(SymbolTable.intType)) {
									parser.report_semantic_error("Expression " + leftExpression.getName() + " is not of type int", leftExpressionleft);
									error = true;
								}

								if (rightExpression != null && !rightExpression.equals(SymbolTable.noObj) && !rightExpression.getType().equals(SymbolTable.intType)) {
									parser.report_semantic_error("Expression " + rightExpression.getName() + " is not of type int", rightExpressionleft);
									error = true;
								}

								if (leftExpression != null && !leftExpression.equals(SymbolTable.noObj) && leftExpression.getKind() != MyObj.Var && leftExpression.getKind() != MyObj.Fld && leftExpression.getKind() != MyObj.Elem) {
									parser.report_semantic_error("Left side " + leftExpression.getName() + " is not a varaible, array element or class field a", leftExpressionleft);
									error = true;
								}

								if(!error) {
									RESULT = new MyObj(MyObj.Con, leftExpression.getName() + " " + operator + " " + rightExpression.getName(), SymbolTable.intType);
								} else {
									RESULT = SymbolTable.noObj;
								}

								//Code generation
								if (!parser.isErrorFound()) {
									//Load array element or class field beacuse it is not loaded
									if (rightExpression.getKind() == MyObj.Elem || rightExpression.getKind() == MyObj.Fld) {
										Code.load(rightExpression);
									}

									switch (operator) {
										case PLUS_EQUALS: {
											Code.put(Code.add);
											break;
										}
										case MINUS_EQUALS: {
											Code.put(Code.sub);
											break;
										}
									}

									if (leftExpression.getKind() != MyObj.Var) {
										Code.put(Code.dup_x2);
									} else {
										Code.put(Code.dup);
									}

									Code.store(leftExpression);
								}
							
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RightAssociatedTermList",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$1 ::= 
            {
              Obj RESULT =null;
		int leftExpressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int leftExpressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Obj leftExpression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String operator = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

								//Code generation
								if (!parser.isErrorFound() && leftExpression != null && !leftExpression.equals(SymbolTable.noObj)) {
									if (!EQUALS.equals(operator) && (leftExpression.getKind() == MyObj.Elem || leftExpression.getKind() == MyObj.Fld)) {
										Code.put(Code.dup2);
										Code.load(leftExpression);
									}
									//We do need to load variables because they are already loaded
								}
							
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ExpressionPrefix ::= 
            {
              Boolean RESULT =null;
		
					 		RESULT = false;
					 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionPrefix",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ExpressionPrefix ::= MINUS 
            {
              Boolean RESULT =null;
		
							RESULT = true;
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionPrefix",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Expression ::= ExpressionPrefix RightAssociatedTermList 
            {
              Obj RESULT =null;
		int isNegatedleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int isNegatedright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Boolean isNegated = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj expression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					if (expression != null) {
						if (isNegated.booleanValue() && !expression.getType().equals(SymbolTable.intType)) {
							parser.report_semantic_error("Expression must be of type int if it is negated", expressionleft);
							RESULT = SymbolTable.noObj;
						} else {
							RESULT = expression;
						}
					} else {
						parser.report_internal_error("NULL expression in production Expression ::= ExpressionPrefix RightAssociatedTermList", expressionleft);
						RESULT = SymbolTable.noObj;
					}

					//Code generation
					if (!parser.isErrorFound()) {
						//Load array element or class field if it is not loaded
						if (expression.getKind() == MyObj.Elem || expression.getKind() == MyObj.Fld) {
							Code.load(expression);
						}

						if(isNegated.booleanValue()) {
							Code.put(Code.neg);
						}
					}
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ConditionFact ::= Expression 
            {
              Obj RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj expression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						if (expression == null) {
							parser.report_internal_error("NULL expression in production ConditionFact ::= Expression", expressionleft);
							RESULT = SymbolTable.noObj;
						} else if (!expression.getType().equals(SymbolTable.boolType)) {
							parser.report_semantic_error("Expression " + expression.getName() + " is not of bool type", expressionleft);
							RESULT = SymbolTable.noObj;
						} else {
							RESULT = expression;
						}
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConditionFact",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ConditionFact ::= Expression RelationalOperator Expression 
            {
              Obj RESULT =null;
		int leftExpressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leftExpressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Obj leftExpression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String operator = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rightExpressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rightExpressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj rightExpression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						if (leftExpression == null) {
							parser.report_internal_error("NULL left expression in production ConditionFact ::= Expression RelationalOperator Expression", leftExpressionleft);
							RESULT = SymbolTable.noObj;
						} else if (rightExpression == null) {
							parser.report_internal_error("NULL right expression in production ConditionFact ::= Expression RelationalOperator Expression", rightExpressionleft);
							RESULT = SymbolTable.noObj;
						} else if (!leftExpression.equals(SymbolTable.noObj) && !rightExpression.equals(SymbolTable.noObj)){
							if (!leftExpression.getType().compatibleWith(rightExpression.getType())) {
								parser.report_semantic_error("Expressions " + leftExpression.getName() + " and " + rightExpression.getName() + " are incompatible", leftExpressionleft);
								RESULT = SymbolTable.noObj;
							} else if (leftExpression.getType().isRefType() && rightExpression.getType().isRefType() && !EQUAL.equals(operator) && !NOT_EQUAL.equals(operator)) {
								parser.report_semantic_error("Only " + EQUAL + " and " + NOT_EQUAL + " are aloved with referential types", operatorleft);
								RESULT = SymbolTable.noObj;
							} else {
								RESULT = new MyObj(MyObj.Var, leftExpression.getName() + " " + operator + " " + rightExpression.getName(), SymbolTable.boolType);
							}
						} else {
							RESULT = SymbolTable.noObj;
						}
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConditionFact",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ConditionTerm ::= ConditionFact 
            {
              Obj RESULT =null;
		int factleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int factright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj fact = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				 		if (fact == null) {
				 			parser.report_internal_error("NULL rightExpression in production ConditionTerm ::= ConditionFact", factleft);
				 			RESULT = SymbolTable.noObj;
				 		} else if (!fact.equals(SymbolTable.noObj)) {
				 			if (!fact.getType().equals(SymbolTable.boolType)) {
				 				parser.report_semantic_error("Expression " + fact.getName() + " is not of type bool", factleft);
				 				RESULT = SymbolTable.noObj;
				 			} else {
				 				RESULT = fact;
				 			}
				 		} else {
				 			RESULT = SymbolTable.noObj;
				 		}
				 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConditionTerm",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ConditionTerm ::= ConditionTerm AND ConditionFact 
            {
              Obj RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Obj term = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int factleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int factright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj fact = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						if (term == null) {
							parser.report_internal_error("NULL term in production ConditionTerm ::= ConditionTerm AND ConditionFact", factleft);
							RESULT = SymbolTable.noObj;
						} else if (fact == null) {
							parser.report_internal_error("NULL fact in production ConditionTerm ::= ConditionTerm AND ConditionFact", factleft);
							RESULT = SymbolTable.noObj;
						} else if (!term.equals(SymbolTable.noObj) && !fact.equals(SymbolTable.noObj)) {
							if (!term.getType().equals(SymbolTable.boolType)) {
								parser.report_semantic_error("Expression " + term.getName() + " is not of type bool", factleft);
								RESULT = SymbolTable.noObj;
							} else if (!fact.getType().equals(SymbolTable.boolType)) {
								parser.report_semantic_error("Expression " + fact.getName() + " is not of type bool", factleft);
								RESULT = SymbolTable.noObj;
							} else {
								RESULT = new MyObj(MyObj.Var, term.getName() + " && " + fact.getName(), SymbolTable.boolType);
							}
						} else {
							RESULT = SymbolTable.noObj;
						}
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConditionTerm",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Condition ::= ConditionTerm 
            {
              Obj RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj term = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			 		if (term == null) {
			 			parser.report_internal_error("NULL term in production Condition ::= ConditionTerm", termleft);
			 			RESULT = SymbolTable.noObj;
			 		} else if (!term.equals(SymbolTable.noObj)) {
			 			if (!term.getType().equals(SymbolTable.boolType)) {
			 				parser.report_semantic_error("Expression " + term.getName() + " is not of type bool", termleft);
			 				RESULT = SymbolTable.noObj;
			 			} else {
			 				RESULT = term;
			 			}
			 		} else {
			 			RESULT = SymbolTable.noObj;
			 		}
			  	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condition",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Condition ::= Condition OR ConditionTerm 
            {
              Obj RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Obj condition = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj term = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					if (condition == null) {
						parser.report_internal_error("NULL condition in production Condition ::= Condition OR ConditionTerm", termleft);
						RESULT = SymbolTable.noObj;
					} else if (term == null) {
						parser.report_internal_error("NULL term in production Condition ::= Condition OR ConditionTerm", termleft);
						RESULT = SymbolTable.noObj;
					} else if (!condition.equals(SymbolTable.noObj) && !term.equals(SymbolTable.noObj)) {
						if (!condition.getType().equals(SymbolTable.boolType)) {
							parser.report_semantic_error("Expression " + condition.getName() + " is not of type bool", termleft);
							RESULT = SymbolTable.noObj;
						} else if (!term.getType().equals(SymbolTable.boolType)) {
							parser.report_semantic_error("Expression " + term.getName() + " is not of type bool", termleft);
							RESULT = SymbolTable.noObj;
						} else {
							RESULT = new MyObj(MyObj.Var, condition.getName() + " || " + term.getName(), SymbolTable.boolType);
						}
					} else {
						RESULT = SymbolTable.noObj;
					}
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condition",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ActualParameters ::= 
            {
              Object RESULT =null;
		
							actualParametersStack.push(new ArrayList<>());
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ActualParameters",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ActualParameters ::= Expression 
            {
              Object RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj expression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							List<Obj> parameters = new ArrayList<>();
							if (expression == null) {
								parser.report_internal_error("NULL expression in production ActualParameters ::= expression", expressionleft);
								parameters.add(SymbolTable.noObj);
							} else {
								parameters.add(expression);
							}
							actualParametersStack.push(parameters);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ActualParameters",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ActualParameters ::= ActualParameters COMA Expression 
            {
              Object RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj expression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							if (actualParametersStack.empty()) {
								parser.report_internal_error("Internal error, got empty parameter list", expressionleft);
							} else if (expression == null) {
								parser.report_internal_error("NULL expression in production ActualParameters ::= ActualParameters COMA Expression", expressionleft);
								actualParametersStack.peek().add(SymbolTable.noObj);
							} else {
								actualParametersStack.peek().add(expression);
							}
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ActualParameters",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // AssignStatement ::= Designator error 
            {
              Object RESULT =null;
		 
							printSyntaxErrorDescription("Incorrect assign operation syntax"); 
							RESULT = SymbolTable.noObj;
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignStatement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // AssignStatement ::= Designator AssignOperator NT$0 Expression 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String operator = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj expression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							//Semantic analysis
							if (designator == null) {
								parser.report_internal_error("NULL designator in production AssignStatement ::= Designator AssignOperator Expression", designatorleft);
							} else if (expression == null) {
								parser.report_internal_error("NULL expression in production AssignStatement ::= Designator AssignOperator Expression", expressionleft);
							} else if (!designator.equals(SymbolTable.noObj) && !expression.equals(SymbolTable.noObj)) {
								if (designator.getKind() != MyObj.Var && designator.getKind() != MyObj.Elem && designator.getKind() != MyObj.Fld) {
									parser.report_semantic_error("Designator " + designator.getName() + " must be a variable, array element or class field", expressionleft);
								} else if (!expression.getType().assignableTo(designator.getType())) {
									parser.report_semantic_error("Expression " + expression.getName() + " of type " + SymbolTable.getTypeName(expression.getType()) + " is not assignable to designator " + designator.getName() + " of type " + SymbolTable.getTypeName(designator.getType()), expressionleft);
								} else if (!EQUALS.equals(operator) && !designator.getType().equals(SymbolTable.intType)) {
									parser.report_semantic_error("Designator " + expression.getName() + " must be of type int when using combined operator " + operator, expressionleft);
								} else if (!EQUALS.equals(operator) && !expression.getType().equals(SymbolTable.intType)) {
									parser.report_semantic_error("Expression " + expression.getName() + " must be of type int when using combined operator " + operator, expressionleft);
								} 
							}

							//Code generation
							if (!parser.isErrorFound()) {
								if (!EQUALS.equals(operator)) {
									switch (operator) {
										case PLUS_EQUALS: {
											Code.put(Code.add);
											break;
										}
										case MINUS_EQUALS: {
											Code.put(Code.sub);
											break;
										}
										case TIMES_EQUALS: {
											Code.put(Code.mul);
											break;
										}
										case SOLIDUS_EQUALS: {
											Code.put(Code.div);
											break;
										}
										case PERCENT_EQUALS: {
											Code.put(Code.rem);
											break;
										}
									}
								}

								Code.store(designator);
							}
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignStatement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$0 ::= 
            {
              Object RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String operator = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

							//Code generation
							if (!parser.isErrorFound()) {
								if (!EQUALS.equals(operator)) {
									if (designator.getKind() != MyObj.Var) {
										Code.put(Code.dup2);
									}
									Code.load(designator);
								}
							}
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // MethodCall ::= LEFT_PARENTHESIS error RIGHT_PARENTHESIS 
            {
              List<Obj> RESULT =null;
		 
			 		printSyntaxErrorDescription("Incorrect actual parameter list syntax"); 

			 		RESULT = new ArrayList<Obj>();
			 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodCall",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // MethodCall ::= LEFT_PARENTHESIS ActualParameters RIGHT_PARENTHESIS 
            {
              List<Obj> RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			 		incrementCurrentMethodCallCount();

			 		if (actualParametersStack.isEmpty()) {
			 			parser.report_internal_error("Internal error, empty actual parameter stack", tokenleft);
			 			RESULT = null;
			 		} else {
			 			RESULT = actualParametersStack.pop();
			 		}
			 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodCall",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DesignatorStatement ::= Designator DECREMENT 
            {
              Object RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
							if (designator == null) {
								parser.report_internal_error("NULL designator in production DesignatorStatement ::= Designator INCREMENT", designatorleft); 
							} else if (!designator.equals(SymbolTable.noObj)) {
								if (designator.getKind() != MyObj.Var && designator.getKind() != MyObj.Elem && designator.getKind() != MyObj.Fld) {
									parser.report_semantic_error("Designator " + designator.getName() + " must be a variable, array element or class field", designatorleft);
								} else if (!designator.getType().equals(SymbolTable.intType)) {
									parser.report_semantic_error("Designator " + designator.getName() + " must be of type int", designatorleft);
								}
							}

							//Code generation
							if (!parser.isErrorFound()) {
								if (designator.getKind() == MyObj.Var && designator.getLevel() == 1) {
									Code.put(Code.inc);
									Code.put(designator.getAdr());
									Code.put(-1);
								} else {
									Code.load(designator);
									Code.loadConst(-1);
									Code.put(Code.add);
									Code.store(designator);
								}
							}
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DesignatorStatement ::= Designator INCREMENT 
            {
              Object RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
							//Semantic analysis
							if (designator == null) {
								parser.report_internal_error("NULL designator in production DesignatorStatement ::= Designator INCREMENT", designatorleft); 
							} else if (!designator.equals(SymbolTable.noObj)) {
								if (designator.getKind() != MyObj.Var && designator.getKind() != MyObj.Elem && designator.getKind() != MyObj.Fld) {
									parser.report_semantic_error("Designator " + designator.getName() + " must be a variable, array element or class field", designatorleft);
								} else if (!designator.getType().equals(SymbolTable.intType)) {
									parser.report_semantic_error("Designator " + designator.getName() + " must be of type int", designatorleft);
								}
							}

							//Code generation
							if (!parser.isErrorFound()) {
								if (designator.getKind() == MyObj.Var && designator.getLevel() == 1) {
									Code.put(Code.inc);
									Code.put(designator.getAdr());
									Code.put(1);
								} else {
									Code.load(designator);
									Code.loadConst(1);
									Code.put(Code.add);
									Code.store(designator);
								}
							}
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DesignatorStatement ::= Designator MethodCall 
            {
              Object RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int parameterListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parameterListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Obj> parameterList = (List<Obj>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							if (designator == null) {
								parser.report_internal_error("NULL designator in production DesignatorStatement ::= Designator MethodCall", designatorleft);
							} else if (parameterList == null) {
								parser.report_internal_error("NULL parameter list in production DesignatorStatement ::= Designator MethodCall", parameterListleft);
							} else if (!designator.equals(SymbolTable.noObj)){
								if (designator.getKind() != MyObj.Global && designator.getKind() != MyObj.Static && designator.getKind() != MyObj.Meth) {
									parser.report_semantic_error("Symbol " + designator.getName() + " is not callable", designatorleft);
								} else {
									if ((designator.getKind() != MyObj.Meth && parameterList.size() != designator.getLevel()) || (designator.getKind() == MyObj.Meth && parameterList.size() != (designator.getLevel() - 1))) {
										parser.report_semantic_error("Incorrect number of parameters in the invokation of " + designator.getName(), designatorleft);
									} else {
										Collection<Obj> functionLocals = designator.getLocalSymbols();
										Iterator<Obj> formalParameterIterator = functionLocals.iterator();

										//If MyObj.Meth skip this parameter
										if (designator.getKind() == MyObj.Meth) {
											formalParameterIterator.next();
										}
										Iterator<Obj> actualParameterIterator = parameterList.iterator();

										while (formalParameterIterator.hasNext() && actualParameterIterator.hasNext()) {
											Obj formalParameter = formalParameterIterator.next();
											Obj actualParameter = actualParameterIterator.next();

											if(!formalParameter.equals(SymbolTable.noObj) && !actualParameter.equals(SymbolTable.noObj) && !actualParameter.getType().assignableTo(formalParameter.getType())) {
												parser.report_semantic_error("Actual parameter " + actualParameter.getName() + " of type " + SymbolTable.getTypeName(actualParameter.getType()) + " is not assignable to formal parameter " + formalParameter.getName() + " of type " + SymbolTable.getTypeName(formalParameter.getType()), designatorleft);
											}
										}
									}
								}
							}
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DesignatorStatement ::= AssignStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ForPostStatement ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForPostStatement",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ForPostStatement ::= error 
            {
              Object RESULT =null;
		 printSyntaxErrorDescription("Incorrect post for loop statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForPostStatement",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ForPostStatement ::= DesignatorStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForPostStatement",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ForCondition ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForCondition",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ForCondition ::= error 
            {
              Object RESULT =null;
		 printSyntaxErrorDescription("Incorrect for condition statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForCondition",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ForCondition ::= Condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForCondition",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ForInitialStatement ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForInitialStatement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ForInitialStatement ::= error 
            {
              Object RESULT =null;
		 printSyntaxErrorDescription("Incorrect initial for loop statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForInitialStatement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ForInitialStatement ::= DesignatorStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForInitialStatement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PrintParameters ::= Expression COMA NUMERICAL_CONSTANT 
            {
              Object RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Obj expression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						//Semantic analysis
						if (expression == null) {
							parser.report_internal_error("NULL print expression in production PrintParameters ::= Expression COMA Expression", expressionleft);
						} else if (!expression.equals(SymbolTable.noObj)) {
							if (!expression.getType().equals(SymbolTable.intType) && !expression.getType().equals(SymbolTable.charType) && !expression.getType().equals(SymbolTable.boolType)) {
								parser.report_semantic_error("Print expression " + expression.getName() + " must be of int, char or bool type", expressionleft);
							} 
						}

						//Code generation
						if (!parser.isErrorFound()) {
							Code.loadConst(value.intValue());
							if (expression.getType().equals(SymbolTable.charType)) {
								Code.put(Code.bprint);
							} else {
								Code.put(Code.print);
							}
						}
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrintParameters",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // PrintParameters ::= Expression 
            {
              Object RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj expression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						//Semantic analysis
						if (expression == null) {
							parser.report_internal_error("NULL expression in production PrintParameters ::= Expression", expressionleft);
						} else if (!expression.equals(SymbolTable.noObj)) {
							if (!expression.getType().equals(SymbolTable.intType) && !expression.getType().equals(SymbolTable.charType) && !expression.getType().equals(SymbolTable.boolType)) {
								parser.report_semantic_error("Expression " + expression.getName() + " must be of int, char or bool type", expressionleft);
							}
						}

						//Code generation
						if (!parser.isErrorFound()) {
							Code.loadConst(1);
							if (expression.getType().equals(SymbolTable.charType)) {
								Code.put(Code.bprint);
							} else {
								Code.put(Code.print);
							}
						}
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrintParameters",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ReturnValue ::= 
            {
              Obj RESULT =null;
		
					RESULT = SymbolTable.voidObject;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnValue",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ReturnValue ::= Expression 
            {
              Obj RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj expression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					if (expression == null) {
						parser.report_internal_error("NULL expression in production ReturnValue ::= Expression", expressionleft);
						RESULT = SymbolTable.noObj;
					} else {
						RESULT = expression;
					}
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnValue",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // MatchedStatement ::= LEFT_BRACE StatementList RIGHT_BRACE 
            {
              Object RESULT =null;
		
					 		incrementCodeBlockCount();
					 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MatchedStatement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // MatchedStatement ::= PRINT LEFT_PARENTHESIS PrintParameters RIGHT_PARENTHESIS SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MatchedStatement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // MatchedStatement ::= READ LEFT_PARENTHESIS Designator RIGHT_PARENTHESIS SEMICOLON 
            {
              Object RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
					 		if (designator == null) {
					 			parser.report_internal_error("NULL designator in production MatchedStatement ::= READ LEFT_PARENTHESIS Designator RIGHT_PARENTHESIS SEMICOLON", designatorleft);
					 		} else if (!designator.equals(SymbolTable.noObj)) {
					 			if (designator.getKind() != MyObj.Var && designator.getKind() != MyObj.Elem && designator.getKind() != MyObj.Fld) {
					 				parser.report_semantic_error("Designator " + designator.getName() +" must be a variable, array element or class field", designatorleft);
					 			} else if (!designator.getType().equals(SymbolTable.intType) && !designator.getType().equals(SymbolTable.charType) && !designator.getType().equals(SymbolTable.boolType)) {
					 				parser.report_semantic_error("Designator " + designator.getName() +" must be of int, char of bool type", designatorleft);
					 			}
					 		}
					 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MatchedStatement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // MatchedStatement ::= RETURN ReturnValue SEMICOLON 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Obj value = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					 		if (value == null) {
					 			parser.report_internal_error("NULL value in production MatchedStatement ::= RETURN ReturnValue SEMICOLON", valueleft);
					 		} else if (currentMethod == null) {
					 			parser.report_semantic_error("Found return statement outside of method or function", valueleft);
					 		} else if (currentMethod.getType().equals(SymbolTable.voidType) && !value.equals(SymbolTable.voidObject)) {
					 			parser.report_semantic_error("Return statement must be empty for void type method or function " + currentMethod.getName(), valueleft);
					 			returnFound = true;
					 		} else if (!currentMethod.getType().equals(SymbolTable.voidType) && value.equals(SymbolTable.voidObject)) {
					 			parser.report_semantic_error("Empty return expression, must be of type " + SymbolTable.getTypeName(currentMethod.getType()), valueleft);
					 			returnFound = true;
					 		} else if (!currentMethod.getType().equals(SymbolTable.voidType) && !value.getType().equals(currentMethod.getType())) {
					 			parser.report_semantic_error("Return type must be equivalent to " + SymbolTable.getTypeName(currentMethod.getType()), valueleft);
					 			returnFound = true;
					 		} else {
					 			returnFound = true;
					 		}
					 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MatchedStatement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // MatchedStatement ::= CONTINUE SEMICOLON 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							if (forLoopContinueStack.isEmpty()) {
								parser.report_semantic_error("CONTINUE statement found outside of loop", tokenleft);
							} else {
								//Add the address of continue statement
							}
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MatchedStatement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // MatchedStatement ::= BREAK SEMICOLON 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							if (forLoopBreakStack.isEmpty()) {
								parser.report_semantic_error("BREAK statement found outside of loop", tokenleft);
							} else {
								//Add the address of break statement
							}
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MatchedStatement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // MatchedStatement ::= DesignatorStatement SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MatchedStatement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // MatchedStatement ::= ForHeader MatchedStatement 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
							if (forLoopBreakStack.isEmpty()) {
								parser.report_internal_error("For loop break stack is empty", tokenleft);
							} else if (forLoopContinueStack.isEmpty()) {
								parser.report_internal_error("For loop continue stack is empty", tokenleft);
							} else {
								//Iterate trough both lists and fix break and continue adressess
								forLoopBreakStack.pop();
								forLoopContinueStack.pop();
							}
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MatchedStatement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // MatchedStatement ::= IfHeader MatchedStatement ELSE MatchedStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MatchedStatement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // UnmatchedStatement ::= ForHeader UnmatchedStatement 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
							if (forLoopBreakStack.isEmpty()) {
								parser.report_internal_error("For loop break stack is empty", tokenleft);
							} else if (forLoopContinueStack.isEmpty()) {
								parser.report_internal_error("For loop continue stack is empty", tokenleft);
							} else {
								//Iterate trough both lists and fix break and continue adressess
								forLoopBreakStack.pop();
								forLoopContinueStack.pop();
							}
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnmatchedStatement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // UnmatchedStatement ::= IfHeader MatchedStatement ELSE UnmatchedStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnmatchedStatement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // UnmatchedStatement ::= IfHeader Statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnmatchedStatement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ForHeader ::= FOR LEFT_PARENTHESIS error RIGHT_PARENTHESIS 
            {
              Object RESULT =null;
		
					printSyntaxErrorDescription("Incorrect for loop inner statements");

					forLoopBreakStack.push(new ArrayList<>());
					forLoopContinueStack.push(new ArrayList<>());
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForHeader",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ForHeader ::= FOR LEFT_PARENTHESIS ForInitialStatement SEMICOLON ForCondition SEMICOLON ForPostStatement RIGHT_PARENTHESIS 
            {
              Object RESULT =null;
		
					forLoopBreakStack.push(new ArrayList<>());
					forLoopContinueStack.push(new ArrayList<>());
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForHeader",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // IfHeader ::= IF LEFT_PARENTHESIS RIGHT_PARENTHESIS 
            {
              Object RESULT =null;
		 printSyntaxErrorDescription("Incorrect condition declaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfHeader",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // IfHeader ::= IF LEFT_PARENTHESIS error RIGHT_PARENTHESIS 
            {
              Object RESULT =null;
		 printSyntaxErrorDescription("Incorrect condition declaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfHeader",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // IfHeader ::= IF LEFT_PARENTHESIS Condition RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfHeader",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Statement ::= UnmatchedStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Statement ::= MatchedStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Type ::= IDENTIFIER 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Obj typeObject = SymbolTable.find(name);
				if (SymbolTable.noObj.equals(typeObject)) {
					parser.report_semantic_error("No symbol named " + name, nameleft);
					RESULT = SymbolTable.noObj;
				} else if (Obj.Type != typeObject.getKind()) {
					parser.report_semantic_error("Name " + name + " is not a type", nameleft);
					RESULT = SymbolTable.noObj;
				} else {
					RESULT = typeObject;
				}
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // MethodVariableList ::= Variable 
            {
              List<Variable> RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable variable = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
							incrementCurrentMethodVariableCount(); 

							//Semantic analysis
							RESULT = new ArrayList<Variable>();
							if (variable == null) {
								parser.report_internal_error("NULL variable in production MethodVariableList ::= Variable", variableleft);
							} else {
								RESULT.add(variable);
							}
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodVariableList",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // MethodVariableList ::= MethodVariableList COMA Variable 
            {
              List<Variable> RESULT =null;
		int localsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int localsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Variable> locals = (List<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable variable = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
							incrementCurrentMethodVariableCount(); 

							//Semantic analysis
							if (locals == null) {
								parser.report_internal_error("NULL locals list int production MethodVariableList ::= MethodVariableList COMA Variable", variableleft);
								RESULT = null;
							} else {
								locals.add(variable);
								RESULT = locals;
							}
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodVariableList",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // MethodVariableDeclaration ::= error 
            {
              Object RESULT =null;
		 printSyntaxErrorDescription("Incorrect local variable declaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodVariableDeclaration",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // MethodVariableDeclaration ::= error SEMICOLON 
            {
              Object RESULT =null;
		 printSyntaxErrorDescription("Incorrect local variable declaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodVariableDeclaration",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // MethodVariableDeclaration ::= Type MethodVariableList SEMICOLON 
            {
              Object RESULT =null;
		int typeObjectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeObjectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Obj typeObject = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int localsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int localsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Variable> locals = (List<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
									//Semantic analysis 
									if (typeObject == null) {
										parser.report_internal_error("NULL type object in production MethodVariableDeclaration ::= Type MethodVariableList SEMICOLON", typeObjectleft);
									} else if (locals == null) {
										parser.report_internal_error("NULL locals in production MethodVariableDeclaration ::= Type MethodVariableList SEMICOLON", localsleft);
									} else if (typeObject.getType() != SymbolTable.noType) {
										for(Variable localVariable : locals) {
											if (SymbolTable.currentScope.findSymbol(localVariable.getName()) != null) {
												parser.report_semantic_error("Redefinition of symbol " + localVariable.getName(), typeObjectleft);
											} else {
												Obj newObject = null;
												if (localVariable.isArray()) {
													newObject = SymbolTable.insert(Obj.Var, localVariable.getName(), new MyStruct(Struct.Array, typeObject.getType()));
												} else {
													newObject = SymbolTable.insert(Obj.Var, localVariable.getName(), typeObject.getType());
												}

												if (newObject == SymbolTable.noObj) {
													parser.report_internal_error("Could not insert symbol " + localVariable.getName() + " into symbol table", typeObjectleft);
												} else {
													newObject.setLevel(SymbolTable.getCurrentLevel());
													newObject.setFpPos(methodVariablePosition);
													newObject.setAdr(methodVariablePosition);
													methodVariablePosition++;
												}
											}
										}
									}
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodVariableDeclaration",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // MethodVariableDeclarationList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodVariableDeclarationList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // MethodVariableDeclarationList ::= MethodVariableDeclarationList MethodVariableDeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodVariableDeclarationList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FormalParameter ::= Type IDENTIFIER Brackets 
            {
              Obj RESULT =null;
		int typeObjectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeObjectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Obj typeObject = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int isArrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int isArrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean isArray = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						incrementFormalArgumentsCount();
						
						//Semantic analysis
						if (typeObject == null) {
							parser.report_internal_error("NULL type object in production FormalParameter ::= Type IDENTIFIER BRACKETS", typeObjectleft);
						} if (!typeObject.equals(SymbolTable.noObj)) {
							if (SymbolTable.currentScope.findSymbol(name) != null) {
								parser.report_semantic_error("Redefinition of " + name, nameleft);
							} else {
								Obj newObject = null;
								if (isArray) {
									newObject = new MyObj(MyObj.Var, name, new MyStruct(Struct.Array, typeObject.getType()));
								} else {
									newObject = new MyObj(MyObj.Var, name, typeObject.getType());
								}
							
								RESULT = newObject;
							}
						} else {
							RESULT = SymbolTable.noObj;
						}
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalParameter",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FormalParameterList ::= error 
            {
              List<Obj> RESULT =null;
		 
							printSyntaxErrorDescription("Incorrect formal parameter declaration"); 

							RESULT = new ArrayList<>();
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalParameterList",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FormalParameterList ::= FormalParameterList COMA error 
            {
              List<Obj> RESULT =null;
		int formalParameterListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int formalParameterListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Obj> formalParameterList = (List<Obj>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
							printSyntaxErrorDescription("Incorrect formal parameter declaration"); 

							if (formalParameterList == null) {
								parser.report_internal_error("NULL formal parameter list in production FormalParameterList ::= FormalParameterList COMA error", formalParameterListleft);
								RESULT = new ArrayList<>();
								RESULT.add(SymbolTable.noObj);
							} else {
								RESULT = formalParameterList;
								RESULT.add(SymbolTable.noObj);
							}
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalParameterList",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FormalParameterList ::= 
            {
              List<Obj> RESULT =null;
		
							RESULT = new ArrayList<>();
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalParameterList",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FormalParameterList ::= FormalParameter 
            {
              List<Obj> RESULT =null;
		int formalParameterleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int formalParameterright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj formalParameter = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							if (formalParameter == null) {
								parser.report_internal_error("NULL formal parameter in production FormalParameterList ::= formalParameter", formalParameterleft);
								RESULT = new ArrayList<>();
								RESULT.add(SymbolTable.noObj);
							} else {
								RESULT = new ArrayList<>();
								RESULT.add(formalParameter);
							}
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalParameterList",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FormalParameterList ::= FormalParameterList COMA FormalParameter 
            {
              List<Obj> RESULT =null;
		int formalParameterListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int formalParameterListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Obj> formalParameterList = (List<Obj>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int formalParameterleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int formalParameterright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj formalParameter = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							if (formalParameterList == null) {
								parser.report_internal_error("NULL formal parameter list in production FormalParameterList ::= FormalParameterList COM FormalParameter", formalParameterleft);
								RESULT = new ArrayList<>();
							}

							if (formalParameter == null) {
								parser.report_internal_error("NULL formal parameter in production FormalParameterList ::= FormalParameterList COM FormalParameter", formalParameterleft);
								RESULT = new ArrayList<>();
								RESULT.add(SymbolTable.noObj);	
							} else {
								RESULT = formalParameterList;
								RESULT.add(formalParameter);
							}
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalParameterList",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ReturnType ::= VOID 
            {
              Obj RESULT =null;
		
			   		RESULT = SymbolTable.find("void");
			   	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnType",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ReturnType ::= Type 
            {
              Obj RESULT =null;
		int typeObjectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeObjectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj typeObject = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			   		RESULT = typeObject;
			   	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnType",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // StaticModifier ::= 
            {
              Boolean RESULT =null;
		
				   		incrementCurrentNonStaticMethodCount();
				   		
				   		//Semantic analysis
						RESULT = false;
				   	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StaticModifier",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // StaticModifier ::= STATIC 
            {
              Boolean RESULT =null;
		int attributeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int attributeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object attribute = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						incrementStaticMethodCount();

						//Semantic analysis
						if (currentClass == null) {
							parser.report_semantic_error("Static method outside class", attributeleft);
							RESULT = false;
						} else {
							RESULT = true;
						}
						
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StaticModifier",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MethodSignature ::= StaticModifier ReturnType IDENTIFIER LEFT_PARENTHESIS FormalParameterList RIGHT_PARENTHESIS 
            {
              Object RESULT =null;
		int isStaticleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int isStaticright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Boolean isStatic = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int typeObjectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int typeObjectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Obj typeObject = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int formalParameterListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int formalParameterListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Obj> formalParameterList = (List<Obj>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
							//Semantic analysis
							if (typeObject == null) {
								parser.report_internal_error("NULL type object in production MethodSignature ::= StaticModifier ReturnType IDENTIFIER LEFT_PARENTHESIS FormalParameterleft RIGHT_PARENTHESIS", typeObjectleft);
							} else if (formalParameterList == null) {
								parser.report_internal_error("NULL formal parameter list in production MethodSignature ::= StaticModifier ReturnType IDENTIFIER LEFT_PARENTHESIS FormalParameterleft RIGHT_PARENTHESIS", typeObjectleft);
							} else if (!typeObject.equals(SymbolTable.noObj)) {
								currentMethod = null;
								methodVariablePosition = 0;

								if (SymbolTable.currentScope.findSymbol(identifier) != null) {
									parser.report_semantic_error("Redefinition of symbol " + identifier, identifierleft);
								} else {

									if (currentClass == null && isStatic.booleanValue() == false) {
										currentMethod = SymbolTable.insert(MyObj.Global, identifier, typeObject.getType());
									} else {
										Obj inheritedMember = null;
										if (currentClass != null) {
											inheritedMember = currentClass.getType().getMembersTable().searchKey(identifier);
										}

										if (inheritedMember != null) {
											Obj method = new MyObj(MyObj.Meth, identifier, typeObject.getType());

											SymbolDataStructure locals = new HashTableDataStructure();
											//Insert this
											locals.insertKey(new MyObj(MyObj.Var, THIS, currentClass.getType()));
											
											for (Obj formalParameter : formalParameterList) {
												if (!formalParameter.equals(SymbolTable.noObj)) {
													locals.insertKey(formalParameter);
												}
											}

											method.setLocals(locals);
											method.setLevel(locals.numSymbols());										

											if (!method.equals(inheritedMember)) {
												parser.report_semantic_error("Cannot redefine inherited member " + identifier, identifierleft);
											} else {//It is redefined method remove its node from current class
												currentClass.getType().getMembersTable().deleteKey(identifier);
												currentMethod = SymbolTable.insert(MyObj.Meth, identifier, typeObject.getType());
											}
										} else if (isStatic != null && isStatic.booleanValue()) { 
											currentMethod = SymbolTable.insert(MyObj.Static, identifier, typeObject.getType());
										} else {
											currentMethod = SymbolTable.insert(MyObj.Meth, identifier, typeObject.getType());
										}
									}


								}

								SymbolTable.openScope();
									
								if (currentMethod != null) {
									if (currentMethod.equals(SymbolTable.noObj)) {
										currentMethod = null;
										parser.report_semantic_error("Could not insert symbol " + identifier + "into symbol talbe", identifierleft);
									} else {
										//If non-static method add this formal parameter
										if (currentClass != null && !isStatic.booleanValue()) {
											formalParameterList.add(0, new MyObj(MyObj.Var, THIS, currentClass.getType()));
										}

										//Add the rest of the local parameters
										for (Obj formalParameter : formalParameterList) {
											if (!formalParameter.equals(SymbolTable.noObj)) {
												Obj newObject = SymbolTable.insert(MyObj.Var, formalParameter.getName(), formalParameter.getType());

												if (newObject == SymbolTable.noObj) {
													parser.report_internal_error("Could not insert symbol " + formalParameter.getName() + " into symbol table", identifierleft);
												} else {
													newObject.setLevel(SymbolTable.getCurrentLevel());
													newObject.setFpPos(methodVariablePosition);
													newObject.setAdr(methodVariablePosition);
													methodVariablePosition++;
												}
											}
										}

										currentMethod.setLevel(methodVariablePosition);
									}
								}
							} else {
								SymbolTable.openScope();
							}
						
							//Code generation
							if(!parser.isErrorFound()) {
								currentMethod.setAdr(Code.pc);
								Code.put(Code.enter);
								Code.put(formalParameterList.size());
							}
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodSignature",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // MethodVariableDeclarationListWithAction ::= MethodVariableDeclarationList 
            {
              Object RESULT =null;
		
												//Code generation
												if (!parser.isErrorFound()) {
													//Second parameter for enter instruction
													Code.put(SymbolTable.currentScope.getnVars());
												}
											
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodVariableDeclarationListWithAction",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MethodDeclaration ::= MethodSignature MethodVariableDeclarationListWithAction LEFT_BRACE StatementList RIGHT_BRACE 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							if (currentMethod != null && isMain(currentMethod.getName())) {
								incrementMainVariableCount();
								incrementMainMethodCallCount();
							} else {
								invalidateCurrentMethodVariableCount();
								invalidateCurrentArrayCount();
								invalidateCurrentMethodCallCount();
							}
							incrementCodeBlockCount();

							//Semantic analysis
							if (currentMethod != null) {
								SymbolTable.chainLocalSymbols(currentMethod);

								if (!currentMethod.getType().equals(SymbolTable.voidType) && !returnFound) {
									parser.report_semantic_error("No return statement found for method or function " + currentMethod.getName(), tokenleft);
								}
							}

							SymbolTable.closeScope();
							currentMethod = null;
							methodVariablePosition = 0;
							returnFound = false;

							if(!parser.isErrorFound()) {
								Code.put(Code.exit);
								Code.put(Code.return_);
							}
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDeclaration",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MethodDeclarationList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDeclarationList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MethodDeclarationList ::= MethodDeclarationList MethodDeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDeclarationList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ClassMethodList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassMethodList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ClassMethodList ::= LEFT_BRACE MethodDeclarationList RIGHT_BRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassMethodList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ClassVariableList ::= Variable 
            {
              List<Variable> RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable variable = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
							incrementClassVariableCount(); 

							//Semantic analysis
							RESULT = new ArrayList<Variable>();
							if (variable == null) {
								parser.report_internal_error("NULL variable in production ClassVariableList ::= Variable", variableleft);
							} else {
								RESULT.add(variable);
							}
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassVariableList",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ClassVariableList ::= ClassVariableList COMA Variable 
            {
              List<Variable> RESULT =null;
		int variablesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int variablesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Variable> variables = (List<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable variable = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
							incrementClassVariableCount(); 

							//Semantic analysis
							if (variables == null) {
								parser.report_internal_error("NULL variable list in production ClassVariableList ::= ClassVariableList COMA Variable", variableleft);
								RESULT = null;
							} else if (variable == null) {
								parser.report_internal_error("NULL variable in production ClassVariableList ::= ClassVariableList COMA Variable", variableleft);
								RESULT = variables;
							} else {
								variables.add(variable);
								RESULT = variables;
							}
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassVariableList",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ClassVariableDeclaration ::= error 
            {
              Object RESULT =null;
		 printSyntaxErrorDescription("Incorrect class variable declaration a"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassVariableDeclaration",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ClassVariableDeclaration ::= error SEMICOLON 
            {
              Object RESULT =null;
		 printSyntaxErrorDescription("Incorrect class variable declaration b"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassVariableDeclaration",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ClassVariableDeclaration ::= Type ClassVariableList SEMICOLON 
            {
              Object RESULT =null;
		int typeObjectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeObjectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Obj typeObject = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int variablesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int variablesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Variable> variables = (List<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
									//Semantic analysis
									if (typeObject == null) {
										parser.report_internal_error("NULL type object in production ClassVariableDeclaration ::= Type ClassVariableList SEMICOLON", typeObjectleft);
									} else if (variables == null) {
										parser.report_internal_error("NULL varaible list in production ClassVariableDeclaration ::= Type ClassVariableList SEMICOLON", typeObjectleft);
									} else if (!typeObject.equals(SymbolTable.noObj)) { 
										for(Variable variable : variables) {
											if(SymbolTable.currentScope.findSymbol(variable.getName()) != null) {
												parser.report_semantic_error("Redefinition of name " + variable.getName(), typeObjectleft);
											} else {
												//Check if the field is inherited
												Obj inheritedMember = null;
												if (currentClass != null) {
													inheritedMember = currentClass.getType().getMembersTable().searchKey(variable.getName());
												}

												if (inheritedMember != null && (inheritedMember.getKind() != MyObj.Fld
																				|| !inheritedMember.getType().equals(typeObject.getType())
																				|| (variable.isArray() && !inheritedMember.getType().equals(new MyStruct(MyStruct.Array, typeObject.getType()))))) {
												
													parser.report_semantic_error("Redefinition of inherited field " + variable.getName(), typeObjectleft);
												
												} else if (inheritedMember == null) {
													Obj newObject = null;
													if (variable.isArray()) {
														newObject = SymbolTable.insert(Obj.Fld, variable.getName(), new MyStruct(MyStruct.Array, typeObject.getType()));
													} else {
														newObject = SymbolTable.insert(Obj.Fld, variable.getName(), typeObject.getType());
													}
													if (newObject != null && newObject != SymbolTable.noObj) {
														newObject.setAdr(classVariablePosition);
														newObject.setLevel(SymbolTable.getCurrentLevel());
														classVariablePosition++;
													} else {
														parser.report_internal_error("Could not insert symbol: " + variable.getName() + " into symbol table", typeObjectleft);
													}
												}
											}
										}
									}
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassVariableDeclaration",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ClassVariableDeclarationList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassVariableDeclarationList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ClassVariableDeclarationList ::= ClassVariableDeclarationList ClassVariableDeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassVariableDeclarationList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ParentClassDeclaration ::= error 
            {
              Obj RESULT =null;
		 
						   		printSyntaxErrorDescription("Incorrect declaration of parent class"); 

						   		RESULT = SymbolTable.noObj;
						   	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParentClassDeclaration",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ParentClassDeclaration ::= 
            {
              Obj RESULT =null;
		
						   		RESULT = SymbolTable.noObj;
						   	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParentClassDeclaration",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ParentClassDeclaration ::= EXTENDS Type 
            {
              Obj RESULT =null;
		int typeObjectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeObjectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj typeObject = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						   		//Semantic analysis
						   		if (typeObject == null) {
						   			parser.report_internal_error("NULL type object in production ParentClassDeclaration ::= EXTENDS Type", typeObjectleft);
						   			RESULT = SymbolTable.noObj;
						   		} if (!typeObject.equals(SymbolTable.noObj)) {
						   			if (typeObject.getType().getKind() != Struct.Class) {
						   				parser.report_semantic_error("Name " + typeObject.getName() + " is not a class type", typeObjectleft);
						   				RESULT = SymbolTable.noObj;
						   			} else {
						   				RESULT = typeObject;
						   			}
						   		} else {
						   			RESULT = SymbolTable.noObj;
						   		}
						   	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParentClassDeclaration",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ClassHeader ::= CLASS IDENTIFIER ParentClassDeclaration 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int typeObjectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeObjectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj typeObject = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					if (typeObject == null) {
						parser.report_internal_error("NULL type object in production ClassHeader ::= CLASS IDENTIFIER ParentClassDeclaration", typeObjectleft);
					} else if (SymbolTable.currentScope.findSymbol(name) != null) {
						parser.report_semantic_error("Redefinition of name " + name, nameleft);
					} else {
						if (!typeObject.equals(SymbolTable.noObj)) {
							//Copy parent fields to your class, it must be a non shalow copy
							Struct classStruct = new MyStruct(MyStruct.Class, typeObject.getType());
							classStruct.setMembers(typeObject.getType().getMembersTable());

							currentClass = SymbolTable.insert(MyObj.Type, name, classStruct);
						} else {
							currentClass = SymbolTable.insert(MyObj.Type, name, new MyStruct(MyStruct.Class));
						}

						if (currentClass == null || currentClass.equals(SymbolTable.noObj)) {
							parser.report_internal_error("Could not insert name " + name + " into symbol table", nameleft);
						} else {
							classVariablePosition = currentClass.getType().getNumberOfFields();
						}
					}
					SymbolTable.openScope();
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassHeader",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ClassDeclaration ::= ClassHeader LEFT_BRACE ClassVariableDeclarationList ClassMethodList RIGHT_BRACE 
            {
              Object RESULT =null;
		
						 	incrementNonStaticMethodCount();
						 	incrementClassDefinitionCount();

						 	//Semantic analysis
						 	if (currentClass != null) {
						 		SymbolTable.chainLocalSymbols(currentClass.getType());
						 	}

						 	classVariablePosition = 0;
						 	currentClass = null;
						 	SymbolTable.closeScope();
						 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Brackets ::= 
            {
              Boolean RESULT =null;
		
			 		RESULT = false;
			 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Brackets",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Brackets ::= LEFT_BRACKET RIGHT_BRACKET 
            {
              Boolean RESULT =null;
		
					incrementCurrentArrayCount();
					RESULT = true;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Brackets",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Variable ::= IDENTIFIER Brackets 
            {
              Variable RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int isArrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int isArrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean isArray = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Variable(name, isArray);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Variable",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // GlobalVariableList ::= error 
            {
              List<Variable> RESULT =null;
		 
				 			printSyntaxErrorDescription("Incorrect global variable declaration"); 

				 			RESULT = new ArrayList<Variable>();
				 		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalVariableList",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // GlobalVariableList ::= GlobalVariableList COMA error 
            {
              List<Variable> RESULT =null;
		int globalVariablesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int globalVariablesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Variable> globalVariables = (List<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
				 			printSyntaxErrorDescription("Incorrect global variable declaration"); 

				 			if (globalVariables == null) {
				 				parser.report_internal_error("NULL global variable list in production GlobalVariableList ::= GlobalVariableList COMA error", globalVariablesleft);
				 				RESULT = null;
				 			} else {
				 				RESULT = globalVariables;
				 			}
				 		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalVariableList",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // GlobalVariableList ::= Variable 
            {
              List<Variable> RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable variable = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
				 			incrementGlobalVariableCount(); 

				 			//Semantic analysis
				 			RESULT = new ArrayList<Variable>();
							if (variable == null) {
								parser.report_internal_error("NULL varaible in production GlobalVariableList ::= Variable", variableleft);
 							} else {
 								RESULT.add(variable);
 							}
				 		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalVariableList",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // GlobalVariableList ::= GlobalVariableList COMA Variable 
            {
              List<Variable> RESULT =null;
		int globalVariablesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int globalVariablesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Variable> globalVariables = (List<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable variable = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
							incrementGlobalVariableCount(); 

							//Semantic analysis
							if (globalVariables == null) {
								parser.report_internal_error("NULL global varaible list in production GlobalVariableList ::= GlobalVariableList COMA variable", variableleft);
								RESULT = null;
							} else if (variable == null) {
								parser.report_internal_error("NULL global variable in production GlobalVariableList ::= GlobalVariableList COMA variable", variableleft);
								RESULT = globalVariables;
							} else {
								globalVariables.add(variable);
								RESULT = globalVariables;
							}
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalVariableList",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // GlobalVariableDeclaration ::= error COMA GlobalVariableList SEMICOLON 
            {
              Object RESULT =null;
		 printSyntaxErrorDescription("Incorrect global variable declaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalVariableDeclaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // GlobalVariableDeclaration ::= error SEMICOLON 
            {
              Object RESULT =null;
		 printSyntaxErrorDescription("Incorrect global variable list declaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalVariableDeclaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // GlobalVariableDeclaration ::= Type GlobalVariableList SEMICOLON 
            {
              Object RESULT =null;
		int typeObjectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeObjectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Obj typeObject = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int globalVariablesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int globalVariablesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Variable> globalVariables = (List<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
									//Semantic analysis
									if (typeObject == null) {
										parser.report_internal_error("NULL type object in production GlobalVariableDeclaration ::= Type GlobalVariableList SEMICOLON", typeObjectleft);
									} else if (globalVariables == null) {
										parser.report_internal_error("NULL global variable list in production GlobalVariableDeclaration ::= Type GlobalVariableList SEMICOLON", typeObjectleft);										
									} else if (!typeObject.equals(SymbolTable.noObj)) {
										for(Variable variable : globalVariables) {
											if(SymbolTable.currentScope.findSymbol(variable.getName()) != null) {
												parser.report_semantic_error("Redefinition of name " + variable.getName(), typeObjectleft);
											} else {
												Obj newObject = null;
												if (variable.isArray()) {
													newObject = SymbolTable.insert(Obj.Var, variable.getName(), new MyStruct(MyStruct.Array, typeObject.getType()));
												} else {
													newObject = SymbolTable.insert(Obj.Var, variable.getName(), typeObject.getType());
												}
												if (newObject != null && newObject != SymbolTable.noObj) {
													newObject.setAdr(variablePosition);
													newObject.setLevel(SymbolTable.getCurrentLevel());
													variablePosition++;
												} else {
													parser.report_internal_error("Could not insert symbol: " + variable.getName() + " into symbol table", typeObjectleft);
												}
											}
										}
									}

									if(!parser.isErrorFound()) {
										Code.dataSize += globalVariables.size();
									}
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalVariableDeclaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Value ::= BOOLEAN_CONSTANT 
            {
              Value RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean value = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		  		RESULT = new Value(SymbolTable.boolType, value.booleanValue() ? 1 : 0);
		  	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Value ::= CHARACTER_CONSTANT 
            {
              Value RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		  		RESULT = new Value(SymbolTable.charType, (int)value.charAt(0));
		  	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Value ::= NUMERICAL_CONSTANT 
            {
              Value RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		  		RESULT = new Value(SymbolTable.intType, value.intValue());
		  	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Constant ::= IDENTIFIER EQUALS Value 
            {
              Constant RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Value value = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Constant(name, value);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ConstantList ::= Constant 
            {
              List<Constant> RESULT =null;
		int constantleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Constant constant = (Constant)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
				 		incrementConstantCount();

				 		//Semantic analysis
				 		List<Constant> constants = new ArrayList<Constant>();
				 		if (constant == null) {
 							parser.report_internal_error("NULL constant int prod ConstantList ::= Constant", constantleft);
				 		} else {
				 			constants.add(constant);
				 		}
				 		RESULT = constants;
				 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstantList",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ConstantList ::= ConstantList COMA Constant 
            {
              List<Constant> RESULT =null;
		int constantsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int constantsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Constant> constants = (List<Constant>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int constantleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Constant constant = (Constant)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
						incrementConstantCount(); 

						//Semantic analysis
						if (constants == null) {
							parser.report_internal_error("NULL constant list in production ConstantList ::= ConstantList COMA constant", constantleft);
							RESULT = null;
						} else if (constant == null) {
							parser.report_internal_error("NULL constant in production ConstantList ::= ConstantList COMA constant", constantleft);
							RESULT = constants;
						} else {
							constants.add(constant);
							RESULT = constants;
						}
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstantList",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ConstantDeclaration ::= CONST Type ConstantList SEMICOLON 
            {
              Object RESULT =null;
		int typeObjectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeObjectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Obj typeObject = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int constantsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int constantsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Constant> constants = (List<Constant>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
							//Semantic analysis
							if (typeObject == null) {
								parser.report_internal_error("NULL type object in production ConstantDeclaration ::= CONST Type ConstantList SEMICOLON", typeObjectleft);
							} else if (constants == null) {
								parser.report_internal_error("NULL constant list in production ConstantDeclaration ::= CONST Type ConstantList SEMICOLON", typeObjectleft);
							} else if (!typeObject.equals(SymbolTable.noObj)) {
								for(Constant constant : constants) {
									if (!typeObject.getType().equals(constant.getValue().getType())) {
										parser.report_semantic_error("Value " + constant.getValue() + " is not of type " + typeObject.getName(), typeObjectleft);
									} else if (SymbolTable.currentScope.findSymbol(constant.getName()) != null) {
										parser.report_semantic_error("Redefinition of name " + constant.getName(), typeObjectleft);		
									} else {
										Obj newObject = SymbolTable.insert(Obj.Con, constant.getName(), typeObject.getType());
										if (newObject != null && newObject != SymbolTable.noObj) {
											newObject.setAdr(constant.getValue().getValue());
										} else {
											parser.report_internal_error("Could not insert symbol: " + constant.getName() + " into symbol table", typeObjectleft);
										}
									}
								}
							}
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstantDeclaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NonMethodDeclaration ::= ClassDeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NonMethodDeclaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NonMethodDeclaration ::= GlobalVariableDeclaration 
            {
              Object RESULT =null;
		 incrementGlobalArrayCount(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NonMethodDeclaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NonMethodDeclaration ::= ConstantDeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NonMethodDeclaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NonMethodDeclarationList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NonMethodDeclarationList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NonMethodDeclarationList ::= NonMethodDeclarationList NonMethodDeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NonMethodDeclarationList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgramName ::= IDENTIFIER 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT  = SymbolTable.insert(Obj.Prog, name, SymbolTable.noType);
					SymbolTable.openScope();
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProgramName",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROGRAM ProgramName NonMethodDeclarationList LEFT_BRACE MethodDeclarationList RIGHT_BRACE 
            {
              Object RESULT =null;
		int programObjectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int programObjectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Obj programObject = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
				Obj main = SymbolTable.currentScope.findSymbol(MAIN); 
				if (main == null || main.getLevel() != 0 || !main.getType().equals(SymbolTable.voidType)) {
					parser.report_semantic_error("No main symbol found", programObjectleft);
				} 
				SymbolTable.chainLocalSymbols(programObject);
				SymbolTable.closeScope();

				if (!parser.isErrorFound()) {
					Code.mainPc = main.getAdr();
				}
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

