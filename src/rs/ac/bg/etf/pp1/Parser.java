
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Dec 30 12:09:00 CET 2016
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.logging.log4j.Logger;
import rs.ac.bg.etf.pp1.utilities.MyLoggerFactory;
import java.util.*;
import rs.etf.pp1.symboltable.concepts.*;
import rs.ac.bg.etf.utilities.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Dec 30 12:09:00 CET 2016
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\242\000\002\002\010\000\002\002\004\000\002\074" +
    "\003\000\002\003\004\000\002\003\002\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\006\006\000" +
    "\002\101\005\000\002\101\003\000\002\100\005\000\002" +
    "\077\003\000\002\077\003\000\002\077\003\000\002\007" +
    "\005\000\002\007\004\000\002\007\006\000\002\104\005" +
    "\000\002\104\003\000\002\104\005\000\002\104\003\000" +
    "\002\102\004\000\002\103\004\000\002\103\002\000\002" +
    "\010\011\000\002\076\004\000\002\076\002\000\002\076" +
    "\003\000\002\011\004\000\002\011\002\000\002\012\005" +
    "\000\002\012\004\000\002\012\003\000\002\013\005\000" +
    "\002\013\003\000\002\014\005\000\002\014\002\000\002" +
    "\004\004\000\002\004\002\000\002\015\013\000\002\105" +
    "\004\000\002\016\003\000\002\016\002\000\002\106\003" +
    "\000\002\106\003\000\002\017\005\000\002\017\003\000" +
    "\002\017\002\000\002\017\005\000\002\017\003\000\002" +
    "\022\005\000\002\020\004\000\002\020\003\000\002\020" +
    "\002\000\002\021\005\000\002\021\005\000\002\107\005" +
    "\000\002\107\003\000\002\075\003\000\002\023\004\000" +
    "\002\023\002\000\002\024\003\000\002\024\003\000\002" +
    "\031\006\000\002\031\006\000\002\031\005\000\002\032" +
    "\012\000\002\032\006\000\002\026\004\000\002\026\006" +
    "\000\002\026\004\000\002\025\006\000\002\025\004\000" +
    "\002\025\004\000\002\025\004\000\002\025\004\000\002" +
    "\025\005\000\002\025\007\000\002\025\007\000\002\025" +
    "\005\000\002\027\003\000\002\027\002\000\002\030\003" +
    "\000\002\030\005\000\002\033\003\000\002\033\003\000" +
    "\002\033\002\000\002\034\003\000\002\034\003\000\002" +
    "\034\002\000\002\035\003\000\002\035\003\000\002\035" +
    "\002\000\002\036\004\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\040\005\000" +
    "\002\064\004\000\002\064\003\000\002\041\003\000\002" +
    "\041\002\000\002\041\003\000\002\042\005\000\002\042" +
    "\003\000\002\043\005\000\002\043\003\000\002\044\005" +
    "\000\002\044\003\000\002\045\004\000\002\046\004\000" +
    "\002\046\002\000\002\050\004\000\002\051\003\000\002" +
    "\051\002\000\002\052\005\000\002\052\003\000\002\053" +
    "\003\000\002\054\005\000\002\054\003\000\002\055\004" +
    "\000\002\055\003\000\002\055\003\000\002\055\003\000" +
    "\002\055\005\000\002\055\005\000\002\056\003\000\002" +
    "\056\002\000\002\057\003\000\002\057\002\000\002\060" +
    "\005\000\002\060\005\000\002\061\004\000\002\062\004" +
    "\000\002\062\002\000\002\063\004\000\002\063\003\000" +
    "\002\065\003\000\002\065\003\000\002\065\003\000\002" +
    "\047\003\000\002\047\003\000\002\047\003\000\002\047" +
    "\003\000\002\047\003\000\002\047\003\000\002\066\003" +
    "\000\002\066\003\000\002\067\003\000\002\067\003\000" +
    "\002\070\003\000\002\070\003\000\002\071\003\000\002" +
    "\071\003\000\002\072\003\000\002\072\003\000\002\072" +
    "\003\000\002\073\003\000\002\073\003\000\002\073\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\364\000\004\004\005\001\002\000\004\002\366\001" +
    "\002\000\004\061\007\001\002\000\014\003\ufffd\005\ufffd" +
    "\007\ufffd\015\ufffd\061\ufffd\001\002\000\014\003\uffff\005" +
    "\uffff\007\uffff\015\uffff\061\uffff\001\002\000\014\003\015" +
    "\005\017\007\022\015\020\061\016\001\002\000\006\003" +
    "\355\061\326\001\002\000\014\003\ufffb\005\ufffb\007\ufffb" +
    "\015\ufffb\061\ufffb\001\002\000\014\003\ufffe\005\ufffe\007" +
    "\ufffe\015\ufffe\061\ufffe\001\002\000\014\003\ufffa\005\ufffa" +
    "\007\ufffa\015\ufffa\061\ufffa\001\002\000\006\010\354\012" +
    "\353\001\002\000\066\003\uffc6\005\uffc6\010\uffc6\012\uffc6" +
    "\013\uffc6\014\uffc6\017\uffc6\032\uffc6\033\uffc6\036\uffc6\037" +
    "\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6" +
    "\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054" +
    "\uffc6\055\uffc6\061\uffc6\001\002\000\012\006\uffda\020\uffda" +
    "\021\uffda\061\uffda\001\002\000\004\061\037\001\002\000" +
    "\014\003\ufffc\005\ufffc\007\ufffc\015\ufffc\061\ufffc\001\002" +
    "\000\004\061\016\001\002\000\004\061\024\001\002\000" +
    "\004\011\032\001\002\000\006\010\030\012\027\001\002" +
    "\000\006\010\ufff7\012\ufff7\001\002\000\004\061\024\001" +
    "\002\000\014\003\ufff9\005\ufff9\007\ufff9\015\ufff9\061\ufff9" +
    "\001\002\000\006\010\ufff8\012\ufff8\001\002\000\010\062" +
    "\036\063\035\064\033\001\002\000\006\010\ufff3\012\ufff3" +
    "\001\002\000\006\010\ufff6\012\ufff6\001\002\000\006\010" +
    "\ufff5\012\ufff5\001\002\000\006\010\ufff4\012\ufff4\001\002" +
    "\000\010\003\042\005\uffe6\060\041\001\002\000\004\005" +
    "\044\001\002\000\004\061\016\001\002\000\004\005\uffe5" +
    "\001\002\000\004\005\uffe7\001\002\000\012\003\uffe3\005" +
    "\uffe3\006\uffe3\061\uffe3\001\002\000\012\003\047\005\051" +
    "\006\uffdc\061\016\001\002\000\004\061\326\001\002\000" +
    "\014\003\uffe0\005\uffe0\006\uffe0\010\343\061\uffe0\001\002" +
    "\000\012\003\uffe4\005\uffe4\006\uffe4\061\uffe4\001\002\000" +
    "\012\006\uffda\020\uffda\021\uffda\061\uffda\001\002\000\004" +
    "\006\053\001\002\000\014\003\uffe8\005\uffe8\007\uffe8\015" +
    "\uffe8\061\uffe8\001\002\000\012\006\055\020\056\021\uffd6" +
    "\061\uffd6\001\002\000\004\006\uffdd\001\002\000\006\021" +
    "\uffd7\061\uffd7\001\002\000\012\006\uffdb\020\uffdb\021\uffdb" +
    "\061\uffdb\001\002\000\006\021\063\061\016\001\002\000" +
    "\004\061\uffd5\001\002\000\004\016\066\001\002\000\004" +
    "\061\uffd4\001\002\000\004\061\065\001\002\000\004\016" +
    "\uffd8\001\002\000\012\003\072\012\uffd1\017\uffd1\061\016" +
    "\001\002\000\006\012\uffd2\017\uffd2\001\002\000\004\061" +
    "\341\001\002\000\006\012\073\017\074\001\002\000\006" +
    "\012\uffcf\017\uffcf\001\002\000\006\003\340\061\016\001" +
    "\002\000\010\003\076\005\uffcb\061\uffcb\001\002\000\006" +
    "\005\101\061\016\001\002\000\006\005\uffcc\061\uffcc\001" +
    "\002\000\006\005\uffcd\061\uffcd\001\002\000\006\003\324" +
    "\061\326\001\002\000\026\005\uffc4\006\uffc4\022\uffc4\024" +
    "\uffc4\025\uffc4\026\uffc4\027\uffc4\056\uffc4\057\uffc4\061\uffc4" +
    "\001\002\000\026\005\114\006\111\022\106\024\123\025" +
    "\116\026\122\027\104\056\103\057\112\061\113\001\002" +
    "\000\004\016\320\001\002\000\004\016\302\001\002\000" +
    "\026\003\274\011\277\016\161\030\267\031\272\046\206" +
    "\047\205\053\151\054\144\055\153\001\002\000\004\016" +
    "\241\001\002\000\004\010\240\001\002\000\026\005\uffc5" +
    "\006\uffc5\022\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\056" +
    "\uffc5\057\uffc5\061\uffc5\001\002\000\012\006\uffd9\020\uffd9" +
    "\021\uffd9\061\uffd9\001\002\000\004\016\231\001\002\000" +
    "\074\003\uff79\010\uff79\011\uff79\012\uff79\013\uff79\014\uff79" +
    "\016\uff79\017\uff79\030\uff79\031\uff79\032\uff79\033\uff79\035" +
    "\uff79\036\uff79\037\uff79\040\uff79\041\uff79\042\uff79\043\uff79" +
    "\044\uff79\045\uff79\046\uff79\047\uff79\050\uff79\051\uff79\052" +
    "\uff79\053\uff79\054\uff79\055\uff79\001\002\000\026\005\uffc4" +
    "\006\uffc4\022\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\056" +
    "\uffc4\057\uffc4\061\uffc4\001\002\000\026\005\uffc3\006\uffc3" +
    "\022\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\056\uffc3\057" +
    "\uffc3\061\uffc3\001\002\000\004\010\221\001\002\000\024" +
    "\005\114\022\106\024\123\025\116\026\122\027\104\056" +
    "\103\057\112\061\113\001\002\000\026\005\uffc2\006\uffc2" +
    "\022\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\056\uffc2\057" +
    "\uffc2\061\uffc2\001\002\000\024\005\114\022\106\024\123" +
    "\025\116\026\122\027\104\056\103\057\112\061\113\001" +
    "\002\000\022\010\uffaf\016\uff8d\034\uff8d\045\127\061\uff8d" +
    "\062\uff8d\063\uff8d\064\uff8d\001\002\000\004\010\124\001" +
    "\002\000\030\005\uffb6\006\uffb6\022\uffb6\023\uffb6\024\uffb6" +
    "\025\uffb6\026\uffb6\027\uffb6\056\uffb6\057\uffb6\061\uffb6\001" +
    "\002\000\016\016\136\034\134\061\113\062\132\063\142" +
    "\064\137\001\002\000\004\010\uffb0\001\002\000\016\016" +
    "\uff8e\034\uff8e\061\uff8e\062\uff8e\063\uff8e\064\uff8e\001\002" +
    "\000\004\010\131\001\002\000\030\005\uffb4\006\uffb4\022" +
    "\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\056\uffb4" +
    "\057\uffb4\061\uffb4\001\002\000\056\010\uff85\012\uff85\014" +
    "\uff85\017\uff85\032\uff85\033\uff85\036\uff85\037\uff85\040\uff85" +
    "\041\uff85\042\uff85\043\uff85\044\uff85\045\uff85\046\uff85\047" +
    "\uff85\050\uff85\051\uff85\052\uff85\053\uff85\054\uff85\055\uff85" +
    "\001\002\000\042\010\uff8f\012\uff8f\014\uff8f\017\uff8f\032" +
    "\uff8f\033\uff8f\036\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f" +
    "\043\uff8f\044\204\045\210\046\206\047\205\001\002\000" +
    "\004\061\016\001\002\000\060\010\uff80\012\uff80\014\uff80" +
    "\016\161\017\uff80\032\uff80\033\uff80\036\uff80\037\uff80\040" +
    "\uff80\041\uff80\042\uff80\043\uff80\044\uff80\045\uff80\046\uff80" +
    "\047\uff80\050\uff80\051\uff80\052\uff80\053\uff80\054\uff80\055" +
    "\uff80\001\002\000\020\016\uff8d\034\uff8d\045\127\061\uff8d" +
    "\062\uff8d\063\uff8d\064\uff8d\001\002\000\056\010\uff84\012" +
    "\uff84\014\uff84\017\uff84\032\uff84\033\uff84\036\uff84\037\uff84" +
    "\040\uff84\041\uff84\042\uff84\043\uff84\044\uff84\045\uff84\046" +
    "\uff84\047\uff84\050\uff84\051\uff84\052\uff84\053\uff84\054\uff84" +
    "\055\uff84\001\002\000\042\010\uff8b\012\uff8b\014\uff8b\017" +
    "\uff8b\032\uff8b\033\uff8b\036\uff8b\037\uff8b\040\uff8b\041\uff8b" +
    "\042\uff8b\043\uff8b\044\uff8b\045\uff8b\046\uff8b\047\uff8b\001" +
    "\002\000\056\010\uff88\012\uff88\014\uff88\017\uff88\032\uff88" +
    "\033\uff88\036\uff88\037\uff88\040\uff88\041\uff88\042\uff88\043" +
    "\uff88\044\uff88\045\uff88\046\uff88\047\uff88\050\uff88\051\uff88" +
    "\052\uff88\053\uff88\054\uff88\055\uff88\001\002\000\056\010" +
    "\uff86\012\uff86\014\uff86\017\uff86\032\uff86\033\uff86\036\uff86" +
    "\037\uff86\040\uff86\041\uff86\042\uff86\043\uff86\044\uff86\045" +
    "\uff86\046\uff86\047\uff86\050\uff86\051\uff86\052\uff86\053\uff86" +
    "\054\uff86\055\uff86\001\002\000\056\010\uff8a\012\uff8a\014" +
    "\uff8a\017\uff8a\032\uff8a\033\uff8a\036\uff8a\037\uff8a\040\uff8a" +
    "\041\uff8a\042\uff8a\043\uff8a\044\uff8a\045\uff8a\046\uff8a\047" +
    "\uff8a\050\152\051\145\052\146\053\151\054\144\055\153" +
    "\001\002\000\020\016\uff61\034\uff61\045\uff61\061\uff61\062" +
    "\uff61\063\uff61\064\uff61\001\002\000\016\016\uff64\034\uff64" +
    "\061\uff64\062\uff64\063\uff64\064\uff64\001\002\000\016\016" +
    "\uff63\034\uff63\061\uff63\062\uff63\063\uff63\064\uff63\001\002" +
    "\000\016\016\136\034\134\061\113\062\132\063\142\064" +
    "\137\001\002\000\016\016\uff66\034\uff66\061\uff66\062\uff66" +
    "\063\uff66\064\uff66\001\002\000\020\016\uff62\034\uff62\045" +
    "\uff62\061\uff62\062\uff62\063\uff62\064\uff62\001\002\000\016" +
    "\016\uff65\034\uff65\061\uff65\062\uff65\063\uff65\064\uff65\001" +
    "\002\000\020\016\uff60\034\uff60\045\uff60\061\uff60\062\uff60" +
    "\063\uff60\064\uff60\001\002\000\016\016\uff67\034\uff67\061" +
    "\uff67\062\uff67\063\uff67\064\uff67\001\002\000\056\010\uff89" +
    "\012\uff89\014\uff89\017\uff89\032\uff89\033\uff89\036\uff89\037" +
    "\uff89\040\uff89\041\uff89\042\uff89\043\uff89\044\uff89\045\uff89" +
    "\046\uff89\047\uff89\050\uff89\051\uff89\052\uff89\053\uff89\054" +
    "\uff89\055\uff89\001\002\000\004\017\157\001\002\000\056" +
    "\010\uff82\012\uff82\014\uff82\017\uff82\032\uff82\033\uff82\036" +
    "\uff82\037\uff82\040\uff82\041\uff82\042\uff82\043\uff82\044\uff82" +
    "\045\uff82\046\uff82\047\uff82\050\uff82\051\uff82\052\uff82\053" +
    "\uff82\054\uff82\055\uff82\001\002\000\056\010\uff81\012\uff81" +
    "\014\uff81\017\uff81\032\uff81\033\uff81\036\uff81\037\uff81\040" +
    "\uff81\041\uff81\042\uff81\043\uff81\044\uff81\045\uff81\046\uff81" +
    "\047\uff81\050\uff81\051\uff81\052\uff81\053\uff81\054\uff81\055" +
    "\uff81\001\002\000\024\003\163\016\uff8d\017\uff9a\034\uff8d" +
    "\045\127\061\uff8d\062\uff8d\063\uff8d\064\uff8d\001\002\000" +
    "\056\010\uff87\012\uff87\014\uff87\017\uff87\032\uff87\033\uff87" +
    "\036\uff87\037\uff87\040\uff87\041\uff87\042\uff87\043\uff87\044" +
    "\uff87\045\uff87\046\uff87\047\uff87\050\uff87\051\uff87\052\uff87" +
    "\053\uff87\054\uff87\055\uff87\001\002\000\004\017\uff99\001" +
    "\002\000\006\012\uff97\017\uff97\001\002\000\004\017\171" +
    "\001\002\000\006\012\167\017\uff9b\001\002\000\020\016" +
    "\uff8d\034\uff8d\045\127\061\uff8d\062\uff8d\063\uff8d\064\uff8d" +
    "\001\002\000\006\012\uff98\017\uff98\001\002\000\056\010" +
    "\uff9e\012\uff9e\014\uff9e\017\uff9e\032\uff9e\033\uff9e\036\uff9e" +
    "\037\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045" +
    "\uff9e\046\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e" +
    "\054\uff9e\055\uff9e\001\002\000\060\010\uff7e\012\uff7e\013" +
    "\174\014\uff7e\017\uff7e\032\uff7e\033\uff7e\036\uff7e\037\uff7e" +
    "\040\uff7e\041\uff7e\042\uff7e\043\uff7e\044\uff7e\045\uff7e\046" +
    "\uff7e\047\uff7e\050\uff7e\051\uff7e\052\uff7e\053\uff7e\054\uff7e" +
    "\055\uff7e\001\002\000\056\010\uff7f\012\uff7f\014\uff7f\017" +
    "\uff7f\032\uff7f\033\uff7f\036\uff7f\037\uff7f\040\uff7f\041\uff7f" +
    "\042\uff7f\043\uff7f\044\uff7f\045\uff7f\046\uff7f\047\uff7f\050" +
    "\uff7f\051\uff7f\052\uff7f\053\uff7f\054\uff7f\055\uff7f\001\002" +
    "\000\022\003\176\016\uff8d\034\uff8d\045\127\061\uff8d\062" +
    "\uff8d\063\uff8d\064\uff8d\001\002\000\056\010\uff83\012\uff83" +
    "\014\uff83\017\uff83\032\uff83\033\uff83\036\uff83\037\uff83\040" +
    "\uff83\041\uff83\042\uff83\043\uff83\044\uff83\045\uff83\046\uff83" +
    "\047\uff83\050\uff83\051\uff83\052\uff83\053\uff83\054\uff83\055" +
    "\uff83\001\002\000\004\014\201\001\002\000\004\014\200" +
    "\001\002\000\074\003\uff7d\010\uff7d\011\uff7d\012\uff7d\013" +
    "\uff7d\014\uff7d\016\uff7d\017\uff7d\030\uff7d\031\uff7d\032\uff7d" +
    "\033\uff7d\035\uff7d\036\uff7d\037\uff7d\040\uff7d\041\uff7d\042" +
    "\uff7d\043\uff7d\044\uff7d\045\uff7d\046\uff7d\047\uff7d\050\uff7d" +
    "\051\uff7d\052\uff7d\053\uff7d\054\uff7d\055\uff7d\001\002\000" +
    "\074\003\uff7c\010\uff7c\011\uff7c\012\uff7c\013\uff7c\014\uff7c" +
    "\016\uff7c\017\uff7c\030\uff7c\031\uff7c\032\uff7c\033\uff7c\035" +
    "\uff7c\036\uff7c\037\uff7c\040\uff7c\041\uff7c\042\uff7c\043\uff7c" +
    "\044\uff7c\045\uff7c\046\uff7c\047\uff7c\050\uff7c\051\uff7c\052" +
    "\uff7c\053\uff7c\054\uff7c\055\uff7c\001\002\000\016\016\uff6c" +
    "\034\uff6c\061\uff6c\062\uff6c\063\uff6c\064\uff6c\001\002\000" +
    "\016\016\uff6d\034\uff6d\061\uff6d\062\uff6d\063\uff6d\064\uff6d" +
    "\001\002\000\016\016\uff6b\034\uff6b\061\uff6b\062\uff6b\063" +
    "\uff6b\064\uff6b\001\002\000\020\016\uff68\034\uff68\045\uff68" +
    "\061\uff68\062\uff68\063\uff68\064\uff68\001\002\000\020\016" +
    "\uff69\034\uff69\045\uff69\061\uff69\062\uff69\063\uff69\064\uff69" +
    "\001\002\000\016\016\136\034\134\061\113\062\132\063" +
    "\142\064\137\001\002\000\016\016\uff6a\034\uff6a\061\uff6a" +
    "\062\uff6a\063\uff6a\064\uff6a\001\002\000\042\010\uff8c\012" +
    "\uff8c\014\uff8c\017\uff8c\032\uff8c\033\uff8c\036\uff8c\037\uff8c" +
    "\040\uff8c\041\uff8c\042\uff8c\043\uff8c\044\uff8c\045\uff8c\046" +
    "\uff8c\047\uff8c\001\002\000\026\005\uffbc\006\uffbc\022\uffbc" +
    "\024\uffbc\025\uffbc\026\uffbc\027\uffbc\056\uffbc\057\uffbc\061" +
    "\uffbc\001\002\000\030\005\uffc3\006\uffc3\022\uffc3\023\214" +
    "\024\uffc3\025\uffc3\026\uffc3\027\uffc3\056\uffc3\057\uffc3\061" +
    "\uffc3\001\002\000\024\005\114\022\106\024\123\025\116" +
    "\026\122\027\104\056\103\057\112\061\113\001\002\000" +
    "\030\005\uffb9\006\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9" +
    "\026\uffb9\027\uffb9\056\uffb9\057\uffb9\061\uffb9\001\002\000" +
    "\026\005\uffbb\006\uffbb\022\uffbb\024\uffbb\025\uffbb\026\uffbb" +
    "\027\uffbb\056\uffbb\057\uffbb\061\uffbb\001\002\000\030\005" +
    "\uffb8\006\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8" +
    "\027\uffb8\056\uffb8\057\uffb8\061\uffb8\001\002\000\026\005" +
    "\uffba\006\uffba\022\uffba\024\uffba\025\uffba\026\uffba\027\uffba" +
    "\056\uffba\057\uffba\061\uffba\001\002\000\030\005\uffb5\006" +
    "\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5" +
    "\056\uffb5\057\uffb5\061\uffb5\001\002\000\026\005\114\006" +
    "\223\022\106\024\123\025\116\026\122\027\104\056\103" +
    "\057\112\061\113\001\002\000\030\005\uffb1\006\uffb1\022" +
    "\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\056\uffb1" +
    "\057\uffb1\061\uffb1\001\002\000\074\003\uff7b\010\uff7b\011" +
    "\uff7b\012\uff7b\013\174\014\uff7b\016\uff7b\017\uff7b\030\uff7b" +
    "\031\uff7b\032\uff7b\033\uff7b\035\227\036\uff7b\037\uff7b\040" +
    "\uff7b\041\uff7b\042\uff7b\043\uff7b\044\uff7b\045\uff7b\046\uff7b" +
    "\047\uff7b\050\uff7b\051\uff7b\052\uff7b\053\uff7b\054\uff7b\055" +
    "\uff7b\001\002\000\074\003\uff77\010\uff77\011\uff77\012\uff77" +
    "\013\uff77\014\uff77\016\uff77\017\uff77\030\uff77\031\uff77\032" +
    "\uff77\033\uff77\035\uff77\036\uff77\037\uff77\040\uff77\041\uff77" +
    "\042\uff77\043\uff77\044\uff77\045\uff77\046\uff77\047\uff77\050" +
    "\uff77\051\uff77\052\uff77\053\uff77\054\uff77\055\uff77\001\002" +
    "\000\074\003\uff7a\010\uff7a\011\uff7a\012\uff7a\013\uff7a\014" +
    "\uff7a\016\uff7a\017\uff7a\030\uff7a\031\uff7a\032\uff7a\033\uff7a" +
    "\035\uff7a\036\uff7a\037\uff7a\040\uff7a\041\uff7a\042\uff7a\043" +
    "\uff7a\044\uff7a\045\uff7a\046\uff7a\047\uff7a\050\uff7a\051\uff7a" +
    "\052\uff7a\053\uff7a\054\uff7a\055\uff7a\001\002\000\004\061" +
    "\230\001\002\000\074\003\uff78\010\uff78\011\uff78\012\uff78" +
    "\013\uff78\014\uff78\016\uff78\017\uff78\030\uff78\031\uff78\032" +
    "\uff78\033\uff78\035\uff78\036\uff78\037\uff78\040\uff78\041\uff78" +
    "\042\uff78\043\uff78\044\uff78\045\uff78\046\uff78\047\uff78\050" +
    "\uff78\051\uff78\052\uff78\053\uff78\054\uff78\055\uff78\001\002" +
    "\000\020\016\uff8d\034\uff8d\045\127\061\uff8d\062\uff8d\063" +
    "\uff8d\064\uff8d\001\002\000\006\012\236\017\uffae\001\002" +
    "\000\004\017\234\001\002\000\004\010\235\001\002\000" +
    "\030\005\uffb2\006\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2" +
    "\026\uffb2\027\uffb2\056\uffb2\057\uffb2\061\uffb2\001\002\000" +
    "\004\063\237\001\002\000\004\017\uffad\001\002\000\030" +
    "\005\uffb7\006\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026" +
    "\uffb7\027\uffb7\056\uffb7\057\uffb7\061\uffb7\001\002\000\024" +
    "\003\243\016\uff8d\017\245\034\uff8d\045\127\061\uff8d\062" +
    "\uff8d\063\uff8d\064\uff8d\001\002\000\012\010\uff95\017\uff95" +
    "\032\uff95\033\253\001\002\000\004\017\266\001\002\000" +
    "\026\010\uff90\017\uff90\032\uff90\033\uff90\036\262\037\255" +
    "\040\260\041\256\042\257\043\261\001\002\000\024\005" +
    "\uffbf\022\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\056\uffbf" +
    "\057\uffbf\061\uffbf\001\002\000\012\010\uff93\017\uff93\032" +
    "\uff93\033\uff93\001\002\000\006\017\251\032\250\001\002" +
    "\000\020\016\uff8d\034\uff8d\045\127\061\uff8d\062\uff8d\063" +
    "\uff8d\064\uff8d\001\002\000\024\005\uffc1\022\uffc1\024\uffc1" +
    "\025\uffc1\026\uffc1\027\uffc1\056\uffc1\057\uffc1\061\uffc1\001" +
    "\002\000\012\010\uff96\017\uff96\032\uff96\033\253\001\002" +
    "\000\020\016\uff8d\034\uff8d\045\127\061\uff8d\062\uff8d\063" +
    "\uff8d\064\uff8d\001\002\000\012\010\uff94\017\uff94\032\uff94" +
    "\033\uff94\001\002\000\020\016\uff72\034\uff72\045\uff72\061" +
    "\uff72\062\uff72\063\uff72\064\uff72\001\002\000\020\016\uff70" +
    "\034\uff70\045\uff70\061\uff70\062\uff70\063\uff70\064\uff70\001" +
    "\002\000\020\016\uff6f\034\uff6f\045\uff6f\061\uff6f\062\uff6f" +
    "\063\uff6f\064\uff6f\001\002\000\020\016\uff71\034\uff71\045" +
    "\uff71\061\uff71\062\uff71\063\uff71\064\uff71\001\002\000\020" +
    "\016\uff6e\034\uff6e\045\uff6e\061\uff6e\062\uff6e\063\uff6e\064" +
    "\uff6e\001\002\000\020\016\uff73\034\uff73\045\uff73\061\uff73" +
    "\062\uff73\063\uff73\064\uff73\001\002\000\012\010\uff92\017" +
    "\uff92\032\uff92\033\uff92\001\002\000\020\016\uff8d\034\uff8d" +
    "\045\127\061\uff8d\062\uff8d\063\uff8d\064\uff8d\001\002\000" +
    "\012\010\uff91\017\uff91\032\uff91\033\uff91\001\002\000\024" +
    "\005\uffc0\022\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\056" +
    "\uffc0\057\uffc0\061\uffc0\001\002\000\006\010\uffa0\017\uffa0" +
    "\001\002\000\020\016\uff75\034\uff75\045\uff75\061\uff75\062" +
    "\uff75\063\uff75\064\uff75\001\002\000\020\016\uff74\034\uff74" +
    "\045\uff74\061\uff74\062\uff74\063\uff74\064\uff74\001\002\000" +
    "\006\010\uff9f\017\uff9f\001\002\000\006\010\uffa1\017\uffa1" +
    "\001\002\000\006\010\uff9c\017\uff9c\001\002\000\006\010" +
    "\uffa2\017\uffa2\001\002\000\006\010\uffa3\017\uffa3\001\002" +
    "\000\020\016\uff76\034\uff76\045\uff76\061\uff76\062\uff76\063" +
    "\uff76\064\uff76\001\002\000\020\016\uff8d\034\uff8d\045\127" +
    "\061\uff8d\062\uff8d\063\uff8d\064\uff8d\001\002\000\006\010" +
    "\uff9d\017\uff9d\001\002\000\010\003\304\010\uffaa\061\113" +
    "\001\002\000\004\010\307\001\002\000\006\010\uffab\017" +
    "\306\001\002\000\004\010\uffac\001\002\000\024\005\uffbd" +
    "\022\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\056\uffbd\057" +
    "\uffbd\061\uffbd\001\002\000\024\003\311\010\uffa7\016\uff8d" +
    "\034\uff8d\045\127\061\uff8d\062\uff8d\063\uff8d\064\uff8d\001" +
    "\002\000\004\010\313\001\002\000\004\010\uffa8\001\002" +
    "\000\006\010\uffa9\032\250\001\002\000\010\003\314\017" +
    "\uffa4\061\113\001\002\000\004\017\uffa5\001\002\000\004" +
    "\017\uffa6\001\002\000\004\017\317\001\002\000\024\005" +
    "\uffbe\022\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\056\uffbe" +
    "\057\uffbe\061\uffbe\001\002\000\004\061\113\001\002\000" +
    "\004\017\322\001\002\000\004\010\323\001\002\000\030" +
    "\005\uffb3\006\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026" +
    "\uffb3\027\uffb3\056\uffb3\057\uffb3\061\uffb3\001\002\000\004" +
    "\010\336\001\002\000\006\010\uffc7\012\uffc7\001\002\000" +
    "\010\010\uffe9\012\uffe9\013\334\001\002\000\006\010\331" +
    "\012\330\001\002\000\004\061\326\001\002\000\006\005" +
    "\uffca\061\uffca\001\002\000\006\010\uffc8\012\uffc8\001\002" +
    "\000\006\010\uffeb\012\uffeb\001\002\000\004\014\335\001" +
    "\002\000\010\010\uffea\012\uffea\017\uffea\001\002\000\006" +
    "\005\uffc9\061\uffc9\001\002\000\006\012\uffd3\017\uffd3\001" +
    "\002\000\006\012\uffd0\017\uffd0\001\002\000\010\012\uffe9" +
    "\013\334\017\uffe9\001\002\000\006\012\uffce\017\uffce\001" +
    "\002\000\012\003\uffe1\005\uffe1\006\uffe1\061\uffe1\001\002" +
    "\000\006\010\uffde\012\uffde\001\002\000\006\010\347\012" +
    "\346\001\002\000\004\061\326\001\002\000\012\003\uffe2" +
    "\005\uffe2\006\uffe2\061\uffe2\001\002\000\006\010\uffdf\012" +
    "\uffdf\001\002\000\012\006\352\020\056\021\uffd6\061\uffd6" +
    "\001\002\000\004\002\001\001\002\000\006\003\355\061" +
    "\326\001\002\000\014\003\ufff1\005\ufff1\007\ufff1\015\ufff1" +
    "\061\ufff1\001\002\000\006\010\uffec\012\uffec\001\002\000" +
    "\006\010\uffee\012\uffee\001\002\000\006\010\361\012\360" +
    "\001\002\000\006\003\362\061\326\001\002\000\014\003" +
    "\ufff0\005\ufff0\007\ufff0\015\ufff0\061\ufff0\001\002\000\006" +
    "\010\uffed\012\uffed\001\002\000\006\010\uffef\012\uffef\001" +
    "\002\000\006\010\365\012\360\001\002\000\014\003\ufff2" +
    "\005\ufff2\007\ufff2\015\ufff2\061\ufff2\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\364\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\074\005\001\001\000\004\003\007\001\001\000\002" +
    "\001\001\000\014\005\012\006\020\007\011\010\013\075" +
    "\010\001\001\000\006\102\355\104\363\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\350\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\075\022\001\001\000" +
    "\006\100\025\101\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\100\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\077\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\076\037\001\001\000\002\001\001" +
    "\000\004\075\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\044\001\001\000\010\012\047\014\051" +
    "\075\045\001\001\000\006\013\344\102\343\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\056\016" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\075\060\105\061\106\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\017\070\022\066\075" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\022\336\075\067\001" +
    "\001\000\004\020\074\001\001\000\006\021\076\075\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\102" +
    "\324\107\326\001\001\000\004\023\101\001\001\000\020" +
    "\024\107\025\114\026\117\031\120\032\116\036\106\061" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\037\275\040\272\064\274\065\277\070\267\073\270\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\062\223\001" +
    "\001\000\004\023\221\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\025\216\026\217\031\120\032\116\036" +
    "\106\061\104\001\001\000\002\001\001\000\020\024\211" +
    "\025\212\026\117\031\120\032\116\036\106\061\104\001" +
    "\001\000\010\027\127\050\125\051\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\052\132\053\137\054" +
    "\142\055\140\061\134\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\066\206\067\202\070\201\001\001\000\004" +
    "\075\171\001\001\000\006\040\157\056\161\001\001\000" +
    "\006\050\155\051\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\071" +
    "\146\072\153\073\147\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\055\154\061\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\041\164\042\165\050\163\051\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\050\167\051\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\057\174\060\172" +
    "\001\001\000\002\001\001\000\006\050\176\051\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\053\210\054\142\055\140\061\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\025\214\026\215\031\120\032" +
    "\116\036\106\061\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\024\107\025\114\026\117\031\120\032\116" +
    "\036\106\061\104\001\001\000\002\001\001\000\006\060" +
    "\224\063\225\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\030\232\050" +
    "\231\051\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\043\246\044\241" +
    "\045\245\050\243\051\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\046\262\047\263\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\044" +
    "\251\045\245\050\243\051\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\045\253\050\243\051\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\050\264\051\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\050\300\051\124" +
    "\001\001\000\002\001\001\000\010\033\302\036\304\061" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\034\307\043\311\044" +
    "\241\045\245\050\243\051\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\035\315\036" +
    "\314\061\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\061\320\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\103\332\001" +
    "\001\000\002\001\001\000\004\102\331\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\103\341\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\102\347\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\056\016\057\001\001\000\002\001\001" +
    "\000\006\102\355\104\356\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\102\362\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	SymbolTable.init(); // Universe scope

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol symbol = this.getScanner().next_token();
	if (symbol != null && symbol.value != null) 
		logger.debug(symbol.toString() + " " + symbol.value.toString());
	return symbol;

    }


	
	private Logger logger = MyLoggerFactory.getLogger(getClass());

	public Logger getLogger() {
		return logger;	
	}    

	
   	//redefined error functions  
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      report_error(message, info);
      done_parsing();
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("Syntax erorr: ", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatal error, cannot continue parsing, symbol: ", cur_token);
    }

    public void report_error(String message, Object info) {
        if (info != null && info instanceof Symbol) {
			Symbol currentSymbol = (Symbol) info;
			message += "at line: " + (currentSymbol.left + 1) + ", at column: " + (currentSymbol.right + 1);
			logger.info(message + ", current symbol: " + info.toString());
		} else {
			logger.info(message);
		}
		errorFound = true;
    }

    private boolean errorFound = false;

    public void report_semantic_error(String message, int lineNumber) {
    	report_error("Semantic error on line: " + lineNumber + ", " + message, null);
    	errorFound = true;
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


	//functions defined for counts
	private int globalVariableCount = 0;

	public int getGlobalVariableCount() {
		return globalVariableCount;
	}

	private int currentMethodVariableCount = 0;

	public void incrementCurrentMethodVariableCount() {
		currentMethodVariableCount++;
	}

	public void invalidateCurrentMethodVariableCount() {
		currentMethodVariableCount = 0;
	}
	
	public void incrementGlobalVariableCount() {
		globalVariableCount++;
	}

	private int mainVariableCount = 0;

	public int getMainVariableCount() {
		return mainVariableCount;
	}

	public void incrementMainVariableCount() {
		mainVariableCount += currentMethodVariableCount;
		currentMethodVariableCount = 0;
	}

	private static String main = "main";
	
	public boolean isMain(String identifier) {
		return main.equals(identifier);
	}

	private int constantCount = 0;

	public int getConstantCount() {
		return constantCount;
	}

	public void incrementConstantCount() {
		constantCount++;
	}

	private int globalArrayCount = 0;
	private int currentArrayCount = 0;

	public int getGlobalArrayCount() {
		return globalArrayCount;
	}

	public void incrementGlobalArrayCount() {
		globalArrayCount += currentArrayCount;
		currentArrayCount = 0;	
	}

	public void incrementCurrentArrayCount() {
		currentArrayCount++;
	}

	public void invalidateCurrentArrayCount() {
		currentArrayCount = 0;	
	}

	private int staticMethodCount = 0;
	private int nonStaticMethodCount = 0;
	private int currentNonStaticMethodCount = 0;

	public int getStaticMethodCount() { 
		return staticMethodCount;
	}

	public int getNonStaticMethodCount() { 
		return nonStaticMethodCount;
	}

	public int getGlobalMethodCount() {
		return currentNonStaticMethodCount;
	}

	public void incrementCurrentNonStaticMethodCount() {
		currentNonStaticMethodCount++;
	}

	public void incrementStaticMethodCount() {
		staticMethodCount++;
	}

	public void incrementNonStaticMethodCount() {
		nonStaticMethodCount += currentNonStaticMethodCount;
		currentNonStaticMethodCount = 0;
	}

	private int codeBlockCount = 0;
	private int currentMethodCallCount = 0;

	public int getCodeBlockCount() {
		return codeBlockCount;
	}

	public void incrementCodeBlockCount() {
		codeBlockCount++;
	}

	private int mainMethodCallCount = 0;

	public int getMainMethodCalls() {
		return mainMethodCallCount;
	}

	public void incrementCurrentMethodCallCount() {
		currentMethodCallCount++;
	}

	public void invalidateCurrentMethodCallCount() {
		currentMethodCallCount = 0;
	}

	public void incrementMainMethodCallCount() {
		mainMethodCallCount += currentMethodCallCount;
		currentMethodCallCount = 0;
	}

	private int formalArgumentsCount = 0;

	public int getFormalArgumentsCount() {
		return formalArgumentsCount;
	}

	public void incrementFormalArgumentsCount() {
		formalArgumentsCount++;
	}

	private int classDefinitionCount = 0;

	public int getClassDefinitionCount() {
		return classDefinitionCount;
	}

	public void incrementClassDefinitionCount() {
		classDefinitionCount++;
	}

	private int classVariableCount = 0;

	public int getClassVariableCount() {
		return classVariableCount;
	}

	public void incrementClassVariableCount() {
		classVariableCount ++;
	}

	void printSyntaxErrorDescription(String message) {
		parser.getLogger().info("Description: " + message);
	}

	//Semantic analysis 
	private int variablePosition = 0;
	
	private int formalParameterCount = 0;
	private Obj currentMethod = null;

	private Struct currentClass = null;

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // MultiplicationOperatorRight ::= PERCENT_EQUALS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicationOperatorRight",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // MultiplicationOperatorRight ::= SOLIDUS_EQUALS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicationOperatorRight",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // MultiplicationOperatorRight ::= TIMES_EQUALS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicationOperatorRight",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // MultiplicationOperatorLeft ::= PERCENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicationOperatorLeft",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // MultiplicationOperatorLeft ::= SOLIDUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicationOperatorLeft",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // MultiplicationOperatorLeft ::= TIMES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicationOperatorLeft",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // MultiplicationOperator ::= MultiplicationOperatorRight 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicationOperator",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // MultiplicationOperator ::= MultiplicationOperatorLeft 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicationOperator",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // AdditionOperatorRight ::= MINUS_EQUALS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AdditionOperatorRight",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // AdditionOperatorRight ::= PLUS_EQUALS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AdditionOperatorRight",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // AdditionOperatorLeft ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AdditionOperatorLeft",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // AdditionOperatorLeft ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AdditionOperatorLeft",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // AdditionOperator ::= AdditionOperatorRight 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AdditionOperator",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // AdditionOperator ::= AdditionOperatorLeft 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AdditionOperator",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // RelationalOperator ::= LESS_OR_EQUAL_THAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalOperator",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // RelationalOperator ::= LESS_THAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalOperator",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // RelationalOperator ::= GREATER_OR_EQUAL_THAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalOperator",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // RelationalOperator ::= GREATER_THAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalOperator",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // RelationalOperator ::= NOT_EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalOperator",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // RelationalOperator ::= EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalOperator",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // AssignOperator ::= MultiplicationOperatorRight 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOperator",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // AssignOperator ::= AdditionOperatorRight 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOperator",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // AssignOperator ::= EQUALS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOperator",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // AccessListElement ::= ArrayIndexer 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AccessListElement",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // AccessListElement ::= DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AccessListElement",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // AccessList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AccessList",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // AccessList ::= AccessList AccessListElement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AccessList",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Designator ::= IDENTIFIER AccessList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Designator",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ArrayIndexer ::= LEFT_BRACKET error RIGHT_BRACKET 
            {
              Object RESULT =null;
		 printSyntaxErrorDescription("Incorrect expression for array index"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArrayIndexer",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ArrayIndexer ::= LEFT_BRACKET Expression RIGHT_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArrayIndexer",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ArraySize ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArraySize",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ArraySize ::= ArrayIndexer 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArraySize",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OptionalParameters ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptionalParameters",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OptionalParameters ::= MethodCall 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptionalParameters",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Factor ::= LEFT_PARENTHESIS Expression RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Factor ::= NEW Type ArraySize 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Factor ::= BOOLEAN_CONSTANT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Factor ::= CHARACTER_CONSTANT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Factor ::= NUMERICAL_CONSTANT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Factor ::= Designator OptionalParameters 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // FactorList ::= Factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FactorList",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // FactorList ::= FactorList MultiplicationOperator Factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FactorList",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Term ::= FactorList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // TermList ::= Term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TermList",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // TermList ::= TermList AdditionOperator Term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TermList",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ExpressionPrefix ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionPrefix",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ExpressionPrefix ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionPrefix",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Expression ::= ExpressionPrefix TermList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // RestOfTheConditionFact ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RestOfTheConditionFact",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // RestOfTheConditionFact ::= RelationalOperator Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RestOfTheConditionFact",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ConditionFact ::= Expression RestOfTheConditionFact 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConditionFact",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ConditionTerm ::= ConditionFact 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConditionTerm",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ConditionTerm ::= ConditionTerm AND ConditionFact 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConditionTerm",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Condition ::= ConditionTerm 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condition",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Condition ::= Condition OR ConditionTerm 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condition",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ExpressionList ::= Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionList",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ExpressionList ::= ExpressionList COMA Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionList",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ActualParameters ::= error 
            {
              Object RESULT =null;
		 printSyntaxErrorDescription("Incorrect actual parameter list syntax"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ActualParameters",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ActualParameters ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ActualParameters",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ActualParameters ::= ExpressionList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ActualParameters",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // AssignOperation ::= error 
            {
              Object RESULT =null;
		 printSyntaxErrorDescription("Incorrect asign operation syntax"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOperation",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // AssignOperation ::= AssignOperator Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOperation",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // MethodCall ::= LEFT_PARENTHESIS ActualParameters RIGHT_PARENTHESIS 
            {
              Object RESULT =null;
		
			 		incrementCurrentMethodCallCount();
			 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodCall",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // RestOfTheDesignatorStatement ::= DECREMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RestOfTheDesignatorStatement",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // RestOfTheDesignatorStatement ::= INCREMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RestOfTheDesignatorStatement",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // RestOfTheDesignatorStatement ::= MethodCall 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RestOfTheDesignatorStatement",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // RestOfTheDesignatorStatement ::= AssignOperation 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RestOfTheDesignatorStatement",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DesignatorStatement ::= Designator RestOfTheDesignatorStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ForPostStatement ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForPostStatement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ForPostStatement ::= error 
            {
              Object RESULT =null;
		 printSyntaxErrorDescription("Incorrect post for loop statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForPostStatement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ForPostStatement ::= DesignatorStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForPostStatement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ForCondition ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForCondition",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ForCondition ::= error 
            {
              Object RESULT =null;
		 printSyntaxErrorDescription("Incorrect for condition statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForCondition",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ForCondition ::= Condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForCondition",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ForInitialStatement ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForInitialStatement",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ForInitialStatement ::= error 
            {
              Object RESULT =null;
		 printSyntaxErrorDescription("Incorrect initial for loop statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForInitialStatement",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ForInitialStatement ::= DesignatorStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForInitialStatement",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PrintParameters ::= Expression COMA NUMERICAL_CONSTANT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrintParameters",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PrintParameters ::= Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrintParameters",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ReturnValue ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnValue",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ReturnValue ::= Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnValue",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // MatchedStatement ::= LEFT_BRACE StatementList RIGHT_BRACE 
            {
              Object RESULT =null;
		
					 		incrementCodeBlockCount();
					 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MatchedStatement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // MatchedStatement ::= PRINT LEFT_PARENTHESIS PrintParameters RIGHT_PARENTHESIS SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MatchedStatement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // MatchedStatement ::= READ LEFT_PARENTHESIS Designator RIGHT_PARENTHESIS SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MatchedStatement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // MatchedStatement ::= RETURN ReturnValue SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MatchedStatement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // MatchedStatement ::= CONTINUE SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MatchedStatement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // MatchedStatement ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MatchedStatement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // MatchedStatement ::= DesignatorStatement SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MatchedStatement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // MatchedStatement ::= ForHeader MatchedStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MatchedStatement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // MatchedStatement ::= IfHeader MatchedStatement ELSE MatchedStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MatchedStatement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // UnmatchedStatement ::= ForHeader UnmatchedStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnmatchedStatement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // UnmatchedStatement ::= IfHeader MatchedStatement ELSE UnmatchedStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnmatchedStatement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // UnmatchedStatement ::= IfHeader Statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnmatchedStatement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ForHeader ::= FOR LEFT_PARENTHESIS error RIGHT_PARENTHESIS 
            {
              Object RESULT =null;
		 printSyntaxErrorDescription("Incorrect for loop inner statements"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForHeader",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ForHeader ::= FOR LEFT_PARENTHESIS ForInitialStatement SEMICOLON ForCondition SEMICOLON ForPostStatement RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForHeader",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // IfHeader ::= IF LEFT_PARENTHESIS RIGHT_PARENTHESIS 
            {
              Object RESULT =null;
		 printSyntaxErrorDescription("Incorrect condition declaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfHeader",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // IfHeader ::= IF LEFT_PARENTHESIS error RIGHT_PARENTHESIS 
            {
              Object RESULT =null;
		 printSyntaxErrorDescription("Incorrect condition declaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfHeader",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // IfHeader ::= IF LEFT_PARENTHESIS Condition RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfHeader",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Statement ::= UnmatchedStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Statement ::= MatchedStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Type ::= IDENTIFIER 
            {
              Struct RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Obj typeNode = SymbolTable.find(name);
				if (SymbolTable.noObj.equals(typeNode)) {
					parser.report_semantic_error("no type named: " + name, nameleft);
					RESULT = SymbolTable.noType;
				} else if (Obj.Type != typeNode.getKind()) {
					parser.report_semantic_error("Name: " + name + " is not a type", nameleft);
					RESULT = SymbolTable.noType;
				} else {
					RESULT = typeNode.getType();
				}
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // MethodVariableList ::= Variable 
            {
              List<Variable> RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable variable = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
							incrementCurrentMethodVariableCount(); 

							//Semantic analysis
							RESULT = new ArrayList<Variable>();
							RESULT.add(variable);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodVariableList",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // MethodVariableList ::= MethodVariableList COMA Variable 
            {
              List<Variable> RESULT =null;
		int localsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int localsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Variable> locals = (List<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable variable = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
							incrementCurrentMethodVariableCount(); 

							//Semantic analysis
							locals.add(variable);
							RESULT = locals;
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodVariableList",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // MethodVariableDeclaration ::= Type error SEMICOLON 
            {
              Object RESULT =null;
		 printSyntaxErrorDescription("Incorrect local variable declaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodVariableDeclaration",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // MethodVariableDeclaration ::= Type MethodVariableList SEMICOLON 
            {
              Object RESULT =null;
		int typeNodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeNoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Struct typeNode = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int localsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int localsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Variable> locals = (List<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
									//Semantic analysis
									if (typeNode != null && locals != null && typeNode != SymbolTable.noType) {
										for(Variable localVariable : locals) {
											if (SymbolTable.currentScope.findSymbol(localVariable.getName()) != null) {
												parser.report_semantic_error("Redefinition of name " + localVariable.getName(), typeNodeleft);
											} else {
												Obj newObject = null;
												if (localVariable.isArray()) {
													newObject = SymbolTable.insert(Obj.Var, localVariable.getName(), new MyStruct(Struct.Array, typeNode));
												} else {
													newObject = SymbolTable.insert(Obj.Var, localVariable.getName(), typeNode);
												}

												if (newObject == SymbolTable.noObj) {
													parser.report_semantic_error("Could not insert symbol " + localVariable.getName() + " into symbol table", typeNodeleft);
												} else {
													newObject.setLevel(SymbolTable.getCurrentLevel());
													newObject.setFpPos(variablePosition);
													newObject.setAdr(variablePosition);
													variablePosition++;
												}
											}
										}
									}
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodVariableDeclaration",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // MethodVariableDeclarationList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodVariableDeclarationList",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // MethodVariableDeclarationList ::= error 
            {
              Object RESULT =null;
		 printSyntaxErrorDescription("Incorrect local variable declaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodVariableDeclarationList",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // MethodVariableDeclarationList ::= MethodVariableDeclarationList MethodVariableDeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodVariableDeclarationList",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FormalParameter ::= Type IDENTIFIER Brackets 
            {
              Object RESULT =null;
		int typeNodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeNoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Struct typeNode = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int isArrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int isArrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean isArray = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						incrementFormalArgumentsCount();
						
						//Semantic analysis
						//If the exists in the current scop then it is an error
						if (typeNode != null && typeNode != SymbolTable.noType) {
							if (SymbolTable.currentScope.findSymbol(name) != null) {
								parser.report_semantic_error("Redefinition of " + name, nameleft);
							} else {
								Obj newObject = null;
								if (isArray) {
									newObject = SymbolTable.insert(Obj.Var, name, new MyStruct(Struct.Array, typeNode));
								} else {
									newObject = SymbolTable.insert(Obj.Var, name, typeNode);
								}

								if (newObject == SymbolTable.noObj) {
									parser.report_semantic_error("Could not insert symbol " + name + " into symbol table", nameleft);
								} else {
									newObject.setLevel(SymbolTable.getCurrentLevel());
									newObject.setFpPos(variablePosition);
									newObject.setAdr(variablePosition);
									variablePosition++;
									formalParameterCount++;
								}
							}
						}
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalParameter",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FormalParameterList ::= error 
            {
              Object RESULT =null;
		 printSyntaxErrorDescription("Incorrect formal parameter declaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalParameterList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FormalParameterList ::= FormalParameterList COMA error 
            {
              Object RESULT =null;
		 printSyntaxErrorDescription("Incorrect formal parameter declaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalParameterList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FormalParameterList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalParameterList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FormalParameterList ::= FormalParameter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalParameterList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FormalParameterList ::= FormalParameterList COMA FormalParameter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalParameterList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ReturnType ::= VOID 
            {
              Struct RESULT =null;
		
			   		RESULT = SymbolTable.voidType;
			   	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnType",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ReturnType ::= Type 
            {
              Struct RESULT =null;
		int typeNodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeNoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct typeNode = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			   		RESULT = typeNode;
			   	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnType",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // StaticModifier ::= 
            {
              Object RESULT =null;
		
				   		incrementCurrentNonStaticMethodCount();
				   	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StaticModifier",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // StaticModifier ::= STATIC 
            {
              Object RESULT =null;
		
						incrementStaticMethodCount();
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StaticModifier",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MethodTypeAndName ::= ReturnType IDENTIFIER 
            {
              Object RESULT =null;
		int typeNodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeNoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Struct typeNode = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							//Semantic analysis
							if (typeNode != SymbolTable.noType) {
								if (SymbolTable.currentScope.findSymbol(identifier) != null) {
									parser.report_semantic_error("Redefinition of " + identifier, identifierleft);
								} else {
									currentMethod = SymbolTable.insert(Obj.Meth, identifier, typeNode);
									
									if (currentMethod == SymbolTable.noObj) {
										currentMethod = null;
										parser.report_semantic_error("Could not insert symbol " + identifier + "into symbol talbe", identifierleft);
									} else {
										variablePosition = 0;
										formalParameterCount = 0;

										SymbolTable.openScope();
									}
								}
							}
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodTypeAndName",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MethodDeclaration ::= StaticModifier MethodTypeAndName LEFT_PARENTHESIS FormalParameterList RIGHT_PARENTHESIS MethodVariableDeclarationList LEFT_BRACE StatementList RIGHT_BRACE 
            {
              Object RESULT =null;
		
							if (isMain(currentMethod.getName())) {
								incrementMainVariableCount();
								incrementMainMethodCallCount();
							} else {
								invalidateCurrentMethodVariableCount();
								invalidateCurrentArrayCount();
								invalidateCurrentMethodCallCount();
							}
							incrementCodeBlockCount();

							//Semantic analysis
							if (currentMethod != null) {
								SymbolTable.chainLocalSymbols(currentMethod);
								SymbolTable.closeScope();

								currentMethod.setLevel(formalParameterCount);
							}

							currentMethod = null;
							variablePosition = 0;
							formalParameterCount = 0;
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDeclaration",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MethodDeclarationList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDeclarationList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MethodDeclarationList ::= MethodDeclarationList MethodDeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDeclarationList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ClassMethodList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassMethodList",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ClassMethodList ::= LEFT_BRACE MethodDeclarationList RIGHT_BRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassMethodList",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ClassVariableList ::= Variable 
            {
              Object RESULT =null;
		 incrementClassVariableCount(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassVariableList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ClassVariableList ::= ClassVariableList COMA Variable 
            {
              Object RESULT =null;
		 incrementClassVariableCount(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassVariableList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ClassVariableDeclaration ::= error 
            {
              Object RESULT =null;
		 printSyntaxErrorDescription("Incorrect class variable declaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassVariableDeclaration",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ClassVariableDeclaration ::= error SEMICOLON 
            {
              Object RESULT =null;
		 printSyntaxErrorDescription("Incorrect class variable declaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassVariableDeclaration",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ClassVariableDeclaration ::= Type ClassVariableList SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassVariableDeclaration",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ClassVariableDeclarationList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassVariableDeclarationList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ClassVariableDeclarationList ::= ClassVariableDeclarationList ClassVariableDeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassVariableDeclarationList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ParentClassDeclaration ::= error 
            {
              Struct RESULT =null;
		 printSyntaxErrorDescription("Incorrect declaration of parent class"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParentClassDeclaration",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ParentClassDeclaration ::= 
            {
              Struct RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParentClassDeclaration",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ParentClassDeclaration ::= EXTENDS Type 
            {
              Struct RESULT =null;
		int typeNodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeNoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct typeNode = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						   		//Semantic analysis
						   		if (typeNode != SymbolTable.noType) {}
						   	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParentClassDeclaration",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ClassDeclaration ::= CLASS IDENTIFIER ParentClassDeclaration LEFT_BRACE ClassVariableDeclarationList ClassMethodList RIGHT_BRACE 
            {
              Object RESULT =null;
		
						 	incrementNonStaticMethodCount();
						 	incrementClassDefinitionCount();
						 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Brackets ::= 
            {
              Boolean RESULT =null;
		
			 		RESULT = false;
			 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Brackets",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Brackets ::= LEFT_BRACKET RIGHT_BRACKET 
            {
              Boolean RESULT =null;
		
					incrementCurrentArrayCount();
					RESULT = true;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Brackets",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Variable ::= IDENTIFIER Brackets 
            {
              Variable RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int isArrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int isArrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean isArray = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Variable(name, isArray);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Variable",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // GlobalVariableList ::= error 
            {
              List<Variable> RESULT =null;
		 printSyntaxErrorDescription("Incorrect global variable declaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalVariableList",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // GlobalVariableList ::= GlobalVariableList COMA error 
            {
              List<Variable> RESULT =null;
		 printSyntaxErrorDescription("Incorrect global variable declaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalVariableList",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // GlobalVariableList ::= Variable 
            {
              List<Variable> RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable variable = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
				 			incrementGlobalVariableCount(); 

				 			//Semantic analysis
				 			RESULT = new ArrayList<Variable>();
				 			RESULT.add(variable);
				 		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalVariableList",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // GlobalVariableList ::= GlobalVariableList COMA Variable 
            {
              List<Variable> RESULT =null;
		int globalVariablesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int globalVariablesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Variable> globalVariables = (List<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable variable = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
							incrementGlobalVariableCount(); 

							//Semantic analysis
							globalVariables.add(variable);
							RESULT = globalVariables;
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalVariableList",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // GlobalVariableDeclaration ::= error COMA GlobalVariableList SEMICOLON 
            {
              Object RESULT =null;
		 printSyntaxErrorDescription("Incorrect global variable declaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalVariableDeclaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // GlobalVariableDeclaration ::= error SEMICOLON 
            {
              Object RESULT =null;
		 printSyntaxErrorDescription("Incorrect global variable list declaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalVariableDeclaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // GlobalVariableDeclaration ::= Type GlobalVariableList SEMICOLON 
            {
              Object RESULT =null;
		int typeNodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeNoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Struct typeNode = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int globalVariablesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int globalVariablesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Variable> globalVariables = (List<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
									//Semantic analysis
									if (typeNode != null && globalVariables != null && typeNode != SymbolTable.noType) {
										for(Variable variable : globalVariables) {
											if(SymbolTable.currentScope.findSymbol(variable.getName()) != null) {
												parser.report_semantic_error("Redefinition of name " + variable.getName(), typeNodeleft);
											} else {
												Obj newObject = null;
												if (variable.isArray()) {
													newObject = SymbolTable.insert(Obj.Var, variable.getName(), new MyStruct(Struct.Array, typeNode));
												} else {
													newObject = SymbolTable.insert(Obj.Var, variable.getName(), typeNode);
												}
												if (newObject != null && newObject != SymbolTable.noObj) {
													newObject.setAdr(variablePosition);
													newObject.setLevel(SymbolTable.getCurrentLevel());
													variablePosition++;
												} else {
													parser.report_semantic_error("Could not insert symbol: " + variable.getName() + " into symbol table", typeNodeleft);
												}
											}
										}
									}
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalVariableDeclaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Value ::= BOOLEAN_CONSTANT 
            {
              Value RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean value = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		  		RESULT = new Value(SymbolTable.boolType, value.booleanValue() ? 1 : 0);
		  	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Value ::= CHARACTER_CONSTANT 
            {
              Value RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		  		RESULT = new Value(SymbolTable.charType, (int)value.charAt(0));
		  	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Value ::= NUMERICAL_CONSTANT 
            {
              Value RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		  		RESULT = new Value(SymbolTable.intType, value.intValue());
		  	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Constant ::= IDENTIFIER EQUALS Value 
            {
              Constant RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Value value = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Constant(name, value);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ConstantList ::= Constant 
            {
              List<Constant> RESULT =null;
		int constantleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Constant constant = (Constant)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
				 		incrementConstantCount();

				 		//Semantic analysis
				 		List<Constant> constants = new ArrayList<Constant>();
				 		constants.add(constant);
				 		RESULT = constants;
				 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstantList",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ConstantList ::= ConstantList COMA Constant 
            {
              List<Constant> RESULT =null;
		int constantsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int constantsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Constant> constants = (List<Constant>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int constantleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Constant constant = (Constant)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
						incrementConstantCount(); 

						//Semantic analysis
						constants.add(constant);
						RESULT = constants;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstantList",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ConstantDeclaration ::= CONST Type ConstantList SEMICOLON 
            {
              Object RESULT =null;
		int typeNodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeNoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Struct typeNode = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int constantsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int constantsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Constant> constants = (List<Constant>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
							if (typeNode != null && constants != null && typeNode != SymbolTable.noType) {
								for(Constant constant : constants) {
									if (!typeNode.equals(constant.getValue().getType())) {
										parser.report_semantic_error("Value " + constant.getValue() + " is not of type " + SymbolTable.getBasicTypeName(typeNode.getKind()), typeNodeleft);
									} else if (SymbolTable.currentScope.findSymbol(constant.getName()) != null) {
												parser.report_semantic_error("Redefinition of name " + constant.getName(), typeNodeleft);		
									} else {
										Obj newObject = SymbolTable.insert(Obj.Con, constant.getName(), typeNode);
										if (newObject != null && newObject != SymbolTable.noObj) {
											newObject.setAdr(constant.getValue().getValue());
										} else {
											parser.report_semantic_error("Could not insert symbol: " + constant.getName() + " into symbol table", typeNodeleft);
										}
									}
								}
							}
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstantDeclaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NonMethodDeclaration ::= ClassDeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NonMethodDeclaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NonMethodDeclaration ::= GlobalVariableDeclaration 
            {
              Object RESULT =null;
		 incrementGlobalArrayCount(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NonMethodDeclaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NonMethodDeclaration ::= ConstantDeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NonMethodDeclaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NonMethodDeclarationList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NonMethodDeclarationList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NonMethodDeclarationList ::= NonMethodDeclarationList NonMethodDeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NonMethodDeclarationList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgramName ::= IDENTIFIER 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT  = SymbolTable.insert(Obj.Prog, name, SymbolTable.noType);
					SymbolTable.openScope();
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProgramName",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROGRAM ProgramName NonMethodDeclarationList LEFT_BRACE MethodDeclarationList RIGHT_BRACE 
            {
              Object RESULT =null;
		int programObjectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int programObjectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Obj programObject = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
				if (SymbolTable.currentScope.findSymbol(main) == null) {
					parser.report_semantic_error("No main symbol found", programObjectleft);
				} 
				SymbolTable.chainLocalSymbols(programObject);
				SymbolTable.closeScope();
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

